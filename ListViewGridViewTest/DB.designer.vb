'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="VDIS_BHI_beta")>  _
Partial Public Class DBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertdisp(instance As disp)
    End Sub
  Partial Private Sub Updatedisp(instance As disp)
    End Sub
  Partial Private Sub Deletedisp(instance As disp)
    End Sub
  Partial Private Sub Insertdisp_contact(instance As disp_contact)
    End Sub
  Partial Private Sub Updatedisp_contact(instance As disp_contact)
    End Sub
  Partial Private Sub Deletedisp_contact(instance As disp_contact)
    End Sub
  Partial Private Sub Insertdisp_personnel(instance As disp_personnel)
    End Sub
  Partial Private Sub Updatedisp_personnel(instance As disp_personnel)
    End Sub
  Partial Private Sub Deletedisp_personnel(instance As disp_personnel)
    End Sub
  Partial Private Sub Insertdisp_services_requested(instance As disp_services_requested)
    End Sub
  Partial Private Sub Updatedisp_services_requested(instance As disp_services_requested)
    End Sub
  Partial Private Sub Deletedisp_services_requested(instance As disp_services_requested)
    End Sub
  Partial Private Sub Insertdisp_field_test(instance As disp_field_test)
    End Sub
  Partial Private Sub Updatedisp_field_test(instance As disp_field_test)
    End Sub
  Partial Private Sub Deletedisp_field_test(instance As disp_field_test)
    End Sub
  Partial Private Sub Insertdisp_interval(instance As disp_interval)
    End Sub
  Partial Private Sub Updatedisp_interval(instance As disp_interval)
    End Sub
  Partial Private Sub Deletedisp_interval(instance As disp_interval)
    End Sub
  Partial Private Sub Insertdisp_tubular(instance As disp_tubular)
    End Sub
  Partial Private Sub Updatedisp_tubular(instance As disp_tubular)
    End Sub
  Partial Private Sub Deletedisp_tubular(instance As disp_tubular)
    End Sub
  Partial Private Sub Insertdisp_run(instance As disp_run)
    End Sub
  Partial Private Sub Updatedisp_run(instance As disp_run)
    End Sub
  Partial Private Sub Deletedisp_run(instance As disp_run)
    End Sub
  Partial Private Sub Insertdisp_asset(instance As disp_asset)
    End Sub
  Partial Private Sub Updatedisp_asset(instance As disp_asset)
    End Sub
  Partial Private Sub Deletedisp_asset(instance As disp_asset)
    End Sub
  Partial Private Sub Insertv_quote_find_list_result(instance As v_quote_find_list_result)
    End Sub
  Partial Private Sub Updatev_quote_find_list_result(instance As v_quote_find_list_result)
    End Sub
  Partial Private Sub Deletev_quote_find_list_result(instance As v_quote_find_list_result)
    End Sub
  Partial Private Sub Insertdisp_doc(instance As disp_doc)
    End Sub
  Partial Private Sub Updatedisp_doc(instance As disp_doc)
    End Sub
  Partial Private Sub Deletedisp_doc(instance As disp_doc)
    End Sub
  Partial Private Sub Insertdisp_pjb(instance As disp_pjb)
    End Sub
  Partial Private Sub Updatedisp_pjb(instance As disp_pjb)
    End Sub
  Partial Private Sub Deletedisp_pjb(instance As disp_pjb)
    End Sub
  Partial Private Sub Insertdisp_pjb_response(instance As disp_pjb_response)
    End Sub
  Partial Private Sub Updatedisp_pjb_response(instance As disp_pjb_response)
    End Sub
  Partial Private Sub Deletedisp_pjb_response(instance As disp_pjb_response)
    End Sub
  Partial Private Sub Insertdisp_lqa(instance As disp_lqa)
    End Sub
  Partial Private Sub Updatedisp_lqa(instance As disp_lqa)
    End Sub
  Partial Private Sub Deletedisp_lqa(instance As disp_lqa)
    End Sub
  Partial Private Sub Insertdisp_lqa_item(instance As disp_lqa_item)
    End Sub
  Partial Private Sub Updatedisp_lqa_item(instance As disp_lqa_item)
    End Sub
  Partial Private Sub Deletedisp_lqa_item(instance As disp_lqa_item)
    End Sub
  Partial Private Sub Insertdisp_fso(instance As disp_fso)
    End Sub
  Partial Private Sub Updatedisp_fso(instance As disp_fso)
    End Sub
  Partial Private Sub Deletedisp_fso(instance As disp_fso)
    End Sub
  Partial Private Sub Insertdisp_fso_item(instance As disp_fso_item)
    End Sub
  Partial Private Sub Updatedisp_fso_item(instance As disp_fso_item)
    End Sub
  Partial Private Sub Deletedisp_fso_item(instance As disp_fso_item)
    End Sub
  Partial Private Sub Insertquote_footnote_item(instance As quote_footnote_item)
    End Sub
  Partial Private Sub Updatequote_footnote_item(instance As quote_footnote_item)
    End Sub
  Partial Private Sub Deletequote_footnote_item(instance As quote_footnote_item)
    End Sub
  Partial Private Sub Insertquote_linked_to_fso_item(instance As quote_linked_to_fso_item)
    End Sub
  Partial Private Sub Updatequote_linked_to_fso_item(instance As quote_linked_to_fso_item)
    End Sub
  Partial Private Sub Deletequote_linked_to_fso_item(instance As quote_linked_to_fso_item)
    End Sub
  Partial Private Sub Insertdispatch_summary(instance As dispatch_summary)
    End Sub
  Partial Private Sub Updatedispatch_summary(instance As dispatch_summary)
    End Sub
  Partial Private Sub Deletedispatch_summary(instance As dispatch_summary)
    End Sub
  Partial Private Sub Insertdisp_asset_order_item(instance As disp_asset_order_item)
    End Sub
  Partial Private Sub Updatedisp_asset_order_item(instance As disp_asset_order_item)
    End Sub
  Partial Private Sub Deletedisp_asset_order_item(instance As disp_asset_order_item)
    End Sub
  Partial Private Sub Insertasset_order_material(instance As asset_order_material)
    End Sub
  Partial Private Sub Updateasset_order_material(instance As asset_order_material)
    End Sub
  Partial Private Sub Deleteasset_order_material(instance As asset_order_material)
    End Sub
  Partial Private Sub Insertdisp_asset_order(instance As disp_asset_order)
    End Sub
  Partial Private Sub Updatedisp_asset_order(instance As disp_asset_order)
    End Sub
  Partial Private Sub Deletedisp_asset_order(instance As disp_asset_order)
    End Sub
  Partial Private Sub Insertasset_order_template_item(instance As asset_order_template_item)
    End Sub
  Partial Private Sub Updateasset_order_template_item(instance As asset_order_template_item)
    End Sub
  Partial Private Sub Deleteasset_order_template_item(instance As asset_order_template_item)
    End Sub
  Partial Private Sub Insertasset_order_template(instance As asset_order_template)
    End Sub
  Partial Private Sub Updateasset_order_template(instance As asset_order_template)
    End Sub
  Partial Private Sub Deleteasset_order_template(instance As asset_order_template)
    End Sub
  Partial Private Sub Insertquote_summary_report_item(instance As quote_summary_report_item)
    End Sub
  Partial Private Sub Updatequote_summary_report_item(instance As quote_summary_report_item)
    End Sub
  Partial Private Sub Deletequote_summary_report_item(instance As quote_summary_report_item)
    End Sub
  Partial Private Sub Insertdisp_standby_item(instance As disp_standby_item)
    End Sub
  Partial Private Sub Updatedisp_standby_item(instance As disp_standby_item)
    End Sub
  Partial Private Sub Deletedisp_standby_item(instance As disp_standby_item)
    End Sub
  Partial Private Sub Insertdisp_rcor(instance As disp_rcor)
    End Sub
  Partial Private Sub Updatedisp_rcor(instance As disp_rcor)
    End Sub
  Partial Private Sub Deletedisp_rcor(instance As disp_rcor)
    End Sub
  Partial Private Sub Insertdisp_rcor_attempt(instance As disp_rcor_attempt)
    End Sub
  Partial Private Sub Updatedisp_rcor_attempt(instance As disp_rcor_attempt)
    End Sub
  Partial Private Sub Deletedisp_rcor_attempt(instance As disp_rcor_attempt)
    End Sub
  Partial Private Sub Insertdisp_asset_order_asset_selection(instance As disp_asset_order_asset_selection)
    End Sub
  Partial Private Sub Updatedisp_asset_order_asset_selection(instance As disp_asset_order_asset_selection)
    End Sub
  Partial Private Sub Deletedisp_asset_order_asset_selection(instance As disp_asset_order_asset_selection)
    End Sub
  Partial Private Sub Insertasset_forecast_summary(instance As asset_forecast_summary)
    End Sub
  Partial Private Sub Updateasset_forecast_summary(instance As asset_forecast_summary)
    End Sub
  Partial Private Sub Deleteasset_forecast_summary(instance As asset_forecast_summary)
    End Sub
  Partial Private Sub Insertapp_user(instance As app_user)
    End Sub
  Partial Private Sub Updateapp_user(instance As app_user)
    End Sub
  Partial Private Sub Deleteapp_user(instance As app_user)
    End Sub
  Partial Private Sub Insertmap_base_icon(instance As map_base_icon)
    End Sub
  Partial Private Sub Updatemap_base_icon(instance As map_base_icon)
    End Sub
  Partial Private Sub Deletemap_base_icon(instance As map_base_icon)
    End Sub
  Partial Private Sub Insertdisp_asset_utilization(instance As disp_asset_utilization)
    End Sub
  Partial Private Sub Updatedisp_asset_utilization(instance As disp_asset_utilization)
    End Sub
  Partial Private Sub Deletedisp_asset_utilization(instance As disp_asset_utilization)
    End Sub
  Partial Private Sub Insertimpact_incident(instance As impact_incident)
    End Sub
  Partial Private Sub Updateimpact_incident(instance As impact_incident)
    End Sub
  Partial Private Sub Deleteimpact_incident(instance As impact_incident)
    End Sub
  Partial Private Sub Insertdisp_impact_incident(instance As disp_impact_incident)
    End Sub
  Partial Private Sub Updatedisp_impact_incident(instance As disp_impact_incident)
    End Sub
  Partial Private Sub Deletedisp_impact_incident(instance As disp_impact_incident)
    End Sub
  Partial Private Sub Insertthird_party_contact(instance As third_party_contact)
    End Sub
  Partial Private Sub Updatethird_party_contact(instance As third_party_contact)
    End Sub
  Partial Private Sub Deletethird_party_contact(instance As third_party_contact)
    End Sub
  Partial Private Sub Insertdisp_document_type(instance As disp_document_type)
    End Sub
  Partial Private Sub Updatedisp_document_type(instance As disp_document_type)
    End Sub
  Partial Private Sub Deletedisp_document_type(instance As disp_document_type)
    End Sub
  Partial Private Sub Insertdisp_geoscience(instance As disp_geoscience)
    End Sub
  Partial Private Sub Updatedisp_geoscience(instance As disp_geoscience)
    End Sub
  Partial Private Sub Deletedisp_geoscience(instance As disp_geoscience)
    End Sub
  Partial Private Sub Insertdisp_geoscience_service(instance As disp_geoscience_service)
    End Sub
  Partial Private Sub Updatedisp_geoscience_service(instance As disp_geoscience_service)
    End Sub
  Partial Private Sub Deletedisp_geoscience_service(instance As disp_geoscience_service)
    End Sub
  Partial Private Sub Insertgeoscience_prerequisite_gpi(instance As geoscience_prerequisite_gpi)
    End Sub
  Partial Private Sub Updategeoscience_prerequisite_gpi(instance As geoscience_prerequisite_gpi)
    End Sub
  Partial Private Sub Deletegeoscience_prerequisite_gpi(instance As geoscience_prerequisite_gpi)
    End Sub
  Partial Private Sub Insertgeoscience_gpi_requirement(instance As geoscience_gpi_requirement)
    End Sub
  Partial Private Sub Updategeoscience_gpi_requirement(instance As geoscience_gpi_requirement)
    End Sub
  Partial Private Sub Deletegeoscience_gpi_requirement(instance As geoscience_gpi_requirement)
    End Sub
  Partial Private Sub Insertgeoscience_gpi_competency(instance As geoscience_gpi_competency)
    End Sub
  Partial Private Sub Updategeoscience_gpi_competency(instance As geoscience_gpi_competency)
    End Sub
  Partial Private Sub Deletegeoscience_gpi_competency(instance As geoscience_gpi_competency)
    End Sub
  Partial Private Sub Insertasset_pm_point_calculation_config(instance As asset_pm_point_calculation_config)
    End Sub
  Partial Private Sub Updateasset_pm_point_calculation_config(instance As asset_pm_point_calculation_config)
    End Sub
  Partial Private Sub Deleteasset_pm_point_calculation_config(instance As asset_pm_point_calculation_config)
    End Sub
  Partial Private Sub Insertgeoscience_gpi(instance As geoscience_gpi)
    End Sub
  Partial Private Sub Updategeoscience_gpi(instance As geoscience_gpi)
    End Sub
  Partial Private Sub Deletegeoscience_gpi(instance As geoscience_gpi)
    End Sub
  Partial Private Sub Insertbonus_meal_territory_profit_center(instance As bonus_meal_territory_profit_center)
    End Sub
  Partial Private Sub Updatebonus_meal_territory_profit_center(instance As bonus_meal_territory_profit_center)
    End Sub
  Partial Private Sub Deletebonus_meal_territory_profit_center(instance As bonus_meal_territory_profit_center)
    End Sub
  Partial Private Sub Insertbonus_meal_territory(instance As bonus_meal_territory)
    End Sub
  Partial Private Sub Updatebonus_meal_territory(instance As bonus_meal_territory)
    End Sub
  Partial Private Sub Deletebonus_meal_territory(instance As bonus_meal_territory)
    End Sub
  Partial Private Sub Insertfield_job_bonus_max_percent(instance As field_job_bonus_max_percent)
    End Sub
  Partial Private Sub Updatefield_job_bonus_max_percent(instance As field_job_bonus_max_percent)
    End Sub
  Partial Private Sub Deletefield_job_bonus_max_percent(instance As field_job_bonus_max_percent)
    End Sub
  Partial Private Sub Insertgeoscience_discipline(instance As geoscience_discipline)
    End Sub
  Partial Private Sub Updategeoscience_discipline(instance As geoscience_discipline)
    End Sub
  Partial Private Sub Deletegeoscience_discipline(instance As geoscience_discipline)
    End Sub
  Partial Private Sub Insertlost_detail(instance As lost_detail)
    End Sub
  Partial Private Sub Updatelost_detail(instance As lost_detail)
    End Sub
  Partial Private Sub Deletelost_detail(instance As lost_detail)
    End Sub
  Partial Private Sub Insertasset_series_code_type(instance As asset_series_code_type)
    End Sub
  Partial Private Sub Updateasset_series_code_type(instance As asset_series_code_type)
    End Sub
  Partial Private Sub Deleteasset_series_code_type(instance As asset_series_code_type)
    End Sub
  Partial Private Sub Inserttruck_config(instance As truck_config)
    End Sub
  Partial Private Sub Updatetruck_config(instance As truck_config)
    End Sub
  Partial Private Sub Deletetruck_config(instance As truck_config)
    End Sub
  Partial Private Sub Inserttruck_config_ip(instance As truck_config_ip)
    End Sub
  Partial Private Sub Updatetruck_config_ip(instance As truck_config_ip)
    End Sub
  Partial Private Sub Deletetruck_config_ip(instance As truck_config_ip)
    End Sub
  Partial Private Sub Insertmeal_count_threshold(instance As meal_count_threshold)
    End Sub
  Partial Private Sub Updatemeal_count_threshold(instance As meal_count_threshold)
    End Sub
  Partial Private Sub Deletemeal_count_threshold(instance As meal_count_threshold)
    End Sub
  Partial Private Sub Inserttruck_config_asset(instance As truck_config_asset)
    End Sub
  Partial Private Sub Updatetruck_config_asset(instance As truck_config_asset)
    End Sub
  Partial Private Sub Deletetruck_config_asset(instance As truck_config_asset)
    End Sub
  Partial Private Sub Insertasset_subassembly(instance As asset_subassembly)
    End Sub
  Partial Private Sub Updateasset_subassembly(instance As asset_subassembly)
    End Sub
  Partial Private Sub Deleteasset_subassembly(instance As asset_subassembly)
    End Sub
  Partial Private Sub Insertasset_subassembly_history(instance As asset_subassembly_history)
    End Sub
  Partial Private Sub Updateasset_subassembly_history(instance As asset_subassembly_history)
    End Sub
  Partial Private Sub Deleteasset_subassembly_history(instance As asset_subassembly_history)
    End Sub
  Partial Private Sub Insertasset_id_selection(instance As asset_id_selection)
    End Sub
  Partial Private Sub Updateasset_id_selection(instance As asset_id_selection)
    End Sub
  Partial Private Sub Deleteasset_id_selection(instance As asset_id_selection)
    End Sub
  Partial Private Sub Insertremote_service_email(instance As remote_service_email)
    End Sub
  Partial Private Sub Updateremote_service_email(instance As remote_service_email)
    End Sub
  Partial Private Sub Deleteremote_service_email(instance As remote_service_email)
    End Sub
  Partial Private Sub Insertrun_parameter(instance As run_parameter)
    End Sub
  Partial Private Sub Updaterun_parameter(instance As run_parameter)
    End Sub
  Partial Private Sub Deleterun_parameter(instance As run_parameter)
    End Sub
  Partial Private Sub Inserttool_run_param_item(instance As tool_run_param_item)
    End Sub
  Partial Private Sub Updatetool_run_param_item(instance As tool_run_param_item)
    End Sub
  Partial Private Sub Deletetool_run_param_item(instance As tool_run_param_item)
    End Sub
  Partial Private Sub Insertdisp_run_parameter(instance As disp_run_parameter)
    End Sub
  Partial Private Sub Updatedisp_run_parameter(instance As disp_run_parameter)
    End Sub
  Partial Private Sub Deletedisp_run_parameter(instance As disp_run_parameter)
    End Sub
  Partial Private Sub Insertdisp_run_parameter_item(instance As disp_run_parameter_item)
    End Sub
  Partial Private Sub Updatedisp_run_parameter_item(instance As disp_run_parameter_item)
    End Sub
  Partial Private Sub Deletedisp_run_parameter_item(instance As disp_run_parameter_item)
    End Sub
  Partial Private Sub Insertfimp_rec(instance As fimp_rec)
    End Sub
  Partial Private Sub Updatefimp_rec(instance As fimp_rec)
    End Sub
  Partial Private Sub Deletefimp_rec(instance As fimp_rec)
    End Sub
  Partial Private Sub Insertfimp_root_cause_analysis(instance As fimp_root_cause_analysis)
    End Sub
  Partial Private Sub Updatefimp_root_cause_analysis(instance As fimp_root_cause_analysis)
    End Sub
  Partial Private Sub Deletefimp_root_cause_analysis(instance As fimp_root_cause_analysis)
    End Sub
  Partial Private Sub Insertfimp_corrective_action(instance As fimp_corrective_action)
    End Sub
  Partial Private Sub Updatefimp_corrective_action(instance As fimp_corrective_action)
    End Sub
  Partial Private Sub Deletefimp_corrective_action(instance As fimp_corrective_action)
    End Sub
  Partial Private Sub Insertfimp_communication(instance As fimp_communication)
    End Sub
  Partial Private Sub Updatefimp_communication(instance As fimp_communication)
    End Sub
  Partial Private Sub Deletefimp_communication(instance As fimp_communication)
    End Sub
  Partial Private Sub Insertfimp_communication_log(instance As fimp_communication_log)
    End Sub
  Partial Private Sub Updatefimp_communication_log(instance As fimp_communication_log)
    End Sub
  Partial Private Sub Deletefimp_communication_log(instance As fimp_communication_log)
    End Sub
  Partial Private Sub Insertdisp_completions_activity_log(instance As disp_completions_activity_log)
    End Sub
  Partial Private Sub Updatedisp_completions_activity_log(instance As disp_completions_activity_log)
    End Sub
  Partial Private Sub Deletedisp_completions_activity_log(instance As disp_completions_activity_log)
    End Sub
  Partial Private Sub Insertdisp_equipment(instance As disp_equipment)
    End Sub
  Partial Private Sub Updatedisp_equipment(instance As disp_equipment)
    End Sub
  Partial Private Sub Deletedisp_equipment(instance As disp_equipment)
    End Sub
  Partial Private Sub Insertdisp_equipment_selection(instance As disp_equipment_selection)
    End Sub
  Partial Private Sub Updatedisp_equipment_selection(instance As disp_equipment_selection)
    End Sub
  Partial Private Sub Deletedisp_equipment_selection(instance As disp_equipment_selection)
    End Sub
  Partial Private Sub Insertfimp_doc(instance As fimp_doc)
    End Sub
  Partial Private Sub Updatefimp_doc(instance As fimp_doc)
    End Sub
  Partial Private Sub Deletefimp_doc(instance As fimp_doc)
    End Sub
  Partial Private Sub Insertfimp_case_worker(instance As fimp_case_worker)
    End Sub
  Partial Private Sub Updatefimp_case_worker(instance As fimp_case_worker)
    End Sub
  Partial Private Sub Deletefimp_case_worker(instance As fimp_case_worker)
    End Sub
  Partial Private Sub Insertnotification_config(instance As notification_config)
    End Sub
  Partial Private Sub Updatenotification_config(instance As notification_config)
    End Sub
  Partial Private Sub Deletenotification_config(instance As notification_config)
    End Sub
  Partial Private Sub Insertprocedure_doc(instance As procedure_doc)
    End Sub
  Partial Private Sub Updateprocedure_doc(instance As procedure_doc)
    End Sub
  Partial Private Sub Deleteprocedure_doc(instance As procedure_doc)
    End Sub
  Partial Private Sub Insertperf_parameter(instance As perf_parameter)
    End Sub
  Partial Private Sub Updateperf_parameter(instance As perf_parameter)
    End Sub
  Partial Private Sub Deleteperf_parameter(instance As perf_parameter)
    End Sub
  Partial Private Sub Insertperf_parameter_type(instance As perf_parameter_type)
    End Sub
  Partial Private Sub Updateperf_parameter_type(instance As perf_parameter_type)
    End Sub
  Partial Private Sub Deleteperf_parameter_type(instance As perf_parameter_type)
    End Sub
  Partial Private Sub Insertdisp_perf_response(instance As disp_perf_response)
    End Sub
  Partial Private Sub Updatedisp_perf_response(instance As disp_perf_response)
    End Sub
  Partial Private Sub Deletedisp_perf_response(instance As disp_perf_response)
    End Sub
  Partial Private Sub Insertdisp_equipment_utilization(instance As disp_equipment_utilization)
    End Sub
  Partial Private Sub Updatedisp_equipment_utilization(instance As disp_equipment_utilization)
    End Sub
  Partial Private Sub Deletedisp_equipment_utilization(instance As disp_equipment_utilization)
    End Sub
  Partial Private Sub Insertdisp_assembly_instruction(instance As disp_assembly_instruction)
    End Sub
  Partial Private Sub Updatedisp_assembly_instruction(instance As disp_assembly_instruction)
    End Sub
  Partial Private Sub Deletedisp_assembly_instruction(instance As disp_assembly_instruction)
    End Sub
  Partial Private Sub Insertfimp_contributing_factor(instance As fimp_contributing_factor)
    End Sub
  Partial Private Sub Updatefimp_contributing_factor(instance As fimp_contributing_factor)
    End Sub
  Partial Private Sub Deletefimp_contributing_factor(instance As fimp_contributing_factor)
    End Sub
  Partial Private Sub Insertdisp_pump_down_rate(instance As disp_pump_down_rate)
    End Sub
  Partial Private Sub Updatedisp_pump_down_rate(instance As disp_pump_down_rate)
    End Sub
  Partial Private Sub Deletedisp_pump_down_rate(instance As disp_pump_down_rate)
    End Sub
  Partial Private Sub Insertdisp_accounting(instance As disp_accounting)
    End Sub
  Partial Private Sub Updatedisp_accounting(instance As disp_accounting)
    End Sub
  Partial Private Sub Deletedisp_accounting(instance As disp_accounting)
    End Sub
  Partial Private Sub Insertdisp_environment(instance As disp_environment)
    End Sub
  Partial Private Sub Updatedisp_environment(instance As disp_environment)
    End Sub
  Partial Private Sub Deletedisp_environment(instance As disp_environment)
    End Sub
  Partial Private Sub Insertdisp_well_data(instance As disp_well_data)
    End Sub
  Partial Private Sub Updatedisp_well_data(instance As disp_well_data)
    End Sub
  Partial Private Sub Deletedisp_well_data(instance As disp_well_data)
    End Sub
  Partial Private Sub Insertdisp_fluid(instance As disp_fluid)
    End Sub
  Partial Private Sub Updatedisp_fluid(instance As disp_fluid)
    End Sub
  Partial Private Sub Deletedisp_fluid(instance As disp_fluid)
    End Sub
  Partial Private Sub Insertdisp_time_management(instance As disp_time_management)
    End Sub
  Partial Private Sub Updatedisp_time_management(instance As disp_time_management)
    End Sub
  Partial Private Sub Deletedisp_time_management(instance As disp_time_management)
    End Sub
  Partial Private Sub Insertdisp_unit(instance As disp_unit)
    End Sub
  Partial Private Sub Updatedisp_unit(instance As disp_unit)
    End Sub
  Partial Private Sub Deletedisp_unit(instance As disp_unit)
    End Sub
  Partial Private Sub Insertdisp_perf(instance As disp_perf)
    End Sub
  Partial Private Sub Updatedisp_perf(instance As disp_perf)
    End Sub
  Partial Private Sub Deletedisp_perf(instance As disp_perf)
    End Sub
  Partial Private Sub Insertdisp_config_section(instance As disp_config_section)
    End Sub
  Partial Private Sub Updatedisp_config_section(instance As disp_config_section)
    End Sub
  Partial Private Sub Deletedisp_config_section(instance As disp_config_section)
    End Sub
  Partial Private Sub Insertdisp_tree_data(instance As disp_tree_data)
    End Sub
  Partial Private Sub Updatedisp_tree_data(instance As disp_tree_data)
    End Sub
  Partial Private Sub Deletedisp_tree_data(instance As disp_tree_data)
    End Sub
  Partial Private Sub Insertfso_export_material_override(instance As fso_export_material_override)
    End Sub
  Partial Private Sub Updatefso_export_material_override(instance As fso_export_material_override)
    End Sub
  Partial Private Sub Deletefso_export_material_override(instance As fso_export_material_override)
    End Sub
  Partial Private Sub Insertdoc_rec(instance As doc_rec)
    End Sub
  Partial Private Sub Updatedoc_rec(instance As doc_rec)
    End Sub
  Partial Private Sub Deletedoc_rec(instance As doc_rec)
    End Sub
  Partial Private Sub Insertkpi_config(instance As kpi_config)
    End Sub
  Partial Private Sub Updatekpi_config(instance As kpi_config)
    End Sub
  Partial Private Sub Deletekpi_config(instance As kpi_config)
    End Sub
  Partial Private Sub Insertgpi(instance As gpi)
    End Sub
  Partial Private Sub Updategpi(instance As gpi)
    End Sub
  Partial Private Sub Deletegpi(instance As gpi)
    End Sub
  Partial Private Sub Insertcontract_detail(instance As contract_detail)
    End Sub
  Partial Private Sub Updatecontract_detail(instance As contract_detail)
    End Sub
  Partial Private Sub Deletecontract_detail(instance As contract_detail)
    End Sub
  Partial Private Sub Insertuser_access(instance As user_access)
    End Sub
  Partial Private Sub Updateuser_access(instance As user_access)
    End Sub
  Partial Private Sub Deleteuser_access(instance As user_access)
    End Sub
  Partial Private Sub Insertdisp_ops_dashboard(instance As disp_ops_dashboard)
    End Sub
  Partial Private Sub Updatedisp_ops_dashboard(instance As disp_ops_dashboard)
    End Sub
  Partial Private Sub Deletedisp_ops_dashboard(instance As disp_ops_dashboard)
    End Sub
  Partial Private Sub Insertdisp_equipment_header(instance As disp_equipment_header)
    End Sub
  Partial Private Sub Updatedisp_equipment_header(instance As disp_equipment_header)
    End Sub
  Partial Private Sub Deletedisp_equipment_header(instance As disp_equipment_header)
    End Sub
  Partial Private Sub Insertrevenue_forecast_qmi(instance As revenue_forecast_qmi)
    End Sub
  Partial Private Sub Updaterevenue_forecast_qmi(instance As revenue_forecast_qmi)
    End Sub
  Partial Private Sub Deleterevenue_forecast_qmi(instance As revenue_forecast_qmi)
    End Sub
  Partial Private Sub Insertrevenue_forecast(instance As revenue_forecast)
    End Sub
  Partial Private Sub Updaterevenue_forecast(instance As revenue_forecast)
    End Sub
  Partial Private Sub Deleterevenue_forecast(instance As revenue_forecast)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New("Data Source=ctapsvr17\dev2016;Initial Catalog=VDIS_BHI_beta;Integrated Security=T"& _ 
				"rue", mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property districts() As System.Data.Linq.Table(Of district)
		Get
			Return Me.GetTable(Of district)
		End Get
	End Property
	
	Public ReadOnly Property truck_selections() As System.Data.Linq.Table(Of truck_selection)
		Get
			Return Me.GetTable(Of truck_selection)
		End Get
	End Property
	
	Public ReadOnly Property disps() As System.Data.Linq.Table(Of disp)
		Get
			Return Me.GetTable(Of disp)
		End Get
	End Property
	
	Public ReadOnly Property disp_contacts() As System.Data.Linq.Table(Of disp_contact)
		Get
			Return Me.GetTable(Of disp_contact)
		End Get
	End Property
	
	Public ReadOnly Property disp_personnels() As System.Data.Linq.Table(Of disp_personnel)
		Get
			Return Me.GetTable(Of disp_personnel)
		End Get
	End Property
	
	Public ReadOnly Property disp_services_requesteds() As System.Data.Linq.Table(Of disp_services_requested)
		Get
			Return Me.GetTable(Of disp_services_requested)
		End Get
	End Property
	
	Public ReadOnly Property disp_field_tests() As System.Data.Linq.Table(Of disp_field_test)
		Get
			Return Me.GetTable(Of disp_field_test)
		End Get
	End Property
	
	Public ReadOnly Property disp_intervals() As System.Data.Linq.Table(Of disp_interval)
		Get
			Return Me.GetTable(Of disp_interval)
		End Get
	End Property
	
	Public ReadOnly Property disp_tubulars() As System.Data.Linq.Table(Of disp_tubular)
		Get
			Return Me.GetTable(Of disp_tubular)
		End Get
	End Property
	
	Public ReadOnly Property disp_runs() As System.Data.Linq.Table(Of disp_run)
		Get
			Return Me.GetTable(Of disp_run)
		End Get
	End Property
	
	Public ReadOnly Property disp_assets() As System.Data.Linq.Table(Of disp_asset)
		Get
			Return Me.GetTable(Of disp_asset)
		End Get
	End Property
	
	Public ReadOnly Property asset_crew_inuses() As System.Data.Linq.Table(Of asset_crew_inuse)
		Get
			Return Me.GetTable(Of asset_crew_inuse)
		End Get
	End Property
	
	Public ReadOnly Property v_dispatch_find_list_results() As System.Data.Linq.Table(Of v_dispatch_find_list_result)
		Get
			Return Me.GetTable(Of v_dispatch_find_list_result)
		End Get
	End Property
	
	Public ReadOnly Property v_quote_find_list_results() As System.Data.Linq.Table(Of v_quote_find_list_result)
		Get
			Return Me.GetTable(Of v_quote_find_list_result)
		End Get
	End Property
	
	Public ReadOnly Property disp_docs() As System.Data.Linq.Table(Of disp_doc)
		Get
			Return Me.GetTable(Of disp_doc)
		End Get
	End Property
	
	Public ReadOnly Property v_hist_disp_pjbs() As System.Data.Linq.Table(Of v_hist_disp_pjb)
		Get
			Return Me.GetTable(Of v_hist_disp_pjb)
		End Get
	End Property
	
	Public ReadOnly Property disp_pjbs() As System.Data.Linq.Table(Of disp_pjb)
		Get
			Return Me.GetTable(Of disp_pjb)
		End Get
	End Property
	
	Public ReadOnly Property disp_pjb_responses() As System.Data.Linq.Table(Of disp_pjb_response)
		Get
			Return Me.GetTable(Of disp_pjb_response)
		End Get
	End Property
	
	Public ReadOnly Property disp_lqas() As System.Data.Linq.Table(Of disp_lqa)
		Get
			Return Me.GetTable(Of disp_lqa)
		End Get
	End Property
	
	Public ReadOnly Property disp_lqa_items() As System.Data.Linq.Table(Of disp_lqa_item)
		Get
			Return Me.GetTable(Of disp_lqa_item)
		End Get
	End Property
	
	Public ReadOnly Property disp_fsos() As System.Data.Linq.Table(Of disp_fso)
		Get
			Return Me.GetTable(Of disp_fso)
		End Get
	End Property
	
	Public ReadOnly Property disp_fso_items() As System.Data.Linq.Table(Of disp_fso_item)
		Get
			Return Me.GetTable(Of disp_fso_item)
		End Get
	End Property
	
	Public ReadOnly Property quote_footnote_items() As System.Data.Linq.Table(Of quote_footnote_item)
		Get
			Return Me.GetTable(Of quote_footnote_item)
		End Get
	End Property
	
	Public ReadOnly Property quote_linked_to_fso_items() As System.Data.Linq.Table(Of quote_linked_to_fso_item)
		Get
			Return Me.GetTable(Of quote_linked_to_fso_item)
		End Get
	End Property
	
	Public ReadOnly Property fso_multi_select_items() As System.Data.Linq.Table(Of fso_multi_select_item)
		Get
			Return Me.GetTable(Of fso_multi_select_item)
		End Get
	End Property
	
	Public ReadOnly Property dispatch_summaries() As System.Data.Linq.Table(Of dispatch_summary)
		Get
			Return Me.GetTable(Of dispatch_summary)
		End Get
	End Property
	
	Public ReadOnly Property disp_asset_order_items() As System.Data.Linq.Table(Of disp_asset_order_item)
		Get
			Return Me.GetTable(Of disp_asset_order_item)
		End Get
	End Property
	
	Public ReadOnly Property asset_order_materials() As System.Data.Linq.Table(Of asset_order_material)
		Get
			Return Me.GetTable(Of asset_order_material)
		End Get
	End Property
	
	Public ReadOnly Property disp_asset_orders() As System.Data.Linq.Table(Of disp_asset_order)
		Get
			Return Me.GetTable(Of disp_asset_order)
		End Get
	End Property
	
	Public ReadOnly Property asset_order_template_items() As System.Data.Linq.Table(Of asset_order_template_item)
		Get
			Return Me.GetTable(Of asset_order_template_item)
		End Get
	End Property
	
	Public ReadOnly Property asset_order_templates() As System.Data.Linq.Table(Of asset_order_template)
		Get
			Return Me.GetTable(Of asset_order_template)
		End Get
	End Property
	
	Public ReadOnly Property quote_summary_report_items() As System.Data.Linq.Table(Of quote_summary_report_item)
		Get
			Return Me.GetTable(Of quote_summary_report_item)
		End Get
	End Property
	
	Public ReadOnly Property disp_standby_items() As System.Data.Linq.Table(Of disp_standby_item)
		Get
			Return Me.GetTable(Of disp_standby_item)
		End Get
	End Property
	
	Public ReadOnly Property disp_rcors() As System.Data.Linq.Table(Of disp_rcor)
		Get
			Return Me.GetTable(Of disp_rcor)
		End Get
	End Property
	
	Public ReadOnly Property disp_rcor_attempts() As System.Data.Linq.Table(Of disp_rcor_attempt)
		Get
			Return Me.GetTable(Of disp_rcor_attempt)
		End Get
	End Property
	
	Public ReadOnly Property disp_asset_order_asset_selections() As System.Data.Linq.Table(Of disp_asset_order_asset_selection)
		Get
			Return Me.GetTable(Of disp_asset_order_asset_selection)
		End Get
	End Property
	
	Public ReadOnly Property v_asset_forecasts() As System.Data.Linq.Table(Of v_asset_forecast)
		Get
			Return Me.GetTable(Of v_asset_forecast)
		End Get
	End Property
	
	Public ReadOnly Property asset_forecast_summaries() As System.Data.Linq.Table(Of asset_forecast_summary)
		Get
			Return Me.GetTable(Of asset_forecast_summary)
		End Get
	End Property
	
	Public ReadOnly Property app_users() As System.Data.Linq.Table(Of app_user)
		Get
			Return Me.GetTable(Of app_user)
		End Get
	End Property
	
	Public ReadOnly Property map_base_icons() As System.Data.Linq.Table(Of map_base_icon)
		Get
			Return Me.GetTable(Of map_base_icon)
		End Get
	End Property
	
	Public ReadOnly Property disp_asset_utilizations() As System.Data.Linq.Table(Of disp_asset_utilization)
		Get
			Return Me.GetTable(Of disp_asset_utilization)
		End Get
	End Property
	
	Public ReadOnly Property impact_incidents() As System.Data.Linq.Table(Of impact_incident)
		Get
			Return Me.GetTable(Of impact_incident)
		End Get
	End Property
	
	Public ReadOnly Property disp_impact_incidents() As System.Data.Linq.Table(Of disp_impact_incident)
		Get
			Return Me.GetTable(Of disp_impact_incident)
		End Get
	End Property
	
	Public ReadOnly Property third_party_contacts() As System.Data.Linq.Table(Of third_party_contact)
		Get
			Return Me.GetTable(Of third_party_contact)
		End Get
	End Property
	
	Public ReadOnly Property disp_document_types() As System.Data.Linq.Table(Of disp_document_type)
		Get
			Return Me.GetTable(Of disp_document_type)
		End Get
	End Property
	
	Public ReadOnly Property disp_geosciences() As System.Data.Linq.Table(Of disp_geoscience)
		Get
			Return Me.GetTable(Of disp_geoscience)
		End Get
	End Property
	
	Public ReadOnly Property disp_geoscience_services() As System.Data.Linq.Table(Of disp_geoscience_service)
		Get
			Return Me.GetTable(Of disp_geoscience_service)
		End Get
	End Property
	
	Public ReadOnly Property geoscience_prerequisite_gpis() As System.Data.Linq.Table(Of geoscience_prerequisite_gpi)
		Get
			Return Me.GetTable(Of geoscience_prerequisite_gpi)
		End Get
	End Property
	
	Public ReadOnly Property geoscience_gpi_requirements() As System.Data.Linq.Table(Of geoscience_gpi_requirement)
		Get
			Return Me.GetTable(Of geoscience_gpi_requirement)
		End Get
	End Property
	
	Public ReadOnly Property geoscience_gpi_competencies() As System.Data.Linq.Table(Of geoscience_gpi_competency)
		Get
			Return Me.GetTable(Of geoscience_gpi_competency)
		End Get
	End Property
	
	Public ReadOnly Property asset_pm_point_calculation_configs() As System.Data.Linq.Table(Of asset_pm_point_calculation_config)
		Get
			Return Me.GetTable(Of asset_pm_point_calculation_config)
		End Get
	End Property
	
	Public ReadOnly Property v_hist_asset_pm_point_calculation_configs() As System.Data.Linq.Table(Of v_hist_asset_pm_point_calculation_config)
		Get
			Return Me.GetTable(Of v_hist_asset_pm_point_calculation_config)
		End Get
	End Property
	
	Public ReadOnly Property geoscience_gpis() As System.Data.Linq.Table(Of geoscience_gpi)
		Get
			Return Me.GetTable(Of geoscience_gpi)
		End Get
	End Property
	
	Public ReadOnly Property bonus_meal_territory_profit_centers() As System.Data.Linq.Table(Of bonus_meal_territory_profit_center)
		Get
			Return Me.GetTable(Of bonus_meal_territory_profit_center)
		End Get
	End Property
	
	Public ReadOnly Property bonus_meal_territories() As System.Data.Linq.Table(Of bonus_meal_territory)
		Get
			Return Me.GetTable(Of bonus_meal_territory)
		End Get
	End Property
	
	Public ReadOnly Property field_job_bonus_max_percents() As System.Data.Linq.Table(Of field_job_bonus_max_percent)
		Get
			Return Me.GetTable(Of field_job_bonus_max_percent)
		End Get
	End Property
	
	Public ReadOnly Property geoscience_disciplines() As System.Data.Linq.Table(Of geoscience_discipline)
		Get
			Return Me.GetTable(Of geoscience_discipline)
		End Get
	End Property
	
	Public ReadOnly Property lost_details() As System.Data.Linq.Table(Of lost_detail)
		Get
			Return Me.GetTable(Of lost_detail)
		End Get
	End Property
	
	Public ReadOnly Property asset_series_code_types() As System.Data.Linq.Table(Of asset_series_code_type)
		Get
			Return Me.GetTable(Of asset_series_code_type)
		End Get
	End Property
	
	Public ReadOnly Property truck_configs() As System.Data.Linq.Table(Of truck_config)
		Get
			Return Me.GetTable(Of truck_config)
		End Get
	End Property
	
	Public ReadOnly Property truck_config_ips() As System.Data.Linq.Table(Of truck_config_ip)
		Get
			Return Me.GetTable(Of truck_config_ip)
		End Get
	End Property
	
	Public ReadOnly Property meal_count_thresholds() As System.Data.Linq.Table(Of meal_count_threshold)
		Get
			Return Me.GetTable(Of meal_count_threshold)
		End Get
	End Property
	
	Public ReadOnly Property truck_config_assets() As System.Data.Linq.Table(Of truck_config_asset)
		Get
			Return Me.GetTable(Of truck_config_asset)
		End Get
	End Property
	
	Public ReadOnly Property asset_subassemblies() As System.Data.Linq.Table(Of asset_subassembly)
		Get
			Return Me.GetTable(Of asset_subassembly)
		End Get
	End Property
	
	Public ReadOnly Property asset_subassembly_histories() As System.Data.Linq.Table(Of asset_subassembly_history)
		Get
			Return Me.GetTable(Of asset_subassembly_history)
		End Get
	End Property
	
	Public ReadOnly Property asset_id_selections() As System.Data.Linq.Table(Of asset_id_selection)
		Get
			Return Me.GetTable(Of asset_id_selection)
		End Get
	End Property
	
	Public ReadOnly Property remote_service_emails() As System.Data.Linq.Table(Of remote_service_email)
		Get
			Return Me.GetTable(Of remote_service_email)
		End Get
	End Property
	
	Public ReadOnly Property run_parameters() As System.Data.Linq.Table(Of run_parameter)
		Get
			Return Me.GetTable(Of run_parameter)
		End Get
	End Property
	
	Public ReadOnly Property tool_run_param_items() As System.Data.Linq.Table(Of tool_run_param_item)
		Get
			Return Me.GetTable(Of tool_run_param_item)
		End Get
	End Property
	
	Public ReadOnly Property disp_run_parameters() As System.Data.Linq.Table(Of disp_run_parameter)
		Get
			Return Me.GetTable(Of disp_run_parameter)
		End Get
	End Property
	
	Public ReadOnly Property disp_run_parameter_items() As System.Data.Linq.Table(Of disp_run_parameter_item)
		Get
			Return Me.GetTable(Of disp_run_parameter_item)
		End Get
	End Property
	
	Public ReadOnly Property fimp_recs() As System.Data.Linq.Table(Of fimp_rec)
		Get
			Return Me.GetTable(Of fimp_rec)
		End Get
	End Property
	
	Public ReadOnly Property fimp_root_cause_analysis() As System.Data.Linq.Table(Of fimp_root_cause_analysis)
		Get
			Return Me.GetTable(Of fimp_root_cause_analysis)
		End Get
	End Property
	
	Public ReadOnly Property fimp_corrective_actions() As System.Data.Linq.Table(Of fimp_corrective_action)
		Get
			Return Me.GetTable(Of fimp_corrective_action)
		End Get
	End Property
	
	Public ReadOnly Property fimp_communications() As System.Data.Linq.Table(Of fimp_communication)
		Get
			Return Me.GetTable(Of fimp_communication)
		End Get
	End Property
	
	Public ReadOnly Property fimp_communication_logs() As System.Data.Linq.Table(Of fimp_communication_log)
		Get
			Return Me.GetTable(Of fimp_communication_log)
		End Get
	End Property
	
	Public ReadOnly Property disp_completions_activity_logs() As System.Data.Linq.Table(Of disp_completions_activity_log)
		Get
			Return Me.GetTable(Of disp_completions_activity_log)
		End Get
	End Property
	
	Public ReadOnly Property disp_equipments() As System.Data.Linq.Table(Of disp_equipment)
		Get
			Return Me.GetTable(Of disp_equipment)
		End Get
	End Property
	
	Public ReadOnly Property disp_equipment_selections() As System.Data.Linq.Table(Of disp_equipment_selection)
		Get
			Return Me.GetTable(Of disp_equipment_selection)
		End Get
	End Property
	
	Public ReadOnly Property fimp_docs() As System.Data.Linq.Table(Of fimp_doc)
		Get
			Return Me.GetTable(Of fimp_doc)
		End Get
	End Property
	
	Public ReadOnly Property fimp_case_workers() As System.Data.Linq.Table(Of fimp_case_worker)
		Get
			Return Me.GetTable(Of fimp_case_worker)
		End Get
	End Property
	
	Public ReadOnly Property v_rig_trackers() As System.Data.Linq.Table(Of v_rig_tracker)
		Get
			Return Me.GetTable(Of v_rig_tracker)
		End Get
	End Property
	
	Public ReadOnly Property notification_configs() As System.Data.Linq.Table(Of notification_config)
		Get
			Return Me.GetTable(Of notification_config)
		End Get
	End Property
	
	Public ReadOnly Property procedure_docs() As System.Data.Linq.Table(Of procedure_doc)
		Get
			Return Me.GetTable(Of procedure_doc)
		End Get
	End Property
	
	Public ReadOnly Property perf_parameters() As System.Data.Linq.Table(Of perf_parameter)
		Get
			Return Me.GetTable(Of perf_parameter)
		End Get
	End Property
	
	Public ReadOnly Property perf_parameter_types() As System.Data.Linq.Table(Of perf_parameter_type)
		Get
			Return Me.GetTable(Of perf_parameter_type)
		End Get
	End Property
	
	Public ReadOnly Property disp_perf_responses() As System.Data.Linq.Table(Of disp_perf_response)
		Get
			Return Me.GetTable(Of disp_perf_response)
		End Get
	End Property
	
	Public ReadOnly Property disp_equipment_utilizations() As System.Data.Linq.Table(Of disp_equipment_utilization)
		Get
			Return Me.GetTable(Of disp_equipment_utilization)
		End Get
	End Property
	
	Public ReadOnly Property disp_assembly_instructions() As System.Data.Linq.Table(Of disp_assembly_instruction)
		Get
			Return Me.GetTable(Of disp_assembly_instruction)
		End Get
	End Property
	
	Public ReadOnly Property fimp_contributing_factors() As System.Data.Linq.Table(Of fimp_contributing_factor)
		Get
			Return Me.GetTable(Of fimp_contributing_factor)
		End Get
	End Property
	
	Public ReadOnly Property disp_pump_down_rates() As System.Data.Linq.Table(Of disp_pump_down_rate)
		Get
			Return Me.GetTable(Of disp_pump_down_rate)
		End Get
	End Property
	
	Public ReadOnly Property disp_accountings() As System.Data.Linq.Table(Of disp_accounting)
		Get
			Return Me.GetTable(Of disp_accounting)
		End Get
	End Property
	
	Public ReadOnly Property disp_environments() As System.Data.Linq.Table(Of disp_environment)
		Get
			Return Me.GetTable(Of disp_environment)
		End Get
	End Property
	
	Public ReadOnly Property disp_well_datas() As System.Data.Linq.Table(Of disp_well_data)
		Get
			Return Me.GetTable(Of disp_well_data)
		End Get
	End Property
	
	Public ReadOnly Property disp_fluids() As System.Data.Linq.Table(Of disp_fluid)
		Get
			Return Me.GetTable(Of disp_fluid)
		End Get
	End Property
	
	Public ReadOnly Property disp_time_managements() As System.Data.Linq.Table(Of disp_time_management)
		Get
			Return Me.GetTable(Of disp_time_management)
		End Get
	End Property
	
	Public ReadOnly Property disp_unit() As System.Data.Linq.Table(Of disp_unit)
		Get
			Return Me.GetTable(Of disp_unit)
		End Get
	End Property
	
	Public ReadOnly Property disp_perfs() As System.Data.Linq.Table(Of disp_perf)
		Get
			Return Me.GetTable(Of disp_perf)
		End Get
	End Property
	
	Public ReadOnly Property disp_config_sections() As System.Data.Linq.Table(Of disp_config_section)
		Get
			Return Me.GetTable(Of disp_config_section)
		End Get
	End Property
	
	Public ReadOnly Property disp_tree_datas() As System.Data.Linq.Table(Of disp_tree_data)
		Get
			Return Me.GetTable(Of disp_tree_data)
		End Get
	End Property
	
	Public ReadOnly Property fso_export_material_overrides() As System.Data.Linq.Table(Of fso_export_material_override)
		Get
			Return Me.GetTable(Of fso_export_material_override)
		End Get
	End Property
	
	Public ReadOnly Property doc_recs() As System.Data.Linq.Table(Of doc_rec)
		Get
			Return Me.GetTable(Of doc_rec)
		End Get
	End Property
	
	Public ReadOnly Property kpi_configs() As System.Data.Linq.Table(Of kpi_config)
		Get
			Return Me.GetTable(Of kpi_config)
		End Get
	End Property
	
	Public ReadOnly Property gpis() As System.Data.Linq.Table(Of gpi)
		Get
			Return Me.GetTable(Of gpi)
		End Get
	End Property
	
	Public ReadOnly Property contract_details() As System.Data.Linq.Table(Of contract_detail)
		Get
			Return Me.GetTable(Of contract_detail)
		End Get
	End Property
	
	Public ReadOnly Property user_accesses() As System.Data.Linq.Table(Of user_access)
		Get
			Return Me.GetTable(Of user_access)
		End Get
	End Property
	
	Public ReadOnly Property v_employee_forecasts() As System.Data.Linq.Table(Of v_employee_forecast)
		Get
			Return Me.GetTable(Of v_employee_forecast)
		End Get
	End Property
	
	Public ReadOnly Property disp_ops_dashboards() As System.Data.Linq.Table(Of disp_ops_dashboard)
		Get
			Return Me.GetTable(Of disp_ops_dashboard)
		End Get
	End Property
	
	Public ReadOnly Property disp_equipment_headers() As System.Data.Linq.Table(Of disp_equipment_header)
		Get
			Return Me.GetTable(Of disp_equipment_header)
		End Get
	End Property
	
	Public ReadOnly Property revenue_forecast_qmis() As System.Data.Linq.Table(Of revenue_forecast_qmi)
		Get
			Return Me.GetTable(Of revenue_forecast_qmi)
		End Get
	End Property
	
	Public ReadOnly Property revenue_forecasts() As System.Data.Linq.Table(Of revenue_forecast)
		Get
			Return Me.GetTable(Of revenue_forecast)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetList")>  _
	Public Function GetList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(20)")> ByVal list_id As String) As ISingleResult(Of GetListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), list_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetStatusList")>  _
	Public Function GetStatusList() As ISingleResult(Of GetStatusListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetStatusListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEnvironmentList")>  _
	Public Function GetEnvironmentList() As ISingleResult(Of GetEnvironmentListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetEnvironmentListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetContactTypeList")>  _
	Public Function GetContactTypeList() As ISingleResult(Of GetContactTypeListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetContactTypeListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAvailList")>  _
	Public Function GetAvailList() As ISingleResult(Of GetAvailListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAvailListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PSUnitInUse")>  _
	Public Function PSUnitInUse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal unit_id As String) As ISingleResult(Of asset_crew_inuse)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, unit_id)
		Return CType(result.ReturnValue,ISingleResult(Of asset_crew_inuse))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRunFailCodes")>  _
	Public Function GetRunFailCodes() As ISingleResult(Of GetRunFailCodesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetRunFailCodesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetJsaList")>  _
	Public Function GetJsaList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String) As ISingleResult(Of GetJsaListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl)
		Return CType(result.ReturnValue,ISingleResult(Of GetJsaListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PSTruckCancel")>  _
	Public Function PSTruckCancel(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(50)")> ByVal truck As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck, disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckFsoQuoteNumberExists")>  _
	Public Function CheckFsoQuoteNumberExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal quote_number As String) As ISingleResult(Of CheckFsoQuoteNumberExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), quote_number)
		Return CType(result.ReturnValue,ISingleResult(Of CheckFsoQuoteNumberExistsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetGroupIds")>  _
	Public Function GetAssetGroupIds(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal current_plant_id As String) As ISingleResult(Of GetAssetGroupIdsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), current_plant_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetGroupIdsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePSDispAccountingServiceOrder")>  _
	Public Function DeletePSDispAccountingServiceOrder(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Original_rec_id", DbType:="Int")> ByVal original_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of DeletePSDispAccountingServiceOrderResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of DeletePSDispAccountingServiceOrderResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertPSDispAccountingServiceOrder")>  _
	Public Function InsertPSDispAccountingServiceOrder(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal field_ticket_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal field_ticket_received_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal field_ticket_type_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal accounting_notes As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal revenue_discrepancy_explanation As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal operations_mode As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal sap_sales_order_number As String) As ISingleResult(Of InsertPSDispAccountingServiceOrderResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, field_ticket_number, field_ticket_received_date, field_ticket_type_id, accounting_notes, revenue_discrepancy_explanation, oilcomp_id, operations_mode, price_schedule_id, sap_sales_order_number)
		Return CType(result.ReturnValue,ISingleResult(Of InsertPSDispAccountingServiceOrderResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePSDispatchRecord")>  _
	Public Function DeletePSDispatchRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of DeletePSDispatchRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of DeletePSDispatchRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispatchExportDetails")>  _
	Public Function UpdateDispatchExportDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal status As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal dispatch_export_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal dispatch_exported_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, status, dispatch_export_datetime, dispatch_exported_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPreJobBriefTemplateRecord")>  _
	Public Function GetPreJobBriefTemplateRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal template_id As System.Nullable(Of Integer)) As ISingleResult(Of GetPreJobBriefTemplateRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), template_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetPreJobBriefTemplateRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetLqaQuestionList")>  _
	Public Function GetLqaQuestionList() As ISingleResult(Of GetLqaQuestionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetLqaQuestionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispLqaReviewerUserAccess")>  _
	Public Function GetDispLqaReviewerUserAccess(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispLqaReviewerUserAccessResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), dist_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispLqaReviewerUserAccessResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoServiceTemplateRecords")>  _
	Public Function GetFsoServiceTemplateRecords() As ISingleResult(Of GetFsoServiceTemplateRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoServiceTemplateRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateFsoSapExportId")>  _
	Public Function CreateFsoSapExportId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal fso_number As String) As ISingleResult(Of CreateFsoSapExportIdResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_number)
		Return CType(result.ReturnValue,ISingleResult(Of CreateFsoSapExportIdResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LastDispUpdate")>  _
	Public Function LastDispUpdate() As ISingleResult(Of LastDispUpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of LastDispUpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCalendarDisplayConfig")>  _
	Public Function GetCalendarDisplayConfig() As ISingleResult(Of GetCalendarDisplayConfigResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetCalendarDisplayConfigResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSpecialServiceToolList")>  _
	Public Function GetSpecialServiceToolList() As ISingleResult(Of GetSpecialServiceToolListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetSpecialServiceToolListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchLookupDataChangeLog")>  _
	Public Function GetDispatchLookupDataChangeLog() As ISingleResult(Of GetDispatchLookupDataChangeLogResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchLookupDataChangeLogResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCompanySoldToItems")>  _
	Public Function GetCompanySoldToItems() As ISingleResult(Of GetCompanySoldToItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetCompanySoldToItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoServiceTemplateItemList")>  _
	Public Function GetFsoServiceTemplateItemList() As ISingleResult(Of GetFsoServiceTemplateItemListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoServiceTemplateItemListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetOrderTemplateItem")>  _
	Public Function DeleteAssetOrderTemplateItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetOrderMaterialRecord")>  _
	Public Function DeleteAssetOrderMaterialRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetForecastLoadoutStatuses")>  _
	Public Function GetAssetForecastLoadoutStatuses() As ISingleResult(Of GetAssetForecastLoadoutStatusesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetForecastLoadoutStatusesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LastVehicleUpdate")>  _
	Public Function LastVehicleUpdate() As ISingleResult(Of LastVehicleUpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of LastVehicleUpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAVLCurrentLocation")>  _
	Public Function GetAVLCurrentLocation(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(15)")> ByVal vdis_unit_id As String) As ISingleResult(Of GetAVLCurrentLocationResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), vdis_unit_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetAVLCurrentLocationResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetLoggersTransmitting")>  _
	Public Function GetLoggersTransmitting() As ISingleResult(Of GetLoggersTransmittingResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetLoggersTransmittingResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckDispatchServiceOrderNumberExists")>  _
	Public Function CheckDispatchServiceOrderNumberExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal field_ticket_number As String) As ISingleResult(Of CheckDispatchServiceOrderNumberExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), field_ticket_number)
		Return CType(result.ReturnValue,ISingleResult(Of CheckDispatchServiceOrderNumberExistsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetQuoteCoverLetterTypeRecords")>  _
	Public Function GetQuoteCoverLetterTypeRecords() As ISingleResult(Of GetQuoteCoverLetterTypeRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetQuoteCoverLetterTypeRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppScheduledMaintenance")>  _
	Public Function GetAppScheduledMaintenance() As ISingleResult(Of GetAppScheduledMaintenanceResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAppScheduledMaintenanceResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetParamVal")>  _
	Public Function GetParamVal(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal param_id As String) As ISingleResult(Of GetParamValResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), param_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetParamValResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPreJobBriefComplexityTypes")>  _
	Public Function GetPreJobBriefComplexityTypes() As ISingleResult(Of GetPreJobBriefComplexityTypesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPreJobBriefComplexityTypesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRcorCoreSoldStatuses")>  _
	Public Function GetRcorCoreSoldStatuses() As ISingleResult(Of GetRcorCoreSoldStatusesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetRcorCoreSoldStatusesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetOrderTemplateItem")>  _
	Public Function UpdateAssetOrderTemplateItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_quantity As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal configuration As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, material_quantity, configuration, row_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetOrderMaterialRecords")>  _
	Public Function GetAssetOrderMaterialRecords() As ISingleResult(Of asset_order_material)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of asset_order_material))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetOrderMaterialRecord")>  _
	Public Function InsertAssetOrderMaterialRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal material_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal material_series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal applicable_series_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal comments As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), material_number, material_series_id, applicable_series_ids, description, comments)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetOrderMaterialRecord")>  _
	Public Function UpdateAssetOrderMaterialRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal material_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal material_series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal applicable_series_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal comments As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, material_number, material_series_id, applicable_series_ids, description, comments)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckSelectionList")>  _
	Public Function GetTruckSelectionList() As ISingleResult(Of truck_selection)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of truck_selection))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAppUserRecord")>  _
	Public Function DeleteAppUserRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal original_user_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_user_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchServiceList")>  _
	Public Function GetDispatchServiceList() As ISingleResult(Of GetDispatchServiceListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchServiceListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCountryList")>  _
	Public Function GetCountryList() As ISingleResult(Of GetCountryListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetCountryListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetEquipmentDetailUrl")>  _
	Public Function GetAssetEquipmentDetailUrl(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As ISingleResult(Of GetAssetEquipmentDetailUrlResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), asset_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetEquipmentDetailUrlResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PSAssetInUseForDispatchSummaries")>  _
	Public Function PSAssetInUseForDispatchSummaries(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of asset_crew_inuse)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of asset_crew_inuse))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PSAssetInUse")>  _
	Public Function PSAssetInUse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal asset_list As String) As ISingleResult(Of asset_crew_inuse)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, asset_list)
		Return CType(result.ReturnValue,ISingleResult(Of asset_crew_inuse))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserRecords")>  _
	Public Function GetAppUserRecords() As ISingleResult(Of app_user)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of app_user))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAppUserRecord")>  _
	Public Function UpdateAppUserRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal original_user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal country_codes As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal bonus_meal_role As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal bonus_meal_profit_center_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal tight_hole_default_owner_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal tight_hole_default_profit_center_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal lqa_reviewer_profit_center_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, original_user_id, name, country_codes, bonus_meal_role, bonus_meal_profit_center_ids, tight_hole_default_owner_flag, tight_hole_default_profit_center_ids, lqa_reviewer_profit_center_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAppUserRecord")>  _
	Public Function InsertAppUserRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal country_codes As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal bonus_meal_role As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal bonus_meal_profit_center_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal tight_hole_default_owner_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal tight_hole_default_profit_center_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal lqa_reviewer_profit_center_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, name, country_codes, bonus_meal_role, bonus_meal_profit_center_ids, tight_hole_default_owner_flag, tight_hole_default_profit_center_ids, lqa_reviewer_profit_center_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteMapBaseIcon")>  _
	Public Function DeleteMapBaseIcon(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetMapBaseIcons")>  _
	Public Function GetMapBaseIcons() As ISingleResult(Of map_base_icon)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of map_base_icon))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertMapBaseIcon")>  _
	Public Function InsertMapBaseIcon(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal text As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal x As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal y As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, text, x, y)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateMapBaseIcon")>  _
	Public Function UpdateMapBaseIcon(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal text As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal x As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal y As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, id, text, x, y)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckAssetOrderTemplateIdExists")>  _
	Public Function CheckAssetOrderTemplateIdExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal country_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal template_id As String) As ISingleResult(Of CheckAssetOrderTemplateIdExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), country_code, template_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckAssetOrderTemplateIdExistsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetOrderTemplateRecord")>  _
	Public Function DeleteAssetOrderTemplateRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetOrderTemplateRecord")>  _
	Public Function UpdateAssetOrderTemplateRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal template_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal template_description As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), template_rec_id, template_description)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CopyAssetOrderTemplate")>  _
	Public Function CopyAssetOrderTemplate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal copy_from_template_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal country_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal copy_to_template_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal template_description As String) As ISingleResult(Of CopyAssetOrderTemplateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), copy_from_template_rec_id, country_code, copy_to_template_id, template_description)
		Return CType(result.ReturnValue,ISingleResult(Of CopyAssetOrderTemplateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetOrderTemplateItem")>  _
	Public Function InsertAssetOrderTemplateItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal template_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_quantity As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal configuration As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), template_rec_id, series_id, material_rec_id, material_quantity, configuration, row_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetOrderTemplateItems")>  _
	Public Function GetAssetOrderTemplateItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal template_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of asset_order_template_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), template_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of asset_order_template_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetOrderTemplateRecords")>  _
	Public Function GetAssetOrderTemplateRecords() As ISingleResult(Of asset_order_template)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of asset_order_template))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteImpactIncidentRecord")>  _
	Public Function DeleteImpactIncidentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetImpactIncidentRecords")>  _
	Public Function GetImpactIncidentRecords() As ISingleResult(Of impact_incident)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of impact_incident))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateImpactIncidentRecord")>  _
	Public Function UpdateImpactIncidentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal impact_level As System.Nullable(Of Char), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal impact_criteria As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, impact_level, impact_criteria)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertImpactIncidentRecord")>  _
	Public Function InsertImpactIncidentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal impact_level As System.Nullable(Of Char), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal impact_criteria As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), impact_level, impact_criteria)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckImpactIncidentRecordInUse")>  _
	Public Function CheckImpactIncidentRecordInUse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As ISingleResult(Of CheckImpactIncidentRecordInUseResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckImpactIncidentRecordInUseResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteThirdPartyContactRecord")>  _
	Public Function DeleteThirdPartyContactRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ModifyRigID")>  _
	Public Function ModifyRigID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrentRigId", DbType:="VarChar(40)")> ByVal currentRigId As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedRigId", DbType:="VarChar(40)")> ByVal modifiedRigId As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Merge", DbType:="Bit")> ByVal merge As System.Nullable(Of Boolean)) As ISingleResult(Of ModifyRigIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), currentRigId, modifiedRigId, merge)
		Return CType(result.ReturnValue,ISingleResult(Of ModifyRigIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispConfigByCountryRecordByDistId")>  _
	Public Function GetDispConfigByCountryRecordByDistId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispConfigByCountryRecordByDistIdResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), dist_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispConfigByCountryRecordByDistIdResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetStateProvinceID")>  _
	Public Function GetStateProvinceID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal state_province_id As String) As ISingleResult(Of GetStateProvinceIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), state_province_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetStateProvinceIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSoldToCompanyRecords")>  _
	Public Function GetSoldToCompanyRecords() As ISingleResult(Of GetSoldToCompanyRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetSoldToCompanyRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoServiceTemplateItemsByPriceScheduleId")>  _
	Public Function GetFsoServiceTemplateItemsByPriceScheduleId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal template_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String) As ISingleResult(Of fso_multi_select_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), template_id, price_schedule_id)
		Return CType(result.ReturnValue,ISingleResult(Of fso_multi_select_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoAdditionalChargeByAreaRecords")>  _
	Public Function GetFsoAdditionalChargeByAreaRecords() As ISingleResult(Of GetFsoAdditionalChargeByAreaRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoAdditionalChargeByAreaRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispDocumentTypeRecord")>  _
	Public Function DeleteDispDocumentTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal original_document_type_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_document_type_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispDocumentTypeRecords")>  _
	Public Function GetDispDocumentTypeRecords() As ISingleResult(Of disp_document_type)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of disp_document_type))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispDocumentTypeRecord")>  _
	Public Function InsertDispDocumentTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal document_type_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal document_type_code As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), document_type_id, document_type_code)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispDocumentTypeRecord")>  _
	Public Function UpdateDispDocumentTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal document_type_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal document_type_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal original_document_type_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), document_type_id, document_type_code, original_document_type_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteRevenueForecastIncrementalRecord")>  _
	Public Function DeleteRevenueForecastIncrementalRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDistrictCountryList")>  _
	Public Function GetDistrictCountryList() As ISingleResult(Of GetDistrictCountryListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetDistrictCountryListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertThirdPartyContactRecord")>  _
	Public Function InsertThirdPartyContactRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal country_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal non_vdis_company_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal vdis_oilcomp_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), country_code, name, non_vdis_company_name, vdis_oilcomp_id, phone_type1, phone1, phone_type2, phone2, email)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateThirdPartyContactRecord")>  _
	Public Function UpdateThirdPartyContactRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal country_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal non_vdis_company_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal vdis_oilcomp_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, country_code, name, non_vdis_company_name, vdis_oilcomp_id, phone_type1, phone1, phone_type2, phone2, email)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetThirdPartyContactRecords")>  _
	Public Function GetThirdPartyContactRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String) As ISingleResult(Of third_party_contact)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), oilcomp_id)
		Return CType(result.ReturnValue,ISingleResult(Of third_party_contact))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetImport")>  _
	Public Function DeleteAssetImport() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetsFromImport")>  _
	Public Function UpdateAssetsFromImport() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPlants")>  _
	Public Function GetPlants(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal filtered_list_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetPlantsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), filtered_list_flag, inactive_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetPlantsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetOrderTemplateRecord")>  _
	Public Function InsertAssetOrderTemplateRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal country_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal template_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal template_description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal template_created_by As String) As ISingleResult(Of InsertAssetOrderTemplateRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), country_code, template_id, template_description, template_created_by)
		Return CType(result.ReturnValue,ISingleResult(Of InsertAssetOrderTemplateRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPreJobBriefAssignedToTitleList")>  _
	Public Function GetPreJobBriefAssignedToTitleList() As ISingleResult(Of GetPreJobBriefAssignedToTitleListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPreJobBriefAssignedToTitleListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetPmPointCalculationFunctionRecords")>  _
	Public Function GetAssetPmPointCalculationFunctionRecords() As ISingleResult(Of GetAssetPmPointCalculationFunctionRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetPmPointCalculationFunctionRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckCableInfo")>  _
	Public Function GetTruckCableInfo(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String) As ISingleResult(Of GetTruckCableInfoResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck)
		Return CType(result.ReturnValue,ISingleResult(Of GetTruckCableInfoResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteGeoscienceGpiCompetencyRecord")>  _
	Public Function DeleteGeoscienceGpiCompetencyRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_gpi)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeoscienceGpiCompetencyRecords")>  _
	Public Function GetGeoscienceGpiCompetencyRecords() As ISingleResult(Of geoscience_gpi_competency)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of geoscience_gpi_competency))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertGeoscienceGpiCompetencyRecord")>  _
	Public Function InsertGeoscienceGpiCompetencyRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal competency_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, competency_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateGeoscienceGpiCompetencyRecord")>  _
	Public Function UpdateGeoscienceGpiCompetencyRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal competency_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, original_gpi, competency_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteGeoscienceGpiRequirement")>  _
	Public Function DeleteGeoscienceGpiRequirement(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_gpi)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeoscienceGpiRequirements")>  _
	Public Function GetGeoscienceGpiRequirements() As ISingleResult(Of geoscience_gpi_requirement)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of geoscience_gpi_requirement))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertGeoscienceGpiRequirement")>  _
	Public Function InsertGeoscienceGpiRequirement(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal requirement As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, requirement)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateGeoscienceGpiRequirement")>  _
	Public Function UpdateGeoscienceGpiRequirement(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal requirement As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, original_gpi, requirement)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteGeosciencePrerequisiteGpiItems")>  _
	Public Function DeleteGeosciencePrerequisiteGpiItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_gpi)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeosciencePrerequisiteGpiList")>  _
	Public Function GetGeosciencePrerequisiteGpiList() As ISingleResult(Of geoscience_prerequisite_gpi)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of geoscience_prerequisite_gpi))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertGeosciencePrerequisiteGpiItems")>  _
	Public Function InsertGeosciencePrerequisiteGpiItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal prerequisite_gpi_list As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, prerequisite_gpi_list)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateGeosciencePrerequisiteGpiItems")>  _
	Public Function UpdateGeosciencePrerequisiteGpiItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal prerequisite_gpi_list As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, original_gpi, prerequisite_gpi_list)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchByAssetSeriesList")>  _
	Public Function GetDispatchByAssetSeriesList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal asset_series_list As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FirstDate", DbType:="SmallDateTime")> ByVal firstDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Days", DbType:="SmallInt")> ByVal days As System.Nullable(Of Short)) As ISingleResult(Of GetDispatchByAssetSeriesListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl, asset_series_list, firstDate, days)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchByAssetSeriesListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchUsingServiceList")>  _
	Public Function GetDispatchUsingServiceList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal tool_id_list As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FirstDate", DbType:="SmallDateTime")> ByVal firstDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Days", DbType:="SmallInt")> ByVal days As System.Nullable(Of Short)) As ISingleResult(Of GetDispatchUsingServiceListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl_id, tool_id_list, firstDate, days)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchUsingServiceListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetForecastDetailData")>  _
	Public Function GetAssetForecastDetailData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal disp_ids As String) As ISingleResult(Of GetAssetForecastDetailDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetForecastDetailDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetContactRecords")>  _
	Public Function GetContactRecords() As ISingleResult(Of GetContactRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetContactRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePSDispPersonnelRecord")>  _
	Public Function DeletePSDispPersonnelRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Original_rec_id", DbType:="Int")> ByVal original_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(20)")> ByVal employee_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_rec_id, disp_id, employee_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PSPersonnelInUse")>  _
	Public Function PSPersonnelInUse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal personnel_list As String) As ISingleResult(Of asset_crew_inuse)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, personnel_list)
		Return CType(result.ReturnValue,ISingleResult(Of asset_crew_inuse))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateOrUpdateFsoSapExportLogRecord")>  _
	Public Function CreateOrUpdateFsoSapExportLogRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal export_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal export_user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal export_user_email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal export_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal last_used_row_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_dist_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), export_id, export_user_id, export_user_email, export_datetime, last_used_row_number, disp_dist_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeoscientistList")>  _
	Public Function GetGeoscientistList() As ISingleResult(Of GetGeoscientistListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetGeoscientistListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetWirelinePersonnelSelectionList")>  _
	Public Function GetWirelinePersonnelSelectionList() As ISingleResult(Of GetWirelinePersonnelSelectionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetWirelinePersonnelSelectionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTeamUtilizationData")>  _
	Public Function GetTeamUtilizationData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(10)")> ByVal team_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal end_date As System.Nullable(Of Date)) As ISingleResult(Of GetTeamUtilizationDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), team_id, start_date, end_date)
		Return CType(result.ReturnValue,ISingleResult(Of GetTeamUtilizationDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTeamScheduleData")>  _
	Public Function GetTeamScheduleData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal team_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal end_date As System.Nullable(Of Date)) As ISingleResult(Of GetTeamScheduleDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), team_id, start_date, end_date)
		Return CType(result.ReturnValue,ISingleResult(Of GetTeamScheduleDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteGeoscienceGpiRecord")>  _
	Public Function DeleteGeoscienceGpiRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_gpi)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeoscienceGpiRecords")>  _
	Public Function GetGeoscienceGpiRecords() As ISingleResult(Of geoscience_gpi)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of geoscience_gpi))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeoscienceGpiList")>  _
	Public Function GetGeoscienceGpiList() As ISingleResult(Of GetGeoscienceGpiListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetGeoscienceGpiListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetBonusMealTerritoryList")>  _
	Public Function GetBonusMealTerritoryList() As ISingleResult(Of bonus_meal_territory)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of bonus_meal_territory))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteBonusMealTerritoryProfitCenters")>  _
	Public Function DeleteBonusMealTerritoryProfitCenters(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_territory_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_territory_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetBonusMealTerritoryProfitCenters")>  _
	Public Function GetBonusMealTerritoryProfitCenters() As ISingleResult(Of bonus_meal_territory_profit_center)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of bonus_meal_territory_profit_center))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBonusMealTerritoryProfitCenters")>  _
	Public Function InsertBonusMealTerritoryProfitCenters(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal profit_center_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id, profit_center_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateBonusMealTerritoryProfitCenters")>  _
	Public Function UpdateBonusMealTerritoryProfitCenters(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal profit_center_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id, original_territory_id, profit_center_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteBonusMealTerritoryRecord")>  _
	Public Function DeleteBonusMealTerritoryRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBonusMealTerritoryRecord")>  _
	Public Function InsertBonusMealTerritoryRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal territory_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateBonusMealTerritoryRecord")>  _
	Public Function UpdateBonusMealTerritoryRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal territory_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id, territory_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFieldJobBonusMaxPercentRecord")>  _
	Public Function DeleteFieldJobBonusMaxPercentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal original_member_title_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_territory_id, original_member_title_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFieldJobBonusMaxPercentRecords")>  _
	Public Function GetFieldJobBonusMaxPercentRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer)) As ISingleResult(Of field_job_bonus_max_percent)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id)
		Return CType(result.ReturnValue,ISingleResult(Of field_job_bonus_max_percent))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFieldJobBonusMaxPercentRecord")>  _
	Public Function InsertFieldJobBonusMaxPercentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal member_title_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_percent As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id, member_title_id, max_percent)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFieldJobBonusMaxPercentRecord")>  _
	Public Function UpdateFieldJobBonusMaxPercentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal member_title_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal original_member_title_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_percent As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id, original_territory_id, member_title_id, original_member_title_id, max_percent)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetWirelinePersonnelMemberTitleList")>  _
	Public Function GetWirelinePersonnelMemberTitleList() As ISingleResult(Of GetWirelinePersonnelMemberTitleListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetWirelinePersonnelMemberTitleListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteGeoscienceDisciplineRecord")>  _
	Public Function DeleteGeoscienceDisciplineRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal rec_id As System.Nullable(Of Short)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertGeoscienceDisciplineRecord")>  _
	Public Function InsertGeoscienceDisciplineRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal discipline As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal short_name As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), discipline, short_name)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateGeoscienceDisciplineRecord")>  _
	Public Function UpdateGeoscienceDisciplineRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal rec_id As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal discipline As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal short_name As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, discipline, short_name)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeoscienceDisciplineRecords")>  _
	Public Function GetGeoscienceDisciplineRecords() As ISingleResult(Of geoscience_discipline)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of geoscience_discipline))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertGeoscienceGpiRecord")>  _
	Public Function InsertGeoscienceGpiRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal discipline_id As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal qc_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, discipline_id, qc_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateGeoscienceGpiRecord")>  _
	Public Function UpdateGeoscienceGpiRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal discipline_id As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal qc_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, original_gpi, discipline_id, qc_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchByGeoscientist")>  _
	Public Function GetDispatchByGeoscientist(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal geoscientist_employee_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal processing_status As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FirstDate", DbType:="SmallDateTime")> ByVal firstDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Days", DbType:="SmallInt")> ByVal days As System.Nullable(Of Short)) As ISingleResult(Of GetDispatchByGeoscientistResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl_id, geoscientist_employee_id, processing_status, firstDate, days)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchByGeoscientistResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetStandbyTypes")>  _
	Public Function GetStandbyTypes() As ISingleResult(Of GetStandbyTypesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetStandbyTypesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetLostDetailRecords")>  _
	Public Function GetLostDetailRecords() As ISingleResult(Of lost_detail)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of lost_detail))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteLostDetailRecord")>  _
	Public Function DeleteLostDetailRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertLostDetailRecord")>  _
	Public Function InsertLostDetailRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lost_detail_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lost_detail_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateLostDetailRecord")>  _
	Public Function UpdateLostDetailRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lost_detail_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, lost_detail_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetSeriesCodeTypeRecord")>  _
	Public Function DeleteAssetSeriesCodeTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetSeriesCodeTypeRecords")>  _
	Public Function GetAssetSeriesCodeTypeRecords() As ISingleResult(Of asset_series_code_type)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of asset_series_code_type))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetSeriesCodeTypeRecord")>  _
	Public Function InsertAssetSeriesCodeTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal code_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), code_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetSeriesCodeTypeRecord")>  _
	Public Function UpdateAssetSeriesCodeTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal code_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, code_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispGeoscientistSelectionList")>  _
	Public Function GetDispGeoscientistSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String) As ISingleResult(Of GetDispGeoscientistSelectionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispGeoscientistSelectionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckCableList")>  _
	Public Function GetTruckCableList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal plant_id As String) As ISingleResult(Of GetTruckCableListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), plant_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetTruckCableListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetSeriesList")>  _
	Public Function GetAssetSeriesList() As ISingleResult(Of GetAssetSeriesListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetSeriesListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTruckConfigRecord")>  _
	Public Function DeleteTruckConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckConfigIpRecords")>  _
	Public Function GetTruckConfigIpRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String) As ISingleResult(Of truck_config_ip)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck)
		Return CType(result.ReturnValue,ISingleResult(Of truck_config_ip))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertTruckConfigIpRecord")>  _
	Public Function InsertTruckConfigIpRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal component As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal ip_address As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck, component, ip_address)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteMealCountThreshold")>  _
	Public Function DeleteMealCountThreshold(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_hours_worked As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_territory_id, original_hours_worked)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetMealCountThresholds")>  _
	Public Function GetMealCountThresholds() As ISingleResult(Of meal_count_threshold)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of meal_count_threshold))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertMealCountThreshold")>  _
	Public Function InsertMealCountThreshold(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal hours_worked As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal meal_count As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id, hours_worked, meal_count)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateMealCountThreshold")>  _
	Public Function UpdateMealCountThreshold(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_territory_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal hours_worked As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_hours_worked As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal meal_count As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), territory_id, original_territory_id, hours_worked, original_hours_worked, meal_count)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckConfigRecord")>  _
	Public Function GetTruckConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String) As ISingleResult(Of truck_config)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck)
		Return CType(result.ReturnValue,ISingleResult(Of truck_config))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertOrUpdateTruckConfigRecord")>  _
	Public Function InsertOrUpdateTruckConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal comms_system As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal comms_system_upload_speed As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal comms_system_download_speed As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal comms_system_latency As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal comms_provider As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal acquisition_system_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal acquisition_system_version As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal acquisition_system_patch_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal acquisition_system_update_date As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck, comms_system, comms_system_upload_speed, comms_system_download_speed, comms_system_latency, comms_provider, acquisition_system_type, acquisition_system_version, acquisition_system_patch_date, acquisition_system_update_date)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckConfigList")>  _
	Public Function GetTruckConfigList() As ISingleResult(Of truck_config)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of truck_config))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckConfigIpList")>  _
	Public Function GetTruckConfigIpList() As ISingleResult(Of truck_config_ip)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of truck_config_ip))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteTruckConfigIpRecords")>  _
	Public Function DeleteTruckConfigIpRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckConfigAssets")>  _
	Public Function GetTruckConfigAssets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String) As ISingleResult(Of truck_config_asset)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck)
		Return CType(result.ReturnValue,ISingleResult(Of truck_config_asset))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateAssetGroupFromTruckConfig")>  _
	Public Function CreateAssetGroupFromTruckConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetGroupItems")>  _
	Public Function DeleteAssetGroupItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal group_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), group_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetGroupItems")>  _
	Public Function GetAssetGroupItems() As ISingleResult(Of GetAssetGroupItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetGroupItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetGroupItem")>  _
	Public Function InsertAssetGroupItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal group_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), group_id, asset_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetSubassemblyRecord")>  _
	Public Function DeleteAssetSubassemblyRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal original_install_date As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, asset_id, original_install_date)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetSubassemblyHistoryRecord")>  _
	Public Function DeleteAssetSubassemblyHistoryRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal original_action_date As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, asset_id, original_action_date)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetSubassemblyHistoryRecord")>  _
	Public Function InsertAssetSubassemblyHistoryRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal action_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal action_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal action_reason As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, asset_id, action_date, action_type, action_reason)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetSubassemblyHistoryRecord")>  _
	Public Function UpdateAssetSubassemblyHistoryRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal action_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal original_action_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal action_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal action_reason As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, asset_id, action_date, original_action_date, action_type, action_reason)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetSubassemblyHistoryRecords")>  _
	Public Function GetAssetSubassemblyHistoryRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_count As System.Nullable(Of Integer)) As ISingleResult(Of asset_subassembly_history)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), asset_id, rec_count)
		Return CType(result.ReturnValue,ISingleResult(Of asset_subassembly_history))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckAssetSubassemblyHistoryRecordExists")>  _
	Public Function CheckAssetSubassemblyHistoryRecordExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal install_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal remove_date As System.Nullable(Of Date)) As ISingleResult(Of CheckAssetSubassemblyHistoryRecordExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, asset_id, install_date, remove_date)
		Return CType(result.ReturnValue,ISingleResult(Of CheckAssetSubassemblyHistoryRecordExistsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetTruckConfigAssetIdSelectionList")>  _
	Public Function GetTruckConfigAssetIdSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal current_plant_id As String) As ISingleResult(Of asset_id_selection)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), series_id, current_plant_id)
		Return CType(result.ReturnValue,ISingleResult(Of asset_id_selection))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetSubassemblyAssetIdSelectionList")>  _
	Public Function GetAssetSubassemblyAssetIdSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal current_plant_id As String) As ISingleResult(Of asset_id_selection)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, series_id, current_plant_id)
		Return CType(result.ReturnValue,ISingleResult(Of asset_id_selection))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetSubassemblyParentAssetIdList")>  _
	Public Function GetAssetSubassemblyParentAssetIdList() As ISingleResult(Of GetAssetSubassemblyParentAssetIdListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetSubassemblyParentAssetIdListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AcquireDispatchEditingLock")>  _
	Public Function AcquireDispatchEditingLock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal data_read_datetime As System.Nullable(Of Date)) As ISingleResult(Of AcquireDispatchEditingLockResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, data_read_datetime)
		Return CType(result.ReturnValue,ISingleResult(Of AcquireDispatchEditingLockResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AcquireDispatchEditingLockForExportAndUpload")>  _
	Public Function AcquireDispatchEditingLockForExportAndUpload(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of AcquireDispatchEditingLockForExportAndUploadResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of AcquireDispatchEditingLockForExportAndUploadResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AcquireFsoEditingLock")>  _
	Public Function AcquireFsoEditingLock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal data_read_datetime As System.Nullable(Of Date)) As ISingleResult(Of AcquireFsoEditingLockResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, data_read_datetime)
		Return CType(result.ReturnValue,ISingleResult(Of AcquireFsoEditingLockResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AcquireGeoscienceEditingLock")>  _
	Public Function AcquireGeoscienceEditingLock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal data_read_datetime As System.Nullable(Of Date)) As ISingleResult(Of AcquireGeoscienceEditingLockResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, data_read_datetime)
		Return CType(result.ReturnValue,ISingleResult(Of AcquireGeoscienceEditingLockResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchEditingLockTimeElapsed")>  _
	Public Function GetDispatchEditingLockTimeElapsed(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispatchEditingLockTimeElapsedResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchEditingLockTimeElapsedResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoEditingLockTimeElapsed")>  _
	Public Function GetFsoEditingLockTimeElapsed(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFsoEditingLockTimeElapsedResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoEditingLockTimeElapsedResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGeoscienceEditingLockTimeElapsed")>  _
	Public Function GetGeoscienceEditingLockTimeElapsed(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetGeoscienceEditingLockTimeElapsedResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetGeoscienceEditingLockTimeElapsedResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReleaseDispatchEditingLock")>  _
	Public Function ReleaseDispatchEditingLock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal release_after_record_saved As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, release_after_record_saved)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReleaseFsoEditingLock")>  _
	Public Function ReleaseFsoEditingLock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal release_after_record_saved As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, release_after_record_saved)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReleaseGeoscienceEditingLock")>  _
	Public Function ReleaseGeoscienceEditingLock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal release_after_record_saved As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, release_after_record_saved)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispContactRecords")>  _
	Public Function GetDispContactRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_contact)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_contact))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchServicesRequested")>  _
	Public Function GetDispatchServicesRequested(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_services_requested)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_services_requested))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchFieldTestRecords")>  _
	Public Function GetDispatchFieldTestRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_field_test)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_field_test))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispIntervalRecords")>  _
	Public Function GetDispIntervalRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_interval)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_interval))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetUtilization")>  _
	Public Function GetDispAssetUtilization(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_asset_utilization)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_asset_utilization))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispDocRecords")>  _
	Public Function GetDispDocRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_doc)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_doc))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispGeoscienceDefaultGpiItems")>  _
	Public Function GetDispGeoscienceDefaultGpiItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal qc_processing_only_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetDispGeoscienceDefaultGpiItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, qc_processing_only_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispGeoscienceDefaultGpiItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispGeoscienceGpiSelectionList")>  _
	Public Function GetDispGeoscienceGpiSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal qc_processing_only_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetDispGeoscienceGpiSelectionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, qc_processing_only_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispGeoscienceGpiSelectionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispGeoscienceGpisFromQuotes")>  _
	Public Function GetDispGeoscienceGpisFromQuotes(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal qc_processing_only_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetDispGeoscienceGpisFromQuotesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, qc_processing_only_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispGeoscienceGpisFromQuotesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispGeoscienceEmailDetails")>  _
	Public Function GetDispGeoscienceEmailDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispGeoscienceEmailDetailsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispGeoscienceEmailDetailsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchDepthUnit")>  _
	Public Function GetDispatchDepthUnit(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispatchDepthUnitResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchDepthUnitResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckDispHasFSOsInFinanceMode")>  _
	Public Function CheckDispHasFSOsInFinanceMode(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of CheckDispHasFSOsInFinanceModeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckDispHasFSOsInFinanceModeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckDispatchHasApprovedBonusData")>  _
	Public Function CheckDispatchHasApprovedBonusData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of CheckDispatchHasApprovedBonusDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckDispatchHasApprovedBonusDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispatchSalesStatusToPending")>  _
	Public Function UpdateDispatchSalesStatusToPending(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, approx_start)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispatchVersionNumber")>  _
	Public Function UpdateDispatchVersionNumber(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispContactRecord")>  _
	Public Function DeleteDispContactRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispContactRecord")>  _
	Public Function InsertDispContactRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal contact_type_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal employee_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_contact_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, contact_type_id, name, phone_type1, phone1, phone_type2, phone2, email, employee_id, critical_contact_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispContactRecord")>  _
	Public Function UpdateDispContactRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal contact_type_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal phone_type2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal employee_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_contact_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, contact_type_id, name, phone_type1, phone1, phone_type2, phone2, email, employee_id, critical_contact_flag, rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispContactList")>  _
	Public Function GetDispContactList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispContactListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispContactListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispSalesRepRecords")>  _
	Public Function GetDispSalesRepRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_contact)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_contact))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispDocRecord")>  _
	Public Function InsertDispDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal original_file_path As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal icon_description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal attach_email_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal file_size As System.Nullable(Of Single)) As ISingleResult(Of InsertDispDocRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, original_file_path, icon_description, attach_email_flag, file_size)
		Return CType(result.ReturnValue,ISingleResult(Of InsertDispDocRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispDocRecord")>  _
	Public Function UpdateDispDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal attach_email_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal document_type As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, attach_email_flag, document_type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispDocRecord")>  _
	Public Function DeleteDispDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispServicesRequestedRecord")>  _
	Public Function DeleteDispServicesRequestedRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchServicesRequestedItems")>  _
	Public Function GetDispatchServicesRequestedItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispatchServicesRequestedItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchServicesRequestedItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispServicesRequestedRecord")>  _
	Public Function InsertDispServicesRequestedRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_order As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal run_instructions As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal otc_st_temp As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal service_list As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, run_order, run_instructions, otc_st_temp, service_list)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispatchServicesRequestedList")>  _
	Public Function UpdateDispatchServicesRequestedList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal services_requested_list As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, services_requested_list)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispServicesRequestedRecord")>  _
	Public Function UpdateDispServicesRequestedRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_order As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal run_instructions As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal otc_st_temp As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal service_list As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, run_order, run_instructions, otc_st_temp, service_list)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.TruckBreakDown")>  _
	Public Function TruckBreakDown(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal avail_id As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_time As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), truck, avail_id, start_time, disp_id, dist_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispTruckConfigIpRecords")>  _
	Public Function GetDispTruckConfigIpRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of truck_config_ip)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of truck_config_ip))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispTruckConfigRecords")>  _
	Public Function GetDispTruckConfigRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of truck_config)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of truck_config))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispTruckConfigAssets")>  _
	Public Function GetDispTruckConfigAssets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of truck_config_asset)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of truck_config_asset))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispTubularRecord")>  _
	Public Function DeleteDispTubularRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispFieldTestRecord")>  _
	Public Function DeleteDispFieldTestRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispFieldTestRecord")>  _
	Public Function InsertDispFieldTestRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op_num As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip_num As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal xxxx_zzz As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal comments As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, op_num, trip_num, xxxx_zzz, comments)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispFieldTestRecord")>  _
	Public Function UpdateDispFieldTestRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op_num As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip_num As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal xxxx_zzz As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal comments As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, op_num, trip_num, xxxx_zzz, comments)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispIntervalRecord")>  _
	Public Function DeleteDispIntervalRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispIntervalRecord")>  _
	Public Function InsertDispIntervalRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal run_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal start_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal end_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal length As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal shot_density As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal charge_count As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal charge_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gun_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal gun_size As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal gun_supplier As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal primer_cord As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal phasing As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, run_number, start_depth, end_depth, length, shot_density, charge_count, charge_type, gun_type, gun_size, gun_supplier, primer_cord, phasing)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispIntervalRecord")>  _
	Public Function UpdateDispIntervalRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal run_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal start_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal end_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal length As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal shot_density As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal charge_count As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal charge_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gun_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal gun_size As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal gun_supplier As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal primer_cord As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal phasing As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, run_number, start_depth, end_depth, length, shot_density, charge_count, charge_type, gun_type, gun_size, gun_supplier, primer_cord, phasing)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispRunRecord")>  _
	Public Function DeleteDispRunRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispLqaItemsFromRunServices")>  _
	Public Function DeleteDispLqaItemsFromRunServices(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispLqaItemsFromRunServices")>  _
	Public Function InsertDispLqaItemsFromRunServices(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispGeoscienceRecord")>  _
	Public Function DeleteDispGeoscienceRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispGeoscienceRecord")>  _
	Public Function InsertDispGeoscienceRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal well_link_url As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal rush_processing_required_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal approved_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal black_white_prints_required As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal color_prints_required As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal compact_discs_required As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal processing_type_required As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal processing_complete_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal comments As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, well_link_url, rush_processing_required_flag, approved_flag, black_white_prints_required, color_prints_required, compact_discs_required, processing_type_required, processing_complete_flag, comments)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispGeoscienceProcessingType")>  _
	Public Function UpdateDispGeoscienceProcessingType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal processing_type_required As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, processing_type_required)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispGeoscienceServiceItem")>  _
	Public Function DeleteDispGeoscienceServiceItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispGeoscienceQuoteItems")>  _
	Public Function InsertDispGeoscienceQuoteItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateGeoscienceEditingLockDatetime")>  _
	Public Function UpdateGeoscienceEditingLockDatetime(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of UpdateGeoscienceEditingLockDatetimeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of UpdateGeoscienceEditingLockDatetimeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispatchEditingLockDatetime")>  _
	Public Function UpdateDispatchEditingLockDatetime(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of UpdateDispatchEditingLockDatetimeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of UpdateDispatchEditingLockDatetimeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoEditingLockDatetime")>  _
	Public Function UpdateFsoEditingLockDatetime(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of UpdateFsoEditingLockDatetimeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of UpdateFsoEditingLockDatetimeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispAsset")>  _
	Public Function DeleteDispAsset(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, asset_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispAssetUtilization")>  _
	Public Function DeleteDispAssetUtilization(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, asset_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispAssetUtilization")>  _
	Public Function InsertDispAssetUtilization(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal column_order As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, asset_id, column_order, op, trip)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispTightHoleUserAccessRecord")>  _
	Public Function InsertDispTightHoleUserAccessRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal owner_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, user_id, owner_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispTightHoleUserAccessRecord")>  _
	Public Function UpdateDispTightHoleUserAccessRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal owner_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, user_id, owner_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFsoQuoteRecord")>  _
	Public Function DeleteFsoQuoteRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), quote_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoNumber")>  _
	Public Function UpdateFsoNumber(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal service_order_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal fso_number As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), service_order_rec_id, fso_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateSapSalesDocumentNumber")>  _
	Public Function UpdateSapSalesDocumentNumber(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal sap_sales_document_number As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, quote_rec_id, sap_sales_document_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateSapSalesOrderNumber")>  _
	Public Function UpdateSapSalesOrderNumber(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal service_order_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal sap_sales_order_number As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), service_order_rec_id, fso_rec_id, sap_sales_order_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AddFsoQuoteToCallSheet")>  _
	Public Function AddFsoQuoteToCallSheet(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, quote_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RemoveFsoQuoteFromCallSheet")>  _
	Public Function RemoveFsoQuoteFromCallSheet(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of RemoveFsoQuoteFromCallSheetResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), quote_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of RemoveFsoQuoteFromCallSheetResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetQuotesLinkedToFso")>  _
	Public Function GetQuotesLinkedToFso(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of quote_linked_to_fso_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of quote_linked_to_fso_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFsoItem")>  _
	Public Function DeleteFsoItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SetFsoRecordSapExportLastRowNumberUsed")>  _
	Public Function SetFsoRecordSapExportLastRowNumberUsed(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal fso_exported_rec_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sap_export_last_used_row_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal sap_export_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_exported_rec_ids, sap_export_last_used_row_number, sap_export_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoRecIdByFsoNumber")>  _
	Public Function GetFsoRecIdByFsoNumber(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal fso_number As String) As ISingleResult(Of GetFsoRecIdByFsoNumberResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_number)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoRecIdByFsoNumberResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFsoItemsByRecId")>  _
	Public Function DeleteFsoItemsByRecId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RemoveQuoteLinkFromFso")>  _
	Public Function RemoveQuoteLinkFromFso(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), quote_rec_id, fso_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateQuoteLinkedToFsoFromOfflineFile")>  _
	Public Function UpdateQuoteLinkedToFsoFromOfflineFile(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, quote_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispFsoQuoteCommentItem")>  _
	Public Function InsertDispFsoQuoteCommentItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal comment_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, comment_rec_id, row_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispFsoQuoteCommentItem")>  _
	Public Function UpdateDispFsoQuoteCommentItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal comment_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, comment_rec_id, row_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispFsoQuoteCommentItem")>  _
	Public Function DeleteDispFsoQuoteCommentItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal comment_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, comment_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoQuoteVersionNumber")>  _
	Public Function UpdateFsoQuoteVersionNumber(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), quote_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetQuotesLinksSelectionList")>  _
	Public Function GetQuotesLinksSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetQuotesLinksSelectionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetQuotesLinksSelectionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CopyQuoteDataToFso")>  _
	Public Function CopyQuoteDataToFso(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, quote_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoExportedToSapFlag")>  _
	Public Function UpdateFsoExportedToSapFlag(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal fso_exported_rec_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal exported_to_sap_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal export_type As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_exported_rec_ids, exported_to_sap_flag, export_type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoQuoteList")>  _
	Public Function GetFsoQuoteList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFsoQuoteListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoQuoteListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoQuoteSummaryReportItem")>  _
	Public Function UpdateFsoQuoteSummaryReportItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal include_in_quote_summary_report_total_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal print_quote_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quote_print_order As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, include_in_quote_summary_report_total_flag, print_quote_flag, quote_print_order)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispStandbyItem")>  _
	Public Function DeleteDispStandbyItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal charge_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal standby_type_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, charge_type, standby_type_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispImpactIncidentRecords")>  _
	Public Function GetDispImpactIncidentRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_impact_incident)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_impact_incident))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispImpactIncidentRecord")>  _
	Public Function DeleteDispImpactIncidentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal impact_incident_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, impact_incident_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispImpactIncidentRecord")>  _
	Public Function InsertDispImpactIncidentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal impact_incident_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, impact_incident_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispLqaRecordByLqaType")>  _
	Public Function GetDispLqaRecordByLqaType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_lqa)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_lqa))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispLqaQuestionsByLqaType")>  _
	Public Function GetDispLqaQuestionsByLqaType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispLqaQuestionsByLqaTypeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispLqaQuestionsByLqaTypeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispLqaItemsByLqaType")>  _
	Public Function GetDispLqaItemsByLqaType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_lqa_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_lqa_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispLqaServiceListByLqaType")>  _
	Public Function GetDispLqaServiceListByLqaType(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispLqaServiceListByLqaTypeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispLqaServiceListByLqaTypeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispLqaRecord")>  _
	Public Function InsertDispLqaRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal engineer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal engineer_update_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal original_reviewer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal original_review_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal last_reviewer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal last_review_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comment As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id, engineer, engineer_update_datetime, original_reviewer, original_review_datetime, last_reviewer, last_review_datetime, comment)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispLqaRecord")>  _
	Public Function UpdateDispLqaRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal engineer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal engineer_update_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal original_reviewer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal original_review_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal last_reviewer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal last_review_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comment As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id, engineer, engineer_update_datetime, original_reviewer, original_review_datetime, last_reviewer, last_review_datetime, comment)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispLqaQuestion")>  _
	Public Function InsertDispLqaQuestion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_question_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_section_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal question_text As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal point_value As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal display_order As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_question_rec_id, lqa_type_id, lqa_section_id, question_text, point_value, display_order)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispLqaItem")>  _
	Public Function InsertDispLqaItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_question_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal engineer_response_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal reviewer_response_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, service_id, lqa_question_rec_id, engineer_response_flag, reviewer_response_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispLqaByDispId")>  _
	Public Function DeleteDispLqaByDispId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_type_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, lqa_type_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispLqaItem")>  _
	Public Function UpdateDispLqaItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal lqa_question_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal engineer_response_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal reviewer_response_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, service_id, lqa_question_rec_id, engineer_response_flag, reviewer_response_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispLqaRecords")>  _
	Public Function DeleteDispLqaRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbSubsectionRecords")>  _
	Public Function GetDispPjbSubsectionRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal section_ids As String) As ISingleResult(Of GetDispPjbSubsectionRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, section_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbSubsectionRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbEquipmentSubsectionTrafficLightData")>  _
	Public Function GetDispPjbEquipmentSubsectionTrafficLightData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPjbEquipmentSubsectionTrafficLightDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbEquipmentSubsectionTrafficLightDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbSectionRecords")>  _
	Public Function GetDispPjbSectionRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal template_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPjbSectionRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), template_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbSectionRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbLoadoutChecklistRecords")>  _
	Public Function GetDispPjbLoadoutChecklistRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal subsection_ids As String) As ISingleResult(Of GetDispPjbLoadoutChecklistRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), subsection_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbLoadoutChecklistRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbHyperlinkRecords")>  _
	Public Function GetDispPjbHyperlinkRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal section_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal subsection_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal question_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal manuals_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetDispPjbHyperlinkRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), section_id, subsection_id, question_id, manuals_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbHyperlinkRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbRecord")>  _
	Public Function GetDispPjbRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_pjb)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_pjb))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbResponseRecords")>  _
	Public Function GetDispPjbResponseRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_pjb_response)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_pjb_response))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispPjbRecord")>  _
	Public Function InsertDispPjbRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal template_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal created_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal created_by As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comment As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal complexity_types As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal referenced_disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, template_id, created_datetime, created_by, comment, complexity_types, referenced_disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispPjbRecord")>  _
	Public Function UpdateDispPjbRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal last_updated_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal last_updated_by As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comment As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal complexity_types As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal referenced_disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, last_updated_datetime, last_updated_by, comment, complexity_types, referenced_disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispPjbResponseRecord")>  _
	Public Function DeleteDispPjbResponseRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal response_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), response_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispPjbResponseRecord")>  _
	Public Function InsertDispPjbResponseRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal question_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal response_data As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal response_details As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, question_id, response_data, response_details)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispPjbResponseRecord")>  _
	Public Function UpdateDispPjbResponseRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal response_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal response_data As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal response_details As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), response_id, response_data, response_details)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispServiceCompetencies")>  _
	Public Function GetDispServiceCompetencies(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispServiceCompetenciesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispServiceCompetenciesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbReferencedPersonnelList")>  _
	Public Function GetDispPjbReferencedPersonnelList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal referenced_disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPjbReferencedPersonnelListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, referenced_disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbReferencedPersonnelListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbReferencedServiceList")>  _
	Public Function GetDispPjbReferencedServiceList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal referenced_disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPjbReferencedServiceListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, referenced_disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbReferencedServiceListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispPjbResponses")>  _
	Public Function DeleteDispPjbResponses(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CopyDispPjbResponses")>  _
	Public Function CopyDispPjbResponses(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal copy_from_disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, copy_from_disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRcorRecord")>  _
	Public Function GetDispRcorRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_rcor)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_rcor))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispRcorRecord")>  _
	Public Function InsertDispRcorRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_requests As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_attempts As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cores_recovered As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal recovery_efficiency As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal average_drill_time As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal average_core_length As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip3 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip4 As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, core_requests, core_attempts, cores_recovered, recovery_efficiency, average_drill_time, average_core_length, bit_number_trip1, bit_number_trip2, bit_number_trip3, bit_number_trip4)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispRcorRecord")>  _
	Public Function UpdateDispRcorRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_requests As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_attempts As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cores_recovered As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal recovery_efficiency As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal average_drill_time As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal average_core_length As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip3 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal bit_number_trip4 As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, core_requests, core_attempts, cores_recovered, recovery_efficiency, average_drill_time, average_core_length, bit_number_trip1, bit_number_trip2, bit_number_trip3, bit_number_trip4)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispRcorRecord")>  _
	Public Function DeleteDispRcorRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispRcorAttempt")>  _
	Public Function DeleteDispRcorAttempt(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal attempt_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, attempt_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchExportDatetime")>  _
	Public Function GetDispatchExportDatetime(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispatchExportDatetimeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchExportDatetimeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePersonnelInsertedToOfflineDispatch")>  _
	Public Function DeletePersonnelInsertedToOfflineDispatch(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateAssetOrderTemplateFromDispAssetOrder")>  _
	Public Function CreateAssetOrderTemplateFromDispAssetOrder(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal country_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal template_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal template_description As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, country_code, template_id, template_description)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetOrderAssetSelectionList")>  _
	Public Function GetDispAssetOrderAssetSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_asset_order_asset_selection)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_asset_order_asset_selection))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetOrderRecord")>  _
	Public Function GetDispAssetOrderRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_asset_order)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_asset_order))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispAssetOrderRecord")>  _
	Public Function InsertDispAssetOrderRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal destination As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal equipment_coordinator As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal well_inner_diameter As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal well_outer_diameter As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal min_restriction As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loadout_status As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal additional_info As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, destination, equipment_coordinator, well_inner_diameter, well_outer_diameter, min_restriction, loadout_status, additional_info)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispAssetOrderRecord")>  _
	Public Function DeleteDispAssetOrderRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispAssetOrderRecord")>  _
	Public Function UpdateDispAssetOrderRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal destination As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal equipment_coordinator As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal well_inner_diameter As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal well_outer_diameter As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal min_restriction As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loadout_status As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal additional_info As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, destination, equipment_coordinator, well_inner_diameter, well_outer_diameter, min_restriction, loadout_status, additional_info)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispAssetOrderItem")>  _
	Public Function DeleteDispAssetOrderItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetOrderItems")>  _
	Public Function GetDispAssetOrderItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_asset_order_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_asset_order_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispAssetOrderItem")>  _
	Public Function InsertDispAssetOrderItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_quantity As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal configuration As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal lift_asset As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, series_id, material_rec_id, material_quantity, configuration, lift_asset, comments, row_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispAssetOrderItem")>  _
	Public Function UpdateDispAssetOrderItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_quantity As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal configuration As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal lift_asset As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, material_quantity, configuration, lift_asset, comments, row_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SwapDispAssetOrderItemAssetIds")>  _
	Public Function SwapDispAssetOrderItemAssetIds(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id1 As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id2 As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id2 As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id1, asset_id1, rec_id2, asset_id2)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispAssetOrderItemAssetId")>  _
	Public Function UpdateDispAssetOrderItemAssetId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, asset_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispApproxStart")>  _
	Public Function UpdateDispApproxStart(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal new_date As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, new_date)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoItemSapRowNumbers")>  _
	Public Function GetFsoItemSapRowNumbers(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFsoItemSapRowNumbersResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoItemSapRowNumbersResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoSapExportRequiredFields")>  _
	Public Function GetFsoSapExportRequiredFields(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFsoSapExportRequiredFieldsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoSapExportRequiredFieldsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetExportedQuotesLinkedToFsoCount")>  _
	Public Function GetExportedQuotesLinkedToFsoCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetExportedQuotesLinkedToFsoCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetExportedQuotesLinkedToFsoCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispFsoMultiPslExportFlag")>  _
	Public Function UpdateDispFsoMultiPslExportFlag(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal multi_psl_export_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, multi_psl_export_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SetFsoItemSapExportRowNumber")>  _
	Public Function SetFsoItemSapExportRowNumber(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sap_export_row_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, sap_export_row_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ImportSapMasterQuoteData")>  _
	Public Function ImportSapMasterQuoteData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal quote_rec_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal sap_sales_document_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal sap_export_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_master_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal job_is_turn_key As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal sold_to_is_main_customer As System.Nullable(Of Boolean)) As ISingleResult(Of ImportSapMasterQuoteDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, quote_rec_ids, sold_to_id, sap_sales_document_number, sap_export_id, well_master_number, job_is_turn_key, sold_to_is_main_customer)
		Return CType(result.ReturnValue,ISingleResult(Of ImportSapMasterQuoteDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispRcorAttempt")>  _
	Public Function InsertDispRcorAttempt( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal attempt_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal core_sold As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_time As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal washout_extent As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal drill_time As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal length_cut As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal estimated_length_recovered As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal actual_length_recovered As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal file_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal expected_lithology As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal unconfined_comp_strength As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal over_balance As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal include_in_report_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal req_num As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal absolute_pressure_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal absolute_pressure_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal electronics_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal electronics_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal voltage_regulator_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal voltage_regulator_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_controller_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_controller_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal qa_electronics_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal qa_electronics_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal total_drill_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_low_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_medium1_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_medium2_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_high_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_max_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pulse_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal surge_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal retract_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal advance_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal break_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal break_value_max As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, attempt_id, core_sold, depth, start_time, washout_extent, drill_time, length_cut, estimated_length_recovered, actual_length_recovered, file_name, expected_lithology, unconfined_comp_strength, over_balance, comment, include_in_report_flag, req_num, absolute_pressure_before, absolute_pressure_after, electronics_temperature_before, electronics_temperature_after, voltage_regulator_temperature_before, voltage_regulator_temperature_after, motor_controller_temperature_before, motor_controller_temperature_after, qa_electronics_temperature_before, qa_electronics_temperature_after, motor_temperature_before, motor_temperature_after, total_drill_seconds, aux_pressure_low_seconds, aux_pressure_medium1_seconds, aux_pressure_medium2_seconds, aux_pressure_high_seconds, aux_pressure_max_seconds, pulse_command_count, surge_command_count, retract_command_count, advance_command_count, break_command_count, break_value_max)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispRcorAttempt")>  _
	Public Function UpdateDispRcorAttempt( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal attempt_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal core_sold As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_time As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal washout_extent As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal drill_time As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal length_cut As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal estimated_length_recovered As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal actual_length_recovered As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal file_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal expected_lithology As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal unconfined_comp_strength As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal over_balance As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal include_in_report_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal req_num As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal absolute_pressure_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal absolute_pressure_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal electronics_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal electronics_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal voltage_regulator_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal voltage_regulator_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_controller_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_controller_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal qa_electronics_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal qa_electronics_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_temperature_before As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal motor_temperature_after As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal total_drill_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_low_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_medium1_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_medium2_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_high_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal aux_pressure_max_seconds As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pulse_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal surge_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal retract_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal advance_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal break_command_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal break_value_max As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, attempt_id, core_sold, depth, start_time, washout_extent, drill_time, length_cut, estimated_length_recovered, actual_length_recovered, file_name, expected_lithology, unconfined_comp_strength, over_balance, comment, include_in_report_flag, req_num, absolute_pressure_before, absolute_pressure_after, electronics_temperature_before, electronics_temperature_after, voltage_regulator_temperature_before, voltage_regulator_temperature_after, motor_controller_temperature_before, motor_controller_temperature_after, qa_electronics_temperature_before, qa_electronics_temperature_after, motor_temperature_before, motor_temperature_after, total_drill_seconds, aux_pressure_low_seconds, aux_pressure_medium1_seconds, aux_pressure_medium2_seconds, aux_pressure_high_seconds, aux_pressure_max_seconds, pulse_command_count, surge_command_count, retract_command_count, advance_command_count, break_command_count, break_value_max)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRcorAttempts")>  _
	Public Function GetDispRcorAttempts(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_rcor_attempt)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_rcor_attempt))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetSubassemblyRecord")>  _
	Public Function InsertAssetSubassemblyRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal install_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal install_reason As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal remove_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal remove_reason As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, asset_id, install_date, install_reason, remove_date, remove_reason)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetSubassemblyRecord")>  _
	Public Function UpdateAssetSubassemblyRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal install_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal original_install_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal install_reason As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal original_install_reason As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal remove_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal remove_reason As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id, asset_id, install_date, original_install_date, install_reason, original_install_reason, remove_date, remove_reason)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetSubassemblyRecords")>  _
	Public Function GetAssetSubassemblyRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String) As ISingleResult(Of asset_subassembly)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parent_asset_id)
		Return CType(result.ReturnValue,ISingleResult(Of asset_subassembly))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteRemoteServiceEmailRecord")>  _
	Public Function DeleteRemoteServiceEmailRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRemoteServiceEmailRecords")>  _
	Public Function GetRemoteServiceEmailRecords() As ISingleResult(Of remote_service_email)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of remote_service_email))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertRemoteServiceEmailRecord")>  _
	Public Function InsertRemoteServiceEmailRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal recipient_description As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), email, recipient_description)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateRemoteServiceEmailRecord")>  _
	Public Function UpdateRemoteServiceEmailRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal recipient_description As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, email, recipient_description)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRemoteServiceEmailAddresses")>  _
	Public Function GetDispRemoteServiceEmailAddresses(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispRemoteServiceEmailAddressesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispRemoteServiceEmailAddressesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRemoteServiceEmailDispatchDetails")>  _
	Public Function GetDispRemoteServiceEmailDispatchDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispRemoteServiceEmailDispatchDetailsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispRemoteServiceEmailDispatchDetailsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchAssetSelectionConflictDetails")>  _
	Public Function GetDispatchAssetSelectionConflictDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal asset_id_list As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id_copied_from As System.Nullable(Of Integer)) As ISingleResult(Of GetDispatchAssetSelectionConflictDetailsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), asset_id_list, disp_id_copied_from)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchAssetSelectionConflictDetailsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispFsoQuoteCommentItems")>  _
	Public Function GetDispFsoQuoteCommentItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of quote_footnote_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of quote_footnote_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoQuoteCommentRecords")>  _
	Public Function GetFsoQuoteCommentRecords() As ISingleResult(Of GetFsoQuoteCommentRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoQuoteCommentRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AddInstrumentProtectionFootnoteToQuotes")>  _
	Public Function AddInstrumentProtectionFootnoteToQuotes(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetSeriesSubassemblySeriesList")>  _
	Public Function GetAssetSeriesSubassemblySeriesList() As ISingleResult(Of GetAssetSeriesSubassemblySeriesListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetSeriesSubassemblySeriesListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertOrUpdateDispPartner")>  _
	Public Function InsertOrUpdateDispPartner(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal vdis_disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal partner_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal partner_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal partner_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal address As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal city As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal state_province As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal postal_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal country_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal contact_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal phone As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal fax As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), vdis_disp_id, partner_type, partner_id, partner_name, address, city, state_province, postal_code, country_code, contact_name, phone, fax)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetExportXrefData")>  _
	Public Function GetExportXrefData() As ISingleResult(Of GetExportXrefDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetExportXrefDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpRootCauseAnalysisRecord")>  _
	Public Function DeleteFimpRootCauseAnalysisRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpCorrectiveActionRecord")>  _
	Public Function DeleteFimpCorrectiveActionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpRecord")>  _
	Public Function DeleteFimpRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRunParameterResponseTypes")>  _
	Public Function GetRunParameterResponseTypes() As ISingleResult(Of GetRunParameterResponseTypesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetRunParameterResponseTypesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetToolRunParameterItems")>  _
	Public Function GetToolRunParameterItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As ISingleResult(Of tool_run_param_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), service_id, inactive_flag)
		Return CType(result.ReturnValue,ISingleResult(Of tool_run_param_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteToolRunParameterItem")>  _
	Public Function DeleteToolRunParameterItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal parameter_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal version_number As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), service_id, parameter_rec_id, version_number)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertToolRunParameterItem")>  _
	Public Function InsertToolRunParameterItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal parameter_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sequence_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal response_meta_data As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), service_id, parameter_rec_id, sequence_number, response_meta_data, inactive_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateToolRunParameterItem")>  _
	Public Function UpdateToolRunParameterItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal parameter_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal version_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sequence_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal response_meta_data As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), service_id, parameter_rec_id, version_number, sequence_number, response_meta_data, inactive_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispRunParameterRecord")>  _
	Public Function DeleteDispRunParameterRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), run_rec_id, service_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRunParameterRecord")>  _
	Public Function GetDispRunParameterRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String) As ISingleResult(Of disp_run_parameter)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), run_rec_id, service_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_run_parameter))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRunParameterItems")>  _
	Public Function GetDispRunParameterItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String) As ISingleResult(Of disp_run_parameter_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, run_rec_id, service_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_run_parameter_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispRunParameterItems")>  _
	Public Function DeleteDispRunParameterItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), run_rec_id, service_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispRunParameterRecord")>  _
	Public Function InsertDispRunParameterRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal last_update_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal last_update_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), run_rec_id, service_id, comments, last_update_datetime, last_update_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispRunParameterItem")>  _
	Public Function InsertDispRunParameterItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal parameter_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal parameter_version_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal response_data As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal response_details As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), run_rec_id, service_id, parameter_rec_id, parameter_version_number, response_data, response_details)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispRunParameterRecord")>  _
	Public Function UpdateDispRunParameterRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal last_update_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal last_update_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), run_rec_id, service_id, comments, last_update_datetime, last_update_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRunParameterImportRunList")>  _
	Public Function GetDispRunParameterImportRunList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal service_id As String) As ISingleResult(Of GetDispRunParameterImportRunListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, run_rec_id, service_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispRunParameterImportRunListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRunParameterRecords")>  _
	Public Function GetDispRunParameterRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_run_parameter)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_run_parameter))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispCompletionsActivityLogItem")>  _
	Public Function DeleteDispCompletionsActivityLogItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetOrderAssetSelectionList")>  _
	Public Function GetDispAssetOrderAssetSelectionList1(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_equipment_selection)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_equipment_selection))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailureEventLikelihoodList")>  _
	Public Function GetFailureEventLikelihoodList() As ISingleResult(Of GetFailureEventLikelihoodListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFailureEventLikelihoodListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailureEventSeverityList")>  _
	Public Function GetFailureEventSeverityList() As ISingleResult(Of GetFailureEventSeverityListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFailureEventSeverityListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRunAssets")>  _
	Public Function GetDispRunAssets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispRunAssetsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, run_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispRunAssetsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpDocRecord")>  _
	Public Function DeleteFimpDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpJobStageList")>  _
	Public Function GetFimpJobStageList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFimpJobStageListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFimpJobStageListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpAssetIdList")>  _
	Public Function GetFimpAssetIdList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal plant_id As String) As ISingleResult(Of GetFimpAssetIdListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), series_id, plant_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFimpAssetIdListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetIdList")>  _
	Public Function GetDispAssetIdList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispAssetIdListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispAssetIdListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDistrictList")>  _
	Public Function GetDistrictList() As ISingleResult(Of district)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of district))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.DeleteCaseWorkerRecord")>  _
	Public Function DeleteCaseWorkerRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetPoncCategories")>  _
	Public Function GetPoncCategories() As ISingleResult(Of GetPoncCategoriesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPoncCategoriesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetPoncCategorySections")>  _
	Public Function GetPoncCategorySections() As ISingleResult(Of GetPoncCategorySectionsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPoncCategorySectionsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpPoncRecord")>  _
	Public Function DeleteFimpPoncRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal category_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id, category_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.DeleteProcedureDocRecord")>  _
	Public Function DeleteProcedureDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.InsertProcedureDocRecord")>  _
	Public Function InsertProcedureDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal document_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal document_url As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), document_type_id, document_url)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.UpdateProcedureDocRecord")>  _
	Public Function UpdateProcedureDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal document_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal document_url As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, document_type_id, document_url)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetProcedureDocumentTypes")>  _
	Public Function GetProcedureDocumentTypes() As ISingleResult(Of GetProcedureDocumentTypesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetProcedureDocumentTypesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetProcedureDocRecords")>  _
	Public Function GetProcedureDocRecords() As ISingleResult(Of procedure_doc)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of procedure_doc))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetCaseWorkerList")>  _
	Public Function GetCaseWorkerList() As ISingleResult(Of GetCaseWorkerListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetCaseWorkerListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpRootCauseAnalysisClosedDate")>  _
	Public Function UpdateFimpRootCauseAnalysisClosedDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal closed_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal closed_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, closed_datetime, closed_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpIncidentClosedDate")>  _
	Public Function UpdateFimpIncidentClosedDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal closed_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal closed_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, closed_datetime, closed_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpCorrectiveActionClosedDate")>  _
	Public Function UpdateFimpCorrectiveActionClosedDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal closed_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal closed_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, closed_datetime, closed_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpNotificationEmailList")>  _
	Public Function GetFimpNotificationEmailList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal reassigning_case_worker_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetFimpNotificationEmailListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id, reassigning_case_worker_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetFimpNotificationEmailListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetNotificationConfig")>  _
	Public Function GetNotificationConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal notification_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal notification_section As String) As ISingleResult(Of notification_config)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), notification_type_id, notification_section)
		Return CType(result.ReturnValue,ISingleResult(Of notification_config))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetNotificationConfigItems")>  _
	Public Function GetNotificationConfigItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal notification_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal notification_section As String) As ISingleResult(Of GetNotificationConfigItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), notification_type_id, notification_section)
		Return CType(result.ReturnValue,ISingleResult(Of GetNotificationConfigItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetNotificationSectionList")>  _
	Public Function GetNotificationSectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal notification_type_id As System.Nullable(Of Integer)) As ISingleResult(Of GetNotificationSectionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), notification_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetNotificationSectionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.UpdateNotificationConfig")>  _
	Public Function UpdateNotificationConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal notification_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal notification_section As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal notification_text As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), notification_type_id, notification_section, notification_text)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPriceScheduleRecords")>  _
	Public Function GetPriceScheduleRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetPriceScheduleRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), inactive_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetPriceScheduleRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispCompletionsActivityLog")>  _
	Public Function GetDispCompletionsActivityLog(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_completions_activity_log)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_completions_activity_log))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispCompletionsActivityLogItem")>  _
	Public Function UpdateDispCompletionsActivityLogItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal activity_desc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal activity_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, activity_desc, activity_datetime, op, trip)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispCompletionsActivityLogItem")>  _
	Public Function InsertDispCompletionsActivityLogItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal activity_desc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal activity_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, activity_desc, activity_datetime, op, trip)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailedItemList")>  _
	Public Function GetFailedItemList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_group_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFailedItemListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), failure_group_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFailedItemListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailureGroupList")>  _
	Public Function GetFailureGroupList() As ISingleResult(Of GetFailureGroupListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFailureGroupListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailureMechanismCategoryList")>  _
	Public Function GetFailureMechanismCategoryList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_group_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFailureMechanismCategoryListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), failure_group_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFailureMechanismCategoryListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailureMechanismList")>  _
	Public Function GetFailureMechanismList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_mechanism_category_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFailureMechanismListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), failure_mechanism_category_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFailureMechanismListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetImmediateCauseList")>  _
	Public Function GetImmediateCauseList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal immediate_cause_category_id As System.Nullable(Of Integer)) As ISingleResult(Of GetImmediateCauseListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), immediate_cause_category_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetImmediateCauseListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetImmediateCauseCategoryList")>  _
	Public Function GetImmediateCauseCategoryList() As ISingleResult(Of GetImmediateCauseCategoryListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetImmediateCauseCategoryListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCompanyList")>  _
	Public Function GetCompanyList() As ISingleResult(Of GetCompanyListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetCompanyListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailureRiskMatrixRecords")>  _
	Public Function GetFailureRiskMatrixRecords() As ISingleResult(Of GetFailureRiskMatrixRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFailureRiskMatrixRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckFimpUserCanAccessDispatch")>  _
	Public Function CheckFimpUserCanAccessDispatch(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of CheckFimpUserCanAccessDispatchResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckFimpUserCanAccessDispatchResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispJobCompletedDate")>  _
	Public Function GetDispJobCompletedDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispJobCompletedDateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispJobCompletedDateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispRunOpTripList")>  _
	Public Function GetDispRunOpTripList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispRunOpTripListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispRunOpTripListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetRootCauseCategoryList")>  _
	Public Function GetRootCauseCategoryList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal immediate_cause_category_type_id As String) As ISingleResult(Of GetRootCauseCategoryListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), immediate_cause_category_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetRootCauseCategoryListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetRootCauseList")>  _
	Public Function GetRootCauseList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_category_id As System.Nullable(Of Integer)) As ISingleResult(Of GetRootCauseListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), root_cause_category_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetRootCauseListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetReportLinks")>  _
	Public Function GetReportLinks(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal link_type As String) As ISingleResult(Of GetReportLinksResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), link_type)
		Return CType(result.ReturnValue,ISingleResult(Of GetReportLinksResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetCaseWorkerRecords")>  _
	Public Function GetCaseWorkerRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String) As ISingleResult(Of fimp_case_worker)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_case_worker))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.InsertCaseWorkerRecord")>  _
	Public Function InsertCaseWorkerRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal min_severity_for_notification As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal max_severity_to_approve_irb As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal max_severity_to_close_other_cw_incident As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal dist_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, name, email, min_severity_for_notification, max_severity_to_approve_irb, max_severity_to_close_other_cw_incident, dist_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.UpdateCaseWorkerRecord")>  _
	Public Function UpdateCaseWorkerRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal min_severity_for_notification As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal max_severity_to_approve_irb As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal max_severity_to_close_other_cw_incident As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal dist_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, name, email, min_severity_for_notification, max_severity_to_approve_irb, max_severity_to_close_other_cw_incident, dist_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetCaseWorkerDetails")>  _
	Public Function GetCaseWorkerDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal severity_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer)) As ISingleResult(Of GetCaseWorkerDetailsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, severity_id, dist_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetCaseWorkerDetailsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePerfParameterRecord")>  _
	Public Function DeletePerfParameterRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPerfServiceToolList")>  _
	Public Function GetPerfServiceToolList() As ISingleResult(Of GetPerfServiceToolListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPerfServiceToolListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteRunParameterTypeRecord")>  _
	Public Function DeleteRunParameterTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRunParameterTypeRecords")>  _
	Public Function GetRunParameterTypeRecords() As ISingleResult(Of run_parameter)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of run_parameter))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertRunParameterTypeRecord")>  _
	Public Function InsertRunParameterTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal parameter_text As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal response_type_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), parameter_text, response_type_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateRunParameterTypeRecord")>  _
	Public Function UpdateRunParameterTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal parameter_text As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, parameter_text)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeletePerfParameterTypeRecord")>  _
	Public Function DeletePerfParameterTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispFimpRecords")>  _
	Public Function GetDispFimpRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispFimpRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispFimpRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispAssemblyInstructionRecord")>  _
	Public Function DeleteDispAssemblyInstructionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal original_assembly_name As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, original_assembly_name)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssemblyInstructionRecords")>  _
	Public Function GetDispAssemblyInstructionRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_assembly_instruction)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_assembly_instruction))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispAssemblyInstructionRecord")>  _
	Public Function InsertDispAssemblyInstructionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal assembly_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1500)")> ByVal instructions As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, assembly_name, instructions)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispAssemblyInstructionRecord")>  _
	Public Function UpdateDispAssemblyInstructionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal assembly_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal original_assembly_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1500)")> ByVal instructions As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, assembly_name, original_assembly_name, instructions)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetCorrectiveActionOwnersList")>  _
	Public Function GetCorrectiveActionOwnersList() As ISingleResult(Of GetCorrectiveActionOwnersListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetCorrectiveActionOwnersListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpCorrectiveActionRecord")>  _
	Public Function InsertFimpCorrectiveActionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal corrective_action As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal owner_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal assigned_employee_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal target_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal control_desc As String) As ISingleResult(Of InsertFimpCorrectiveActionRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), root_cause_rec_id, corrective_action, owner_rec_id, assigned_employee_id, target_date, control_desc)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFimpCorrectiveActionRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpCorrectiveActionRecord")>  _
	Public Function UpdateFimpCorrectiveActionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal corrective_action As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal owner_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal assigned_employee_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal target_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal control_desc As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, corrective_action, owner_rec_id, assigned_employee_id, target_date, control_desc)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpCorrectiveActionRecords")>  _
	Public Function GetFimpCorrectiveActionRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_corrective_action)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), root_cause_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_corrective_action))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetFailureEventList")>  _
	Public Function GetFailureEventList() As ISingleResult(Of GetFailureEventListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetFailureEventListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckFimpDocRecordExists")>  _
	Public Function CheckFimpDocRecordExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal original_file_path As String) As ISingleResult(Of CheckFimpDocRecordExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_file_path)
		Return CType(result.ReturnValue,ISingleResult(Of CheckFimpDocRecordExistsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpDocRecords")>  _
	Public Function GetFimpDocRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal incident_section As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal section_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_doc)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_section, section_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_doc))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpDocRecord")>  _
	Public Function InsertFimpDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal incident_section As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal section_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal original_file_path As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal icon_description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal file_size As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_section, section_id, original_file_path, icon_description, file_size)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpDocList")>  _
	Public Function GetFimpDocList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal incident_section As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal section_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_doc)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_section, section_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_doc))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpCommunicationRecord")>  _
	Public Function DeleteFimpCommunicationRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpCommunicationRecords")>  _
	Public Function GetFimpCommunicationRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal incident_section As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal section_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_communication)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_section, section_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_communication))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpCommunicationRecord")>  _
	Public Function InsertFimpCommunicationRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal incident_section As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal section_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal subject As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal opened_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal opened_by As String) As ISingleResult(Of InsertFimpCommunicationRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_section, section_id, subject, opened_datetime, opened_by)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFimpCommunicationRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpCommunicationClosedDate")>  _
	Public Function UpdateFimpCommunicationClosedDate(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal closed_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal closed_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, closed_datetime, closed_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpCommunicationLogItem")>  _
	Public Function DeleteFimpCommunicationLogItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpCommunicationLogItems")>  _
	Public Function GetFimpCommunicationLogItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal communication_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_communication_log)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), communication_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_communication_log))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpCommunicationLogItem")>  _
	Public Function InsertFimpCommunicationLogItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal communication_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal message_text As String) As ISingleResult(Of InsertFimpCommunicationLogItemResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), communication_rec_id, message_text)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFimpCommunicationLogItemResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpCommunicationLogItem")>  _
	Public Function UpdateFimpCommunicationLogItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal message_text As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, message_text)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteFimpContributingFactorRecord")>  _
	Public Function DeleteFimpContributingFactorRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpContributingFactorRecord")>  _
	Public Function InsertFimpContributingFactorRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal contributing_factor As String) As ISingleResult(Of InsertFimpContributingFactorRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), root_cause_rec_id, contributing_factor)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFimpContributingFactorRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpContributingFactorRecord")>  _
	Public Function UpdateFimpContributingFactorRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal contributing_factor As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, contributing_factor)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpContributingFactorRecords")>  _
	Public Function GetFimpContributingFactorRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_contributing_factor)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), root_cause_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_contributing_factor))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetPmPointCalculationTriggerRecords")>  _
	Public Function GetAssetPmPointCalculationTriggerRecords() As ISingleResult(Of GetAssetPmPointCalculationTriggerRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetPmPointCalculationTriggerRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckDispPjbReferenceIsValid")>  _
	Public Function CheckDispPjbReferenceIsValid(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal referenced_disp_id As System.Nullable(Of Integer)) As ISingleResult(Of CheckDispPjbReferenceIsValidResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, referenced_disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckDispPjbReferenceIsValidResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPerfParameters")>  _
	Public Function GetDispPerfParameters(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal service_ids As String) As ISingleResult(Of GetDispPerfParametersResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, service_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPerfParametersResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AddFimpIncidentToCallSheet")>  _
	Public Function AddFimpIncidentToCallSheet(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, incident_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RemoveFimpIncidentFromCallSheet")>  _
	Public Function RemoveFimpIncidentFromCallSheet(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetSubassemblyItems")>  _
	Public Function GetDispAssetSubassemblyItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal parent_asset_id As String) As ISingleResult(Of GetDispAssetSubassemblyItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, parent_asset_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispAssetSubassemblyItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPerfParameterTypeRecords")>  _
	Public Function GetPerfParameterTypeRecords() As ISingleResult(Of perf_parameter_type)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of perf_parameter_type))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertPerfParameterTypeRecord")>  _
	Public Function InsertPerfParameterTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal param_text As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal response_type_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal add_to_stage_report_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), param_text, response_type_id, add_to_stage_report_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdatePerfParameterTypeRecord")>  _
	Public Function UpdatePerfParameterTypeRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal param_text As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal response_type_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal add_to_stage_report_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, param_text, response_type_id, add_to_stage_report_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPerfParameterTypeList")>  _
	Public Function GetPerfParameterTypeList() As ISingleResult(Of GetPerfParameterTypeListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPerfParameterTypeListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPerfParameterResponseTypes")>  _
	Public Function GetPerfParameterResponseTypes() As ISingleResult(Of GetPerfParameterResponseTypesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPerfParameterResponseTypesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispPumpDownRateRecord")>  _
	Public Function DeleteDispPumpDownRateRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPumpDownRateRecords")>  _
	Public Function GetDispPumpDownRateRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_pump_down_rate)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_pump_down_rate))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispPumpDownRateRecord")>  _
	Public Function InsertDispPumpDownRateRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rate As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, rate, pressure)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispPumpDownRateRecord")>  _
	Public Function UpdateDispPumpDownRateRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rate As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, rate, pressure)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispCompanyMan")>  _
	Public Function GetDispCompanyMan(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispCompanyManResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispCompanyManResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCountyList")>  _
	Public Function GetCountyList() As ISingleResult(Of GetCountyListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetCountyListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoQuoteExportData")>  _
	Public Function GetFsoQuoteExportData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFsoQuoteExportDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoQuoteExportDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckDupAssetPmPointCalculationConfigRecord")>  _
	Public Function CheckDupAssetPmPointCalculationConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal attribute As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal trigger_rec_id As System.Nullable(Of Byte)) As ISingleResult(Of CheckDupAssetPmPointCalculationConfigRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), series_id, attribute, trigger_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckDupAssetPmPointCalculationConfigRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetPmPointCalculationConfigRecord")>  _
	Public Function DeleteAssetPmPointCalculationConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal original_series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal original_attribute As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal original_trigger_rec_id As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_series_id, original_attribute, original_trigger_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetPmPointCalculationConfigRecord")>  _
	Public Function InsertAssetPmPointCalculationConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal attribute As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal trigger_rec_id As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal function_rec_id As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal multiplicative As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal exponent As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal additive As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal spec_value As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal over_spec_points As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal value_range_low As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal value_range_high As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal additional_criteria As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), series_id, attribute, trigger_rec_id, function_rec_id, multiplicative, exponent, additive, spec_value, over_spec_points, value_range_low, value_range_high, additional_criteria, inactive_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetPmPointCalculationConfigRecord")>  _
	Public Function UpdateAssetPmPointCalculationConfigRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal attribute As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal trigger_rec_id As System.Nullable(Of Byte),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal function_rec_id As System.Nullable(Of Byte),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal multiplicative As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal exponent As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal additive As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal spec_value As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal over_spec_points As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal value_range_low As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal value_range_high As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal additional_criteria As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal original_series_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal original_attribute As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal original_trigger_rec_id As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), series_id, attribute, trigger_rec_id, function_rec_id, multiplicative, exponent, additive, spec_value, over_spec_points, value_range_low, value_range_high, additional_criteria, inactive_flag, original_series_id, original_attribute, original_trigger_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetForecastSummary")>  _
	Public Function GetAssetForecastSummary(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of asset_forecast_summary)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of asset_forecast_summary))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateOrUpdateAssetForecastSummary")>  _
	Public Function CreateOrUpdateAssetForecastSummary(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_end As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal loadout_start_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal loadout_end_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal asset_order_required_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal asset_forecast_exists_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loadout_status As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal asset_order_exists_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, approx_start, approx_end, loadout_start_datetime, loadout_end_datetime, asset_order_required_flag, asset_forecast_exists_flag, loadout_status, asset_order_exists_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispEnvironmentRecord")>  _
	Public Function GetDispEnvironmentRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_environment)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_environment))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispFluidRecord")>  _
	Public Function GetDispFluidRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_fluid)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_fluid))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispFluidRecord")>  _
	Public Function UpdateDispFluidRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_source As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_info_source As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_sec_lc_material As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal fluid_last_circulation_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_weight As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_specific_gravity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal fluid_level As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_filt_cake As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_loss As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_chlorides As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_calcium As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rm As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rm_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmf As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmf_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmc As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmc_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmbt As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmbt_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_ph As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_co2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_viscosity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_gels_s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_gels_m As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_pv As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_vp As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2o_percent_1 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2o_percent_2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_sand As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_solids As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rugosity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_washouts As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_ovalness As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_corrections As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_mud_loss As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_barites As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fluid_type, fluid_source, fluid_info_source, fluid_sec_lc_material, fluid_last_circulation_datetime, fluid_weight, fluid_specific_gravity, fluid_level, fluid_filt_cake, fluid_loss, fluid_chlorides, fluid_calcium, fluid_rm, fluid_rm_at, fluid_rmf, fluid_rmf_at, fluid_rmc, fluid_rmc_at, fluid_rmbt, fluid_rmbt_at, fluid_ph, fluid_h2s, fluid_co2, fluid_viscosity, fluid_gels_s, fluid_gels_m, fluid_pv, fluid_vp, fluid_h2o_percent_1, fluid_h2o_percent_2, fluid_sand, fluid_solids, fluid_rugosity, fluid_washouts, fluid_ovalness, fluid_corrections, fluid_mud_loss, fluid_barites)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispUnitRecord")>  _
	Public Function GetDispUnitRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_unit)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_unit))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispUnitRecord")>  _
	Public Function UpdateDispUnitRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal truck_start_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal truck_end_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal aux_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal aux_unit_start_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal aux_unit_end_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal remote_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_1_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_1_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_1_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_1_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_1_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_splice1_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_splice2_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_2_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_2_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_2_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_2_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_2_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_splice1_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_splice2_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_3_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_3_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_3_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_3_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_3_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_splice1_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_splice2_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(256)")> ByVal unit_comment As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, truck, truck_start_hours, truck_end_hours, aux_unit, aux_unit_start_hours, aux_unit_end_hours, remote_unit, cable_1_id, cable_1_type, cable_1_start_length, cable_1_end_length, cable_1_tension, cable_1_magnetic_marks, cable_1_sheave_od, cable_1_flow_tube_size, cable_1_splice1_depth, cable_1_splice2_depth, cable_2_id, cable_2_type, cable_2_start_length, cable_2_end_length, cable_2_tension, cable_2_magnetic_marks, cable_2_sheave_od, cable_2_flow_tube_size, cable_2_splice1_depth, cable_2_splice2_depth, cable_3_id, cable_3_type, cable_3_start_length, cable_3_end_length, cable_3_tension, cable_3_magnetic_marks, cable_3_sheave_od, cable_3_flow_tube_size, cable_3_splice1_depth, cable_3_splice2_depth, unit_comment)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispEnvironmentRecord")>  _
	Public Function UpdateDispEnvironmentRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal rec_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal operation_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal environment_market_code As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal rig_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal well_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal acquisition_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal security_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal prospect_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal depth_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal hole_size_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal density_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal temperature_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal weight_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal concentration_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal length_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal distance_measurement_unit As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, dist_id, rec_by, operation_market_code, environment_market_code, rig_type_market_code, service_type_market_code, well_type_market_code, acquisition_market_code, security_market_code, prospect_market_code, depth_measurement_unit, hole_size_measurement_unit, density_measurement_unit, temperature_measurement_unit, weight_measurement_unit, concentration_measurement_unit, currency_measurement_unit, length_measurement_unit, distance_measurement_unit)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispEquipmentStatus")>  _
	Public Function UpdateDispEquipmentStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertHistDispRecord")>  _
	Public Function InsertHistDispRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal trxn_type As System.Nullable(Of Char)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, trxn_type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpExportDetails")>  _
	Public Function UpdateFimpExportDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal exported_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal export_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, exported_flag, export_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpExportId")>  _
	Public Function GetFimpExportId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFimpExportIdResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFimpExportIdResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPerfIntervalPolarityList")>  _
	Public Function GetPerfIntervalPolarityList() As ISingleResult(Of GetPerfIntervalPolarityListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPerfIntervalPolarityListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispPerfResponsesUnmatchedToSvcsReq")>  _
	Public Function DeleteDispPerfResponsesUnmatchedToSvcsReq(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispPerfResponse")>  _
	Public Function DeleteDispPerfResponse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPerfResponsePrintData")>  _
	Public Function GetDispPerfResponsePrintData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal zone As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPerfResponsePrintDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, zone)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPerfResponsePrintDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPerfResponses")>  _
	Public Function GetDispPerfResponses(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_perf_response)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_perf_response))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispPerfResponse")>  _
	Public Function InsertDispPerfResponse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal param_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal zone As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal response_data As String) As ISingleResult(Of InsertDispPerfResponseResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, param_id, zone, response_data)
		Return CType(result.ReturnValue,ISingleResult(Of InsertDispPerfResponseResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispPerfResponse")>  _
	Public Function UpdateDispPerfResponse(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal zone As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal response_data As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, zone, response_data)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRigRecords")>  _
	Public Function GetRigRecords() As ISingleResult(Of GetRigRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetRigRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPerfParameterRecords")>  _
	Public Function GetPerfParameterRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As ISingleResult(Of perf_parameter)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), inactive_flag)
		Return CType(result.ReturnValue,ISingleResult(Of perf_parameter))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertPerfParameterRecord")>  _
	Public Function InsertPerfParameterRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal param_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sequence_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal response_meta_data As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal service_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), param_type_id, sequence_number, response_meta_data, service_ids, inactive_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdatePerfParameterRecord")>  _
	Public Function UpdatePerfParameterRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal param_type_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sequence_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal response_meta_data As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal service_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, param_type_id, sequence_number, response_meta_data, service_ids, inactive_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPjbQuestionRecords")>  _
	Public Function GetDispPjbQuestionRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal territory As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal subsection_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal complexity_types As String) As ISingleResult(Of GetDispPjbQuestionRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl, territory, subsection_ids, complexity_types)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPjbQuestionRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchLengthUnit")>  _
	Public Function GetDispatchLengthUnit(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispatchLengthUnitResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchLengthUnitResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetMultiSelectList")>  _
	Public Function GetDispAssetMultiSelectList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal current_plant_id As String) As ISingleResult(Of GetDispAssetMultiSelectListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), current_plant_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispAssetMultiSelectListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetsByAssetGroupId")>  _
	Public Function GetDispAssetsByAssetGroupId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal group_ids As String) As ISingleResult(Of GetDispAssetsByAssetGroupIdResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), group_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispAssetsByAssetGroupIdResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetsByImportedAssetIds")>  _
	Public Function GetDispAssetsByImportedAssetIds(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal asset_id_list As String) As ISingleResult(Of GetDispAssetsByImportedAssetIdsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), asset_id_list)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispAssetsByImportedAssetIdsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssetsToCopy")>  _
	Public Function GetDispAssetsToCopy(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispAssetsToCopyResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispAssetsToCopyResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAssets")>  _
	Public Function GetDispAssets(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_asset)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_asset))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertOrUpdateDispAsset")>  _
	Public Function InsertOrUpdateDispAsset( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal avail_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal maintenance_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal lost_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal down_hole_tool_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pm_points As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal over_pm_pt_thresh_approval_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal over_pm_pt_thresh_approver As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal pm1_approved_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal pm1_approved_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal verified_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal verified_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal average_drill_time As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal average_core_length As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cores_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer)) As ISingleResult(Of InsertOrUpdateDispAssetResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, asset_id, avail_id, maintenance_desc, lost_time_hours, down_hole_tool_flag, pm_points, over_pm_pt_thresh_approval_flag, over_pm_pt_thresh_approver, pm1_approved_flag, pm1_approved_by, verified_flag, verified_by, average_drill_time, average_core_length, core_requests, core_attempts, cores_sold, row_number)
		Return CType(result.ReturnValue,ISingleResult(Of InsertOrUpdateDispAssetResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispPerfRecord")>  _
	Public Function UpdateDispPerfRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal offset_to_perf_stop_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal offset_to_perf_max_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal perf_cluster_spacing As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal perf_stage_spacing As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal gun_loading_complete_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal gun_loading_complete_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal gun_loader As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, offset_to_perf_stop_depth, offset_to_perf_max_depth, perf_cluster_spacing, perf_stage_spacing, gun_loading_complete_flag, gun_loading_complete_datetime, gun_loader)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchSoldToCompanySelectionList")>  _
	Public Function GetDispatchSoldToCompanySelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String) As ISingleResult(Of GetDispatchSoldToCompanySelectionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), oilcomp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchSoldToCompanySelectionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispWellDataRecord")>  _
	Public Function GetDispWellDataRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_well_data)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_well_data))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispWellDataRecord")>  _
	Public Function UpdateDispWellDataRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal kelly_bushing_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal rotary_table_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal drill_floor_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal rams_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal casing_head_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal ground_level_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal mean_sea_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal sea_floor_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal perm_datum As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal perm_datum_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal driller_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal wireline_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wireline_zero_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal current_driller_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal driller_td As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wireline_td As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal kop_start As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal kop_30deg As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal kop_60deg As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal kop_90deg As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal top_of_pbr As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal marker_joint As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal true_vertical_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal deviation As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal dog_leg_severity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal h2s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal co2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal surface_temp As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal bht As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wellhead_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_overbalance_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal run_number As System.Nullable(Of Byte),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal distance_to_well As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, kelly_bushing_depth, rotary_table_depth, drill_floor_depth, rams_depth, casing_head_depth, ground_level_depth, mean_sea_depth, sea_floor_depth, perm_datum, perm_datum_depth, driller_zero, wireline_zero, wireline_zero_depth, current_driller_depth, driller_td, wireline_td, kop_start, kop_30deg, kop_60deg, kop_90deg, top_of_pbr, marker_joint, true_vertical_depth, deviation, dog_leg_severity, h2s, co2, surface_temp, bht, wellhead_pressure, max_pressure, max_overbalance_pressure, run_number, distance_to_well)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispTimeManagementRecord")>  _
	Public Function GetDispTimeManagementRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_time_management)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_time_management))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispTimeManagementRecord")>  _
	Public Function UpdateDispTimeManagementRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_on_loc_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_loc_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_returned_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_on_loc_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_started_job_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_finished_job_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_loc_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_returned_datetime As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, equipment_left_datetime, equipment_on_loc_datetime, equipment_left_loc_datetime, equipment_returned_datetime, crew_left_datetime, crew_on_loc_datetime, crew_started_job_datetime, crew_finished_job_datetime, crew_left_loc_datetime, crew_returned_datetime)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetXrefDispPerfImportItems")>  _
	Public Function GetXrefDispPerfImportItems() As ISingleResult(Of GetXrefDispPerfImportItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetXrefDispPerfImportItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetPmPointCalculationTriggerDispFields")>  _
	Public Function GetAssetPmPointCalculationTriggerDispFields() As ISingleResult(Of GetAssetPmPointCalculationTriggerDispFieldsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetPmPointCalculationTriggerDispFieldsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckDispConfigSectionExists")>  _
	Public Function CheckDispConfigSectionExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal section_id As String) As ISingleResult(Of CheckDispConfigSectionExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), section_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckDispConfigSectionExistsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispConfigSectionRecord")>  _
	Public Function DeleteDispConfigSectionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal original_section_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), original_section_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispConfigSectionRecords")>  _
	Public Function GetDispConfigSectionRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal include_inactive As System.Nullable(Of Boolean)) As ISingleResult(Of disp_config_section)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), include_inactive)
		Return CType(result.ReturnValue,ISingleResult(Of disp_config_section))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispConfigSectionRecord")>  _
	Public Function InsertDispConfigSectionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal section_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sequence_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal psl_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), section_id, sequence_number, inactive_flag, psl_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispConfigSectionRecord")>  _
	Public Function UpdateDispConfigSectionRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal section_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal original_section_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sequence_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inactive_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal psl_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), section_id, original_section_id, sequence_number, inactive_flag, psl_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispConfigSectionTypes")>  _
	Public Function GetDispConfigSectionTypes() As ISingleResult(Of GetDispConfigSectionTypesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetDispConfigSectionTypesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispConfigSections")>  _
	Public Function GetDispConfigSections() As ISingleResult(Of GetDispConfigSectionsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetDispConfigSectionsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispTreeDataRecord")>  _
	Public Function GetDispTreeDataRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_tree_data)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_tree_data))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispTreeDataRecord")>  _
	Public Function UpdateDispTreeDataRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal tubing_hanger_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_2 As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_3 As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal top_connection As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal blind_rams As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal work_spool As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal slant_well As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal special_instructions As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, tubing_hanger_type, tree_length_2, tree_length_3, top_connection, blind_rams, work_spool, slant_well, special_instructions)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchRunRecords")>  _
	Public Function GetDispatchRunRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_run)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_run))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispRunRecord")>  _
	Public Function InsertDispRunRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op_num As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip_num As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_order As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal in_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal out_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal interval_top_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal interval_bottom_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fail_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal operating_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal lost_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal corrected_lost_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal corrected_lost_time_reason As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal standby_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(256)")> ByVal comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_cuts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal fishing_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal temperature As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal jarring_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal service_list As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal employee_ids As String) As ISingleResult(Of InsertDispRunRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, op_num, trip_num, run_order, in_datetime, out_datetime, interval_top_depth, interval_bottom_depth, fail_code, operating_time_hours, lost_time_hours, corrected_lost_time_hours, corrected_lost_time_reason, standby_time_hours, comment, cable_id, cable_tension, cable_cuts, fishing_flag, temperature, pressure, jarring_count, service_type, service_list, employee_ids)
		Return CType(result.ReturnValue,ISingleResult(Of InsertDispRunRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispRunRecord")>  _
	Public Function UpdateDispRunRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op_num As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip_num As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_order As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal in_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal out_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal interval_top_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal interval_bottom_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fail_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal operating_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal lost_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal corrected_lost_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal corrected_lost_time_reason As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal standby_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(256)")> ByVal comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_cuts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal fishing_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal temperature As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal jarring_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal service_list As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal employee_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, op_num, trip_num, run_order, in_datetime, out_datetime, interval_top_depth, interval_bottom_depth, fail_code, operating_time_hours, lost_time_hours, corrected_lost_time_hours, corrected_lost_time_reason, standby_time_hours, comment, cable_id, cable_tension, cable_cuts, fishing_flag, temperature, pressure, jarring_count, service_type, service_list, employee_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispJobColorCode")>  _
	Public Function UpdateDispJobColorCode(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal job_color_code As System.Nullable(Of Char)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, job_color_code)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPerfParameterList")>  _
	Public Function GetPerfParameterList() As ISingleResult(Of GetPerfParameterListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPerfParameterListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispEquipment")>  _
	Public Function DeleteDispEquipment(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, asset_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispEquipmentUtilization")>  _
	Public Function DeleteDispEquipmentUtilization(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_asset_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal column_order As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_asset_rec_id, column_order)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispEquipmentSubassembly")>  _
	Public Function DeleteDispEquipmentSubassembly(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_asset_parent_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, disp_asset_parent_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispEquipment")>  _
	Public Function GetDispEquipment(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_equipment)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_equipment))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispEquipmentUtilization")>  _
	Public Function GetDispEquipmentUtilization(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_equipment_utilization)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_equipment_utilization))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispEquipmentAssetIdSelectionList")>  _
	Public Function GetDispEquipmentAssetIdSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal current_plant_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String) As ISingleResult(Of disp_equipment_selection)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), current_plant_id, series_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_equipment_selection))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispEquipmentSubassemblyItem")>  _
	Public Function InsertDispEquipmentSubassemblyItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_asset_parent_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pm_points As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_asset_parent_rec_id, asset_id, pm_points)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispEquipment")>  _
	Public Function InsertDispEquipment( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal assembly_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal avail_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal maintenance_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal material_serial_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_ship_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal material_ship_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_return_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal material_return_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pm_points As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal over_pm_pt_thresh_approved_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal over_pm_pt_thresh_approved_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal pm1_approved_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal pm1_approved_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal verified_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal verified_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal lost_time_hours As System.Nullable(Of Single)) As ISingleResult(Of InsertDispEquipmentResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, row_number, assembly_name, series_id, asset_id, avail_id, maintenance_desc, material_rec_id, material_serial_number, material_ship_quantity, material_ship_date, material_return_quantity, material_return_date, pm_points, over_pm_pt_thresh_approved_flag, over_pm_pt_thresh_approved_by, pm1_approved_flag, pm1_approved_by, verified_flag, verified_by, lost_time_hours)
		Return CType(result.ReturnValue,ISingleResult(Of InsertDispEquipmentResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispEquipmentUtilization")>  _
	Public Function InsertDispEquipmentUtilization(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_asset_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal column_order As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_asset_rec_id, column_order, op, trip)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispEquipment")>  _
	Public Function UpdateDispEquipment( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal assembly_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal original_asset_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal avail_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_avail_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal maintenance_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal material_serial_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_ship_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal material_ship_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal material_return_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal material_return_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pm_points As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal over_pm_pt_thresh_approved_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal over_pm_pt_thresh_approved_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal pm1_approved_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal pm1_approved_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal verified_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal verified_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal lost_time_hours As System.Nullable(Of Single)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, rec_id, row_number, assembly_name, asset_id, original_asset_id, avail_id, original_avail_id, maintenance_desc, material_serial_number, material_ship_quantity, material_ship_date, material_return_quantity, material_return_date, pm_points, over_pm_pt_thresh_approved_flag, over_pm_pt_thresh_approved_by, pm1_approved_flag, pm1_approved_by, verified_flag, verified_by, lost_time_hours)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispEquipmentUtilization")>  _
	Public Function UpdateDispEquipmentUtilization(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_asset_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal column_order As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal trip As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_asset_rec_id, column_order, op, trip)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispGeoscienceRecord")>  _
	Public Function GetDispGeoscienceRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_geoscience)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_geoscience))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispGeoscienceRecord")>  _
	Public Function UpdateDispGeoscienceRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal well_link_url As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal rush_processing_required_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal approved_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal black_white_prints_required As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal color_prints_required As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal compact_discs_required As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal processing_type_required As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal processing_complete_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal geoscience_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal comments As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, well_link_url, rush_processing_required_flag, approved_flag, black_white_prints_required, color_prints_required, compact_discs_required, processing_type_required, processing_complete_flag, geoscience_revenue, comments)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispGeoscienceRevenue")>  _
	Public Function UpdateDispGeoscienceRevenue(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal geoscience_revenue As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, geoscience_revenue)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoAdditionalChargeItemsByPressure")>  _
	Public Function GetFsoAdditionalChargeItemsByPressure(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal depth_unit As String) As ISingleResult(Of GetFsoAdditionalChargeItemsByPressureResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, price_schedule_id, pressure, depth_unit)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoAdditionalChargeItemsByPressureResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoAdditionalChargeItemsByTemperature")>  _
	Public Function GetFsoAdditionalChargeItemsByTemperature(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal temperature As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal depth_unit As String) As ISingleResult(Of GetFsoAdditionalChargeItemsByTemperatureResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, price_schedule_id, temperature, depth_unit)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoAdditionalChargeItemsByTemperatureResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoAdditionalChargesByLookupItem")>  _
	Public Function GetFsoAdditionalChargesByLookupItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal depth As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal area As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal temperature As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal depth_unit As String) As ISingleResult(Of GetFsoAdditionalChargesByLookupItemResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, price_schedule_id, depth, area, pressure, temperature, depth_unit)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoAdditionalChargesByLookupItemResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpRecord")>  _
	Public Function GetFimpRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_rec)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_rec))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpPoncRecords")>  _
	Public Function GetFimpPoncRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFimpPoncRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFimpPoncRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpPoncRecord")>  _
	Public Function InsertFimpPoncRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal category_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal ponc_amount As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id, category_rec_id, ponc_amount)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpPoncRecord")>  _
	Public Function UpdateFimpPoncRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal category_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal ponc_amount As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id, category_rec_id, ponc_amount)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispStandbyItems")>  _
	Public Function GetDispStandbyItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_standby_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_standby_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispStandbyItem")>  _
	Public Function InsertDispStandbyItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal charge_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal standby_type_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal standby_amount As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal standby_unit As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, charge_type, standby_type_rec_id, standby_amount, standby_unit)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispStandbyItem")>  _
	Public Function UpdateDispStandbyItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal charge_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal standby_type_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal standby_amount As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal standby_unit As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, charge_type, standby_type_rec_id, standby_amount, standby_unit)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoServiceSelectionList")>  _
	Public Function GetFsoServiceSelectionList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal material As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal unit As String) As ISingleResult(Of fso_multi_select_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), price_schedule_id, gpi, description, name, material, unit)
		Return CType(result.ReturnValue,ISingleResult(Of fso_multi_select_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRtRigGroupList")>  _
	Public Function GetRtRigGroupList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal country_codes As String) As ISingleResult(Of GetRtRigGroupListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), country_codes)
		Return CType(result.ReturnValue,ISingleResult(Of GetRtRigGroupListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpRecord")>  _
	Public Function InsertFimpRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal incident_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal job_stage_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal owning_group As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal case_worker_user_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal customer_reference_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal customer_closed_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal subject As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1500)")> ByVal problem_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1500)")> ByVal quick_fix As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal operating_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal lost_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal event_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal event_severity_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal event_likelihood_id As System.Nullable(Of Char),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal event_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal event_admin_comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_group_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failed_item_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal failure_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_mechanism_category_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_mechanism_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal failure_mechanism_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal failure_detail_admin_comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal incident_completed_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal incident_completed_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal irb_scheduled_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal irb_completed_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal irb_approved_by As String) As ISingleResult(Of InsertFimpRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_datetime, disp_id, dist_id, job_stage_id, owning_group, case_worker_user_id, customer_reference_number, customer_closed_date, subject, problem_description, quick_fix, run_rec_id, operating_time_hours, lost_time_hours, asset_id, event_id, event_severity_id, event_likelihood_id, event_desc, event_admin_comments, failure_group_id, failed_item_id, failure_desc, failure_mechanism_category_id, failure_mechanism_id, failure_mechanism_desc, failure_detail_admin_comments, incident_completed_datetime, incident_completed_by, irb_scheduled_date, irb_completed_date, irb_approved_by)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFimpRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpRecord")>  _
	Public Function UpdateFimpRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal incident_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal job_stage_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal owning_group As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal case_worker_user_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal customer_reference_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal customer_closed_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal subject As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1500)")> ByVal problem_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1500)")> ByVal quick_fix As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal run_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal operating_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal lost_time_hours As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal event_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal event_severity_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal event_likelihood_id As System.Nullable(Of Char),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal event_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal event_admin_comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_group_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failed_item_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal failure_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_mechanism_category_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal failure_mechanism_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal failure_mechanism_desc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal failure_detail_admin_comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal incident_completed_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal incident_completed_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal irb_scheduled_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal irb_completed_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal irb_approved_by As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, incident_datetime, dist_id, job_stage_id, owning_group, case_worker_user_id, customer_reference_number, customer_closed_date, subject, problem_description, quick_fix, run_rec_id, operating_time_hours, lost_time_hours, asset_id, event_id, event_severity_id, event_likelihood_id, event_desc, event_admin_comments, failure_group_id, failed_item_id, failure_desc, failure_mechanism_category_id, failure_mechanism_id, failure_mechanism_desc, failure_detail_admin_comments, incident_completed_by, incident_completed_datetime, irb_scheduled_date, irb_completed_date, irb_approved_by)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetExchangeRates")>  _
	Public Function GetExchangeRates() As ISingleResult(Of GetExchangeRatesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetExchangeRatesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispJobApprovedState")>  _
	Public Function UpdateDispJobApprovedState(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal job_approved_state As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, job_approved_state)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispJobStatus")>  _
	Public Function GetDispJobStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispJobStatusResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispJobStatusResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPerfRecord")>  _
	Public Function GetDispPerfRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_perf)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_perf))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGpiList")>  _
	Public Function GetGpiList(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String) As ISingleResult(Of gpi)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), price_schedule_id)
		Return CType(result.ReturnValue,ISingleResult(Of gpi))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetDocRecord")>  _
	Public Function DeleteAssetDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAccountManagerUserRoleList")>  _
	Public Function GetAccountManagerUserRoleList() As ISingleResult(Of GetAccountManagerUserRoleListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAccountManagerUserRoleListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserAssignedIncidents")>  _
	Public Function GetAppUserAssignedIncidents() As ISingleResult(Of GetAppUserAssignedIncidentsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAppUserAssignedIncidentsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserAssignedJobs")>  _
	Public Function GetAppUserAssignedJobs() As ISingleResult(Of GetAppUserAssignedJobsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAppUserAssignedJobsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserDistrictKpis")>  _
	Public Function GetAppUserDistrictKpis() As ISingleResult(Of GetAppUserDistrictKpisResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAppUserDistrictKpisResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserKpis")>  _
	Public Function GetAppUserKpis() As ISingleResult(Of GetAppUserKpisResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetAppUserKpisResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserRoleShortcutConfig")>  _
	Public Function GetAppUserRoleShortcutConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal user_role As String) As ISingleResult(Of GetAppUserRoleShortcutConfigResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_role)
		Return CType(result.ReturnValue,ISingleResult(Of GetAppUserRoleShortcutConfigResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserShortcutConfig")>  _
	Public Function GetAppUserShortcutConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal user_id As String) As ISingleResult(Of GetAppUserShortcutConfigResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetAppUserShortcutConfigResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetKpiStatusList")>  _
	Public Function GetKpiStatusList() As ISingleResult(Of GetKpiStatusListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetKpiStatusListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetKpiTypeList")>  _
	Public Function GetKpiTypeList() As ISingleResult(Of GetKpiTypeListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetKpiTypeListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetKpiConfigRecords")>  _
	Public Function GetKpiConfigRecords() As ISingleResult(Of kpi_config)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of kpi_config))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteKpiConfigRecord")>  _
	Public Function DeleteKpiConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertKpiConfigRecord")>  _
	Public Function InsertKpiConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal kpi_type_id As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,2)")> ByVal threshold As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal kpi_status_id As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), kpi_type_id, threshold, kpi_status_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAppUserRoleShortcutConfig")>  _
	Public Function UpdateAppUserRoleShortcutConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal user_role As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal shortcut_config As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_role, shortcut_config)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAppUserShortcutConfig")>  _
	Public Function UpdateAppUserShortcutConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal shortcut_config As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, shortcut_config)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateKpiConfigRecord")>  _
	Public Function UpdateKpiConfigRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal kpi_type_id As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,2)")> ByVal threshold As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal kpi_status_id As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, kpi_type_id, threshold, kpi_status_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchTubularRecords")>  _
	Public Function GetDispatchTubularRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_tubular)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_tubular))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispTubularRecord")>  _
	Public Function InsertDispTubularRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal tubular_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tubular_size As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tubular_weight As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal tubular_grade As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal thread_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal start_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal end_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal deviation As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal hole_size_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, tubular_type, tubular_size, tubular_weight, tubular_grade, thread_type, start_depth, end_depth, deviation, hole_size_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispTubularRecord")>  _
	Public Function UpdateDispTubularRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal tubular_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tubular_size As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tubular_weight As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal tubular_grade As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal thread_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal start_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal end_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal deviation As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal hole_size_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, tubular_type, tubular_size, tubular_weight, tubular_grade, thread_type, start_depth, end_depth, deviation, hole_size_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateContractInactiveFlag")>  _
	Public Function UpdateContractInactiveFlag(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal contract_inactive_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, contract_inactive_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ConvertTenderToMasterContract")>  _
	Public Function ConvertTenderToMasterContract(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetGpiListByMasterContractFsoRecId")>  _
	Public Function GetGpiListByMasterContractFsoRecId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of gpi)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of gpi))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SAP.GetFsoExportMaterialOverrideRecords")>  _
	Public Function GetFsoExportMaterialOverrideRecords() As ISingleResult(Of fso_export_material_override)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of fso_export_material_override))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SAP.InsertFsoExportMaterialOverrideRecord")>  _
	Public Function InsertFsoExportMaterialOverrideRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal material As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), gpi, psl, service_type, material)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SAP.UpdateFsoExportMaterialOverrideRecord")>  _
	Public Function UpdateFsoExportMaterialOverrideRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal material As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, gpi, psl, service_type, material)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="SAP.DeleteFsoExportMaterialOverrideRecord")>  _
	Public Function DeleteFsoExportMaterialOverrideRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertQuoteRecord")>  _
	Public Function InsertQuoteRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal quote_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal depth_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal logging_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal operation_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,5)")> ByVal exchange_rate As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal uplift As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal net_amount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal discount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal header_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2500)")> ByVal comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal temperature As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal area As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1)")> ByVal contract_type As String) As ISingleResult(Of InsertQuoteRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), quote_number, price_schedule_id, depth_charge_default_quantity, logging_charge_default_quantity, operation_charge_default_quantity, currency, exchange_rate, uplift, net_amount, discount, header_comment, comment, oilcomp_id, sold_to_id, sold_to_address_rec_id, pressure, temperature, area, dist_id, contract_type)
		Return CType(result.ReturnValue,ISingleResult(Of InsertQuoteRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetContractDetails")>  _
	Public Function GetContractDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As ISingleResult(Of contract_detail)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of contract_detail))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateContractDetails")>  _
	Public Function UpdateContractDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal customer_contract_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal contract_expiry_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal contract_base_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal contract_quantity As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal contract_quantity_consumed As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal psl_ids As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, customer_contract_number, contract_expiry_date, contract_base_type, contract_quantity, contract_quantity_consumed, psl_ids)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CopyQuoteRecord")>  _
	Public Function CopyQuoteRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal copy_from_quote_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal copy_to_quote_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal copy_to_dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal copy_to_header_comment As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1)")> ByVal copy_to_contract_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal copying_master_contract_to_quote As System.Nullable(Of Boolean)) As ISingleResult(Of CopyQuoteRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), copy_from_quote_rec_id, copy_to_quote_number, copy_to_dist_id, copy_to_header_comment, copy_to_contract_type, copying_master_contract_to_quote)
		Return CType(result.ReturnValue,ISingleResult(Of CopyQuoteRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFsoRecord")>  _
	Public Function InsertFsoRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal field_ticket_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal fso_type_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal discount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal net_amount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal uplift As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,5)")> ByVal exchange_rate As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2500)")> ByVal comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_field1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_value1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_field2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_value2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal depth_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal logging_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal operation_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal temperature As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal area As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal purchase_order_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal sap_sales_order_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal geoscience_fso_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal linked_to_contract_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of InsertFsoRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, field_ticket_number, fso_type_id, price_schedule_id, dist_id, discount, net_amount, uplift, currency, exchange_rate, comment, custom_field1, custom_value1, custom_field2, custom_value2, depth_charge_default_quantity, logging_charge_default_quantity, operation_charge_default_quantity, oilcomp_id, sold_to_id, sold_to_address_rec_id, pressure, temperature, area, purchase_order_number, sap_sales_order_number, geoscience_fso_flag, linked_to_contract_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFsoRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoRecord")>  _
	Public Function UpdateFsoRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal depth_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal logging_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal operation_charge_default_quantity As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal net_amount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal discount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal uplift As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,5)")> ByVal exchange_rate As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal header_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2500)")> ByVal comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_field1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_value1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_field2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal custom_value2 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal temperature As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal area As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal sap_sales_document_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal purchase_order_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal geoscience_fso_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal linked_to_contract_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, dist_id, price_schedule_id, depth_charge_default_quantity, logging_charge_default_quantity, operation_charge_default_quantity, net_amount, discount, uplift, currency, exchange_rate, header_comment, comment, custom_field1, custom_value1, custom_field2, custom_value2, oilcomp_id, sold_to_id, sold_to_address_rec_id, pressure, temperature, area, sap_sales_document_number, purchase_order_number, geoscience_fso_flag, linked_to_contract_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPersonnelRecords")>  _
	Public Function GetDispPersonnelRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_personnel)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_personnel))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertPSDispPersonnelRecord")>  _
	Public Function InsertPSDispPersonnelRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal employee_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal member_title_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal member_subtitle_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(14)")> ByVal phone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal dispatch_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal wireline_personnel_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal left_for_job As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal returned_from_job As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_personnel_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal remote_engineer_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal job_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,2)")> ByVal operating_time As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal non_productive_time As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal insert_dispatch_personnel_mode As System.Nullable(Of Short)) As ISingleResult(Of InsertPSDispPersonnelRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, employee_id, name, member_title_id, member_subtitle_id, phone, email, dispatch_comment, wireline_personnel_comment, left_for_job, returned_from_job, critical_personnel_flag, remote_engineer_flag, job_count, operating_time, non_productive_time, insert_dispatch_personnel_mode)
		Return CType(result.ReturnValue,ISingleResult(Of InsertPSDispPersonnelRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdatePSDispPersonnelRecord")>  _
	Public Function UpdatePSDispPersonnelRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal employee_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal member_title_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal member_subtitle_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(14)")> ByVal phone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal email As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal dispatch_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(255)")> ByVal wireline_personnel_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal left_for_job As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal returned_from_job As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_personnel_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal remote_engineer_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal job_count As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,2)")> ByVal operating_time As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal non_productive_time As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, disp_id, employee_id, name, member_title_id, member_subtitle_id, phone, email, dispatch_comment, wireline_personnel_comment, left_for_job, returned_from_job, critical_personnel_flag, remote_engineer_flag, job_count, operating_time, non_productive_time)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteContractUserAccessRecord")>  _
	Public Function DeleteContractUserAccessRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal contract_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), contract_rec_id, user_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertContractUserAccessRecord")>  _
	Public Function InsertContractUserAccessRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal contract_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal owner_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), contract_rec_id, user_id, owner_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateContractUserAccessRecord")>  _
	Public Function UpdateContractUserAccessRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal contract_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal owner_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), contract_rec_id, user_id, owner_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispTightHoleUserAccessRecords")>  _
	Public Function GetDispTightHoleUserAccessRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispTightHoleUserAccessRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispTightHoleUserAccessRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetContractUserAccessRecords")>  _
	Public Function GetContractUserAccessRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal contract_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetContractUserAccessRecordsResult1)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), contract_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetContractUserAccessRecordsResult1))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetPmPointCalculationConfigImport")>  _
	Public Function DeleteAssetPmPointCalculationConfigImport() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetPmPointCalculationConfigFromImport")>  _
	Public Function UpdateAssetPmPointCalculationConfigFromImport() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPSLList")>  _
	Public Function GetPSLList() As ISingleResult(Of GetPSLListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetPSLListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEmployeeForecastDisplayConfig")>  _
	Public Function GetEmployeeForecastDisplayConfig() As ISingleResult(Of GetEmployeeForecastDisplayConfigResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetEmployeeForecastDisplayConfigResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEmployeeForecastSelectionList")>  _
	Public Function GetEmployeeForecastSelectionList() As ISingleResult(Of GetEmployeeForecastSelectionListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetEmployeeForecastSelectionListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteContractDocRecord")>  _
	Public Function DeleteContractDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetContractDocRecords")>  _
	Public Function GetContractDocRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal contract_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetContractDocRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), contract_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetContractDocRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertContractDocRecord")>  _
	Public Function InsertContractDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal contract_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal original_file_path As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal icon_description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal document_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal file_size As System.Nullable(Of Single)) As ISingleResult(Of InsertContractDocRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), contract_rec_id, original_file_path, icon_description, document_type, file_size)
		Return CType(result.ReturnValue,ISingleResult(Of InsertContractDocRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateContratDocRecord")>  _
	Public Function UpdateContratDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal document_type As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, document_type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetEmployeeForecastTitleList")>  _
	Public Function GetEmployeeForecastTitleList() As ISingleResult(Of GetEmployeeForecastTitleListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetEmployeeForecastTitleListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoQuoteSummaryReportItems")>  _
	Public Function GetFsoQuoteSummaryReportItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal quote_rec_ids As String) As ISingleResult(Of quote_summary_report_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, quote_rec_ids)
		Return CType(result.ReturnValue,ISingleResult(Of quote_summary_report_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPersonnelAssignedNotificationData")>  _
	Public Function GetDispPersonnelAssignedNotificationData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPersonnelAssignedNotificationDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPersonnelAssignedNotificationDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPersonnelWithApplicableCompetencies")>  _
	Public Function GetDispPersonnelWithApplicableCompetencies(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPersonnelWithApplicableCompetenciesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPersonnelWithApplicableCompetenciesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispEquipmentPmPointIssueDetails")>  _
	Public Function GetDispEquipmentPmPointIssueDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispEquipmentPmPointIssueDetailsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispEquipmentPmPointIssueDetailsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispEquipmentHeaderRecord")>  _
	Public Function GetDispEquipmentHeaderRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_equipment_header)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_equipment_header))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispEquipmentHeaderRecord")>  _
	Public Function UpdateDispEquipmentHeaderRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal equipment_required_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, equipment_required_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAppUserDataGridConfig")>  _
	Public Function GetAppUserDataGridConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal config_type_id As System.Nullable(Of Short)) As ISingleResult(Of GetAppUserDataGridConfigResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, config_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetAppUserDataGridConfigResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAppUserDataGridConfig")>  _
	Public Function DeleteAppUserDataGridConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal config_type_id As System.Nullable(Of Short)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, config_type_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertOrUpdateAppUserDataGridConfig")>  _
	Public Function InsertOrUpdateAppUserDataGridConfig(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal user_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal config_type_id As System.Nullable(Of Short), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal column_config As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user_id, config_type_id, column_config)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispRecordFromDispatchOperationsDashboard")>  _
	Public Function UpdateDispRecordFromDispatchOperationsDashboard(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal job_start_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal job_duration As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal current_driller_depth As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(MAX)")> ByVal spec_req As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, job_start_date, job_duration, current_driller_depth, comments, spec_req)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispStatLostTimeIncidentData")>  _
	Public Function GetDispStatLostTimeIncidentData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispStatLostTimeIncidentDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispStatLostTimeIncidentDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispStatFsoData")>  _
	Public Function GetDispStatFsoData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispStatFsoDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispStatFsoDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispStatQuoteData")>  _
	Public Function GetDispStatQuoteData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispStatQuoteDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispStatQuoteDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispStatAssetSelectionStatus")>  _
	Public Function GetDispStatAssetSelectionStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispStatAssetSelectionStatusResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispStatAssetSelectionStatusResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispStatLqaStatus")>  _
	Public Function GetDispStatLqaStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispStatLqaStatusResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispStatLqaStatusResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispStatEcrmStatus")>  _
	Public Function GetDispStatEcrmStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispStatEcrmStatusResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispStatEcrmStatusResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispGeoscienceServiceItem")>  _
	Public Function InsertDispGeoscienceServiceItem( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal instructions As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal rush_processing_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal job_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal data_qc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal data_received_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal processing_start_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal estimated_delivery_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal processing_complete_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal preliminary_data_complete_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal final_data_complete_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal assigned_to As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal processed_quantity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal include_on_quote_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal manually_selected_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, gpi, instructions, rush_processing_flag, job_type, data_qc, data_received_date, processing_start_date, estimated_delivery_date, processing_complete_date, preliminary_data_complete_date, final_data_complete_date, assigned_to, processed_quantity, include_on_quote_flag, manually_selected_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispGeoscienceServiceItems")>  _
	Public Function GetDispGeoscienceServiceItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispGeoscienceServiceItemsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispGeoscienceServiceItemsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispGeoscienceServiceItem")>  _
	Public Function UpdateDispGeoscienceServiceItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal instructions As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal rush_processing_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal job_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal data_qc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal data_received_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal processing_start_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal estimated_delivery_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal processing_complete_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal preliminary_data_complete_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal final_data_complete_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(200)")> ByVal assigned_to As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal processed_quantity As System.Nullable(Of Single), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal include_on_quote_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, instructions, rush_processing_flag, job_type, data_qc, data_received_date, processing_start_date, estimated_delivery_date, processing_complete_date, preliminary_data_complete_date, final_data_complete_date, assigned_to, processed_quantity, include_on_quote_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchOperationsDashboardPersonnelWithApplicableCompetencies")>  _
	Public Function GetDispatchOperationsDashboardPersonnelWithApplicableCompetencies(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal disp_ids As String) As ISingleResult(Of GetDispatchOperationsDashboardPersonnelWithApplicableCompetenciesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchOperationsDashboardPersonnelWithApplicableCompetenciesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchOperationsDashboardDispIdsByEquipmentPmPointIssues")>  _
	Public Function GetDispatchOperationsDashboardDispIdsByEquipmentPmPointIssues(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal disp_ids As String) As ISingleResult(Of GetDispatchOperationsDashboardDispIdsByEquipmentPmPointIssuesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchOperationsDashboardDispIdsByEquipmentPmPointIssuesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="fimp.GetRootCauseAnalysisSeverityList")>  _
	Public Function GetRootCauseAnalysisSeverityList() As ISingleResult(Of GetRootCauseAnalysisSeverityListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetRootCauseAnalysisSeverityListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFimpRootCauseAnalysisRecord")>  _
	Public Function InsertFimpRootCauseAnalysisRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal immediate_cause_category_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal immediate_cause_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal immediate_cause_desc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_category_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal root_cause_desc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal severity_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal question_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal additional_info As String) As ISingleResult(Of InsertFimpRootCauseAnalysisRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id, immediate_cause_category_id, immediate_cause_id, immediate_cause_desc, root_cause_category_id, root_cause_id, root_cause_desc, severity_id, question_number, comments, additional_info)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFimpRootCauseAnalysisRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpRootCauseAnalysisRecords")>  _
	Public Function GetFimpRootCauseAnalysisRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal incident_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of fimp_root_cause_analysis)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), incident_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of fimp_root_cause_analysis))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFimpRootCauseAnalysisRecord")>  _
	Public Function UpdateFimpRootCauseAnalysisRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal immediate_cause_category_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal immediate_cause_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal immediate_cause_desc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_category_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal root_cause_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal root_cause_desc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal severity_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal question_number As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal reviewed_by As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal reviewed_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal reviewer_comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comments As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal additional_info As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, immediate_cause_category_id, immediate_cause_id, immediate_cause_desc, root_cause_category_id, root_cause_id, root_cause_desc, severity_id, question_number, reviewed_by, reviewed_datetime, reviewer_comments, comments, additional_info)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFimpRecords")>  _
	Public Function GetFimpRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal max_rows As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fracas_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal severity_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal territory As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal case_worker_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal series_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal incident_reported_by As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal incident_reported_start_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal incident_reported_end_datetime As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal include_closed_incidents_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal exclude_incidents_on_job_flag As System.Nullable(Of Boolean)) As ISingleResult(Of GetFimpRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), max_rows, rec_id, fracas_id, severity_ids, territory, dist_id, case_worker_id, series_id, asset_id, incident_reported_by, incident_reported_start_datetime, incident_reported_end_datetime, include_closed_incidents_flag, exclude_incidents_on_job_flag)
		Return CType(result.ReturnValue,ISingleResult(Of GetFimpRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CopyDispatchRecord")>  _
	Public Function CopyDispatchRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl_to As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id_from As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date)) As ISingleResult(Of CopyDispatchRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl_to, disp_id_from, approx_start)
		Return CType(result.ReturnValue,ISingleResult(Of CopyDispatchRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoItems")>  _
	Public Function GetFsoItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_fso_item)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_fso_item))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertFsoItem")>  _
	Public Function InsertFsoItem( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal price_book_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal item As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal bundle_item_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,2)")> ByVal quantity As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal unit_price As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal uplift As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal net_amount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal discount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal override_unit_price As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sap_export_row_number As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inserted_as_additional_charge_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal group_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal custom_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal line_item_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal ship_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal return_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal upsell_item_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal copied_from_contract_flag As System.Nullable(Of Boolean)) As ISingleResult(Of InsertFsoItemResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, price_book_rec_id, price_schedule_id, gpi, item, bundle_item_rec_id, quantity, unit_price, uplift, net_amount, discount, row_number, override_unit_price, sap_export_row_number, inserted_as_additional_charge_flag, group_name, custom_description, line_item_comment, ship_datetime, return_datetime, upsell_item_flag, copied_from_contract_flag)
		Return CType(result.ReturnValue,ISingleResult(Of InsertFsoItemResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoItem")>  _
	Public Function UpdateFsoItem( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal bundle_item_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,2)")> ByVal quantity As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal net_amount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal discount As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal row_number As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal unit_price As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal override_unit_price As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal uplift As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sap_export_row_number As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal group_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal custom_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal line_item_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal ship_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal return_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal upsell_item_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, bundle_item_rec_id, quantity, net_amount, discount, row_number, unit_price, override_unit_price, uplift, sap_export_row_number, group_name, custom_description, line_item_comment, ship_datetime, return_datetime, upsell_item_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoExportLineItemData")>  _
	Public Function GetFsoExportLineItemData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal fso_exported_rec_ids As String) As ISingleResult(Of GetFsoExportLineItemDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_exported_rec_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoExportLineItemDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoServiceSelectionListByFsoRecId")>  _
	Public Function GetFsoServiceSelectionListByFsoRecId(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal material As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal unit As String) As ISingleResult(Of GetFsoServiceSelectionListByFsoRecIdResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, gpi, description, name, material, unit)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoServiceSelectionListByFsoRecIdResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ImportContractRecord")>  _
	Public Function ImportContractRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal quote_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1)")> ByVal contract_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal header_comment As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency As String) As ISingleResult(Of ImportContractRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), quote_number, contract_type, dist_id, price_schedule_id, header_comment, sold_to_id, currency)
		Return CType(result.ReturnValue,ISingleResult(Of ImportContractRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ImportContractItem")>  _
	Public Function ImportContractItem(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal price_schedule_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal gpi As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal item As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,2)")> ByVal quantity As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal unit_price As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal override_unit_price As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal uplift As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal net_amount As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal discount As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal inserted_as_additional_charge_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal upsell_item_flag As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal group_name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal custom_description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(250)")> ByVal line_item_comment As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, price_schedule_id, gpi, item, quantity, unit_price, override_unit_price, uplift, net_amount, discount, inserted_as_additional_charge_flag, upsell_item_flag, group_name, custom_description, line_item_comment)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispMainRecord")>  _
	Public Function GetDispMainRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal action As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal dispatch_type As String) As ISingleResult(Of disp)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), action, disp_id, dispatch_type)
		Return CType(result.ReturnValue,ISingleResult(Of disp))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispMainRecord")>  _
	Public Function InsertDispMainRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal status As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal firstalert As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal rig As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal rig_phone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal approx_end As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal competitor As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lost_detail_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal lost_notes As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal rec_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal spec_req As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal jsa_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lsd As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal province As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal downhole_lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal downhole_lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal well_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal legal_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal county_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal field As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal api_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal uwi As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_license_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal road_direc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cores_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal samples_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressures_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal disp_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal distdo_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal tubing_hanger_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_3 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal top_connection As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal blind_rams As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal work_spool As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal slant_well As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal special_instructions As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal breakthrough_job_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal dispatch_export_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal dispatch_exported_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_master_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal created_from_well_master_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal well_information_url As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal remote_service_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_engineers_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_operators_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_job_flag As System.Nullable(Of Boolean)) As ISingleResult(Of InsertDispMainRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl, status, firstalert, oilcomp_id, rig, rig_phone, approx_start, approx_end, dist_id, competitor, lost_detail_ids, lost_notes, rec_by, spec_req, jsa_rec_id, lsd, province, lat, lon, downhole_lat, downhole_lon, well_name, legal_description, county_id, field, api_number, uwi, well_license_number, road_direc, core_requests, sample_requests, pressure_requests, core_attempts, sample_attempts, pressure_attempts, cores_sold, samples_sold, pressures_sold, disp_by, distdo_id, comments, tubing_hanger_type, tree_length_2, tree_length_3, top_connection, blind_rams, work_spool, slant_well, special_instructions, breakthrough_job_flag, dispatch_export_datetime, dispatch_exported_by, sold_to_id, sold_to_address_rec_id, well_master_number, created_from_well_master_flag, well_information_url, remote_service_flag, remote_engineers_required, remote_operators_required, critical_job_flag)
		Return CType(result.ReturnValue,ISingleResult(Of InsertDispMainRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispMainRecord")>  _
	Public Function UpdateDispMainRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal status As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal firstalert As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal rig As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal rig_phone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal approx_end As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal competitor As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lost_detail_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal lost_notes As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal rec_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal spec_req As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal jsa_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lsd As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal province As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal downhole_lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal downhole_lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal well_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal legal_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal county_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal field As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal api_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal uwi As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_license_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal road_direc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cores_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal samples_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressures_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal disp_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal distdo_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal breakthrough_job_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal update_dispatch_record_mode As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_master_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal well_information_url As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal remote_service_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_engineers_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_operators_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_job_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, status, firstalert, oilcomp_id, rig, rig_phone, approx_start, approx_end, dist_id, competitor, lost_detail_ids, lost_notes, rec_by, spec_req, jsa_rec_id, lsd, province, lat, lon, downhole_lat, downhole_lon, well_name, legal_description, county_id, field, api_number, uwi, well_license_number, road_direc, core_requests, sample_requests, pressure_requests, core_attempts, sample_attempts, pressure_attempts, cores_sold, samples_sold, pressures_sold, disp_by, distdo_id, comments, breakthrough_job_flag, update_dispatch_record_mode, sold_to_id, sold_to_address_rec_id, well_master_number, well_information_url, remote_service_flag, remote_engineers_required, remote_operators_required, critical_job_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispTightHoleUserAccess")>  _
	Public Function DeleteDispTightHoleUserAccess(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal user_id As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, user_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteDispStandbyItems")>  _
	Public Function DeleteDispStandbyItems(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ResetFsoSapExport")>  _
	Public Function ResetFsoSapExport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ResetQuoteSapExport")>  _
	Public Function ResetQuoteSapExport(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDashboardLegendColumnData")>  _
	Public Function GetDashboardLegendColumnData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal dashboard_type_id As System.Nullable(Of Short)) As ISingleResult(Of GetDashboardLegendColumnDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), dashboard_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDashboardLegendColumnDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDashboardLegendRowData")>  _
	Public Function GetDashboardLegendRowData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal dashboard_type_id As System.Nullable(Of Short)) As ISingleResult(Of GetDashboardLegendRowDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), dashboard_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDashboardLegendRowDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDashboardLegendFunctionalityData")>  _
	Public Function GetDashboardLegendFunctionalityData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal dashboard_type_id As System.Nullable(Of Short)) As ISingleResult(Of GetDashboardLegendFunctionalityDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), dashboard_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDashboardLegendFunctionalityDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchRecord")>  _
	Public Function GetDispatchRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal action As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal dispatch_type As String) As ISingleResult(Of disp)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), action, disp_id, dispatch_type)
		Return CType(result.ReturnValue,ISingleResult(Of disp))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchSummary")>  _
	Public Function GetDispatchSummary(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of dispatch_summary)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of dispatch_summary))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDispatchRecordFromSummary")>  _
	Public Function InsertDispatchRecordFromSummary( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal status As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal approx_end As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal county_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal rig As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal distdo_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_started_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_finished_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal bht As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wellhead_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal current_driller_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal deviation As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal true_vertical_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal dog_leg_severity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_weight As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal spec_req As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal operation_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal environment_market_code As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal rig_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal well_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal acquisition_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal security_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal prospect_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal depth_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal hole_size_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal density_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal temperature_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal weight_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal concentration_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal length_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal distance_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal perm_datum As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal driller_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal wireline_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_job_flag As System.Nullable(Of Boolean)) As ISingleResult(Of InsertDispatchRecordFromSummaryResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl, status, approx_start, approx_end, oilcomp_id, sold_to_id, sold_to_address_rec_id, county_id, lat, lon, rig, truck, dist_id, distdo_id, equipment_left_datetime, crew_left_datetime, equipment_on_loc_datetime, crew_on_loc_datetime, crew_started_job_datetime, crew_finished_job_datetime, equipment_left_loc_datetime, crew_left_loc_datetime, equipment_returned_datetime, crew_returned_datetime, bht, max_pressure, wellhead_pressure, current_driller_depth, deviation, true_vertical_depth, dog_leg_severity, fluid_type, fluid_weight, comments, spec_req, operation_market_code, environment_market_code, rig_type_market_code, service_type_market_code, well_type_market_code, acquisition_market_code, security_market_code, prospect_market_code, depth_measurement_unit, hole_size_measurement_unit, density_measurement_unit, temperature_measurement_unit, weight_measurement_unit, concentration_measurement_unit, currency_measurement_unit, length_measurement_unit, distance_measurement_unit, perm_datum, driller_zero, wireline_zero, critical_job_flag)
		Return CType(result.ReturnValue,ISingleResult(Of InsertDispatchRecordFromSummaryResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoRecords")>  _
	Public Function GetFsoRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_fso)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fso_rec_id, disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_fso))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertPSDispatchRecord")>  _
	Public Function InsertPSDispatchRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(2)")> ByVal psl As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal status As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal firstalert As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal rig As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal rig_phone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal approx_end As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal competitor As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lost_detail_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal lost_notes As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal rec_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal spec_req As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal jsa_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lsd As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal province As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal downhole_lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal downhole_lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal well_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal legal_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal county_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal field As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal api_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal uwi As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_license_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal kelly_bushing_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal rotary_table_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal drill_floor_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal rams_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal casing_head_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal ground_level_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal mean_sea_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal sea_floor_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal operation_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal environment_market_code As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal rig_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal well_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal acquisition_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal security_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal prospect_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal depth_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal hole_size_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal density_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal temperature_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal weight_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal concentration_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal length_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal distance_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal h2s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal co2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal surface_temp As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal bht As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal deviation As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wellhead_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_overbalance_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal run_number As System.Nullable(Of Byte),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal perm_datum As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal perm_datum_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal driller_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal wireline_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wireline_zero_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal current_driller_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal driller_td As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wireline_td As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal true_vertical_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal dog_leg_severity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal distance_to_well As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal road_direc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_started_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_finished_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cores_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal samples_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressures_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal truck_start_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal truck_end_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal aux_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal aux_unit_start_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal aux_unit_end_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal remote_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(60)")> ByVal engineer1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_1_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_1_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_1_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_1_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_1_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_2_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_2_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_2_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_2_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_2_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_3_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_3_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_3_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_3_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_3_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(256)")> ByVal unit_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal disp_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal distdo_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_source As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_info_source As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal fluid_last_circulation_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_weight As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_specific_gravity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal fluid_level As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_filt_cake As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_loss As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_chlorides As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_calcium As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rm As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rm_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmf As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmf_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmc As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmc_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmbt As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmbt_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_ph As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_co2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_viscosity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_gels_s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_gels_m As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_pv As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_vp As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2o_percent_1 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2o_percent_2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_sand As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_solids As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_sec_lc_material As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rugosity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_washouts As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_ovalness As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_corrections As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_mud_loss As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_barites As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal tubing_hanger_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_3 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal top_connection As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal blind_rams As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal work_spool As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal slant_well As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal special_instructions As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal gun_loading_complete_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal gun_loading_complete_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal gun_loader As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal breakthrough_job_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal dispatch_export_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal dispatch_exported_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_master_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal created_from_well_master_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal well_information_url As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal remote_service_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_engineers_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_operators_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_job_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal equipment_required_flag As System.Nullable(Of Boolean)) As ISingleResult(Of InsertPSDispatchRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), psl, status, firstalert, oilcomp_id, rig, rig_phone, approx_start, approx_end, dist_id, competitor, lost_detail_ids, lost_notes, rec_by, spec_req, jsa_rec_id, lsd, province, lat, lon, downhole_lat, downhole_lon, well_name, legal_description, county_id, field, api_number, uwi, well_license_number, kelly_bushing_depth, rotary_table_depth, drill_floor_depth, rams_depth, casing_head_depth, ground_level_depth, mean_sea_depth, sea_floor_depth, operation_market_code, environment_market_code, rig_type_market_code, service_type_market_code, well_type_market_code, acquisition_market_code, security_market_code, prospect_market_code, depth_measurement_unit, hole_size_measurement_unit, density_measurement_unit, temperature_measurement_unit, weight_measurement_unit, concentration_measurement_unit, currency_measurement_unit, length_measurement_unit, distance_measurement_unit, h2s, co2, surface_temp, bht, deviation, max_pressure, wellhead_pressure, max_overbalance_pressure, run_number, perm_datum, perm_datum_depth, driller_zero, wireline_zero, wireline_zero_depth, current_driller_depth, driller_td, wireline_td, true_vertical_depth, dog_leg_severity, distance_to_well, road_direc, equipment_left_datetime, equipment_on_loc_datetime, equipment_left_loc_datetime, equipment_returned_datetime, crew_left_datetime, crew_on_loc_datetime, crew_started_job_datetime, crew_finished_job_datetime, crew_left_loc_datetime, crew_returned_datetime, core_requests, sample_requests, pressure_requests, core_attempts, sample_attempts, pressure_attempts, cores_sold, samples_sold, pressures_sold, truck, truck_start_hours, truck_end_hours, aux_unit, aux_unit_start_hours, aux_unit_end_hours, remote_unit, engineer1, cable_1_id, cable_1_type, cable_1_start_length, cable_1_end_length, cable_1_tension, cable_1_magnetic_marks, cable_1_sheave_od, cable_1_flow_tube_size, cable_2_id, cable_2_type, cable_2_start_length, cable_2_end_length, cable_2_tension, cable_2_magnetic_marks, cable_2_sheave_od, cable_2_flow_tube_size, cable_3_id, cable_3_type, cable_3_start_length, cable_3_end_length, cable_3_tension, cable_3_magnetic_marks, cable_3_sheave_od, cable_3_flow_tube_size, unit_comment, disp_by, distdo_id, fluid_type, fluid_source, fluid_info_source, fluid_last_circulation_datetime, fluid_weight, fluid_specific_gravity, fluid_level, fluid_filt_cake, fluid_loss, fluid_chlorides, fluid_calcium, fluid_rm, fluid_rm_at, fluid_rmf, fluid_rmf_at, fluid_rmc, fluid_rmc_at, fluid_rmbt, fluid_rmbt_at, fluid_ph, fluid_h2s, fluid_co2, fluid_viscosity, fluid_gels_s, fluid_gels_m, fluid_pv, fluid_vp, fluid_h2o_percent_1, fluid_h2o_percent_2, fluid_sand, fluid_solids, fluid_sec_lc_material, fluid_rugosity, fluid_washouts, fluid_ovalness, fluid_corrections, fluid_mud_loss, fluid_barites, comments, tubing_hanger_type, tree_length_2, tree_length_3, top_connection, blind_rams, work_spool, slant_well, special_instructions, gun_loading_complete_flag, gun_loading_complete_datetime, gun_loader, breakthrough_job_flag, dispatch_export_datetime, dispatch_exported_by, sold_to_id, sold_to_address_rec_id, well_master_number, created_from_well_master_flag, well_information_url, remote_service_flag, remote_engineers_required, remote_operators_required, critical_job_flag, equipment_required_flag)
		Return CType(result.ReturnValue,ISingleResult(Of InsertPSDispatchRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispAccountingRecord")>  _
	Public Function GetDispAccountingRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of disp_accounting)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of disp_accounting))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispatchSummary")>  _
	Public Function UpdateDispatchSummary( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal status As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal approx_end As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal county_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal rig As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal distdo_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_started_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_finished_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal bht As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wellhead_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal current_driller_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal deviation As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal true_vertical_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal dog_leg_severity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_weight As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal spec_req As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_job_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, status, approx_start, approx_end, oilcomp_id, sold_to_id, sold_to_address_rec_id, county_id, lat, lon, rig, truck, dist_id, distdo_id, equipment_left_datetime, crew_left_datetime, equipment_on_loc_datetime, crew_on_loc_datetime, crew_started_job_datetime, crew_finished_job_datetime, equipment_left_loc_datetime, crew_left_loc_datetime, equipment_returned_datetime, crew_returned_datetime, bht, max_pressure, wellhead_pressure, current_driller_depth, deviation, true_vertical_depth, dog_leg_severity, fluid_type, fluid_weight, comments, spec_req, critical_job_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispAccountingRecord")>  _
	Public Function UpdateDispAccountingRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal optional_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal instrument_protection As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, revenue, optional_revenue, instrument_protection)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateDispRevenue")>  _
	Public Function UpdateDispRevenue(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdatePSDispatchRecord")>  _
	Public Function UpdatePSDispatchRecord( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal status As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal firstalert As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal rig As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal rig_phone As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal approx_start As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="DateTime")> ByVal approx_end As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal competitor As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lost_detail_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal lost_notes As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal rec_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal spec_req As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal jsa_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal lsd As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal province As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(10,8)")> ByVal downhole_lat As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(11,8)")> ByVal downhole_lon As System.Nullable(Of Decimal),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal well_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(150)")> ByVal legal_description As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal county_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal field As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(30)")> ByVal api_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal uwi As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_license_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal kelly_bushing_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal rotary_table_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal drill_floor_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal rams_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal casing_head_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal ground_level_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal mean_sea_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal sea_floor_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal operation_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal environment_market_code As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal rig_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal service_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal well_type_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal acquisition_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal security_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal prospect_market_code As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal depth_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal hole_size_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal density_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal temperature_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal weight_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal concentration_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal currency_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal length_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal distance_measurement_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal h2s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal co2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal surface_temp As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal bht As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal deviation As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wellhead_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal max_overbalance_pressure As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal run_number As System.Nullable(Of Byte),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal perm_datum As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal perm_datum_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal driller_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal wireline_zero As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wireline_zero_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal current_driller_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal driller_td As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal wireline_td As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal true_vertical_depth As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal dog_leg_severity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal distance_to_well As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal road_direc As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal equipment_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_on_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_started_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_finished_job_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_left_loc_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal crew_returned_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_requests As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal core_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sample_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_attempts As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cores_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal samples_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressures_sold As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal truck As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal truck_start_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal truck_end_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal aux_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal aux_unit_start_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal aux_unit_end_hours As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal remote_unit As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(60)")> ByVal engineer1 As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_1_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_1_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_1_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_1_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_1_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_splice1_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_1_splice2_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_2_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_2_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_2_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_2_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_2_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_splice1_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_2_splice2_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal cable_3_id As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal cable_3_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_start_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_end_length As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_tension As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal cable_3_magnetic_marks As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_3_sheave_od As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal cable_3_flow_tube_size As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_splice1_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cable_3_splice2_depth As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(256)")> ByVal unit_comment As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal disp_by As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal distdo_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_source As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_info_source As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal fluid_last_circulation_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_weight As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_specific_gravity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(5)")> ByVal fluid_level As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_filt_cake As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_loss As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_chlorides As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_calcium As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rm As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rm_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmf As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmf_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmc As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmc_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rmbt As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fluid_rmbt_at As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_ph As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_co2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_viscosity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_gels_s As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_gels_m As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_pv As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_vp As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2o_percent_1 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_h2o_percent_2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_sand As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_solids As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fluid_sec_lc_material As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_rugosity As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_washouts As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_ovalness As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(10)")> ByVal fluid_corrections As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_mud_loss As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal fluid_barites As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal comments As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal tubing_hanger_type As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_2 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal tree_length_3 As System.Nullable(Of Single),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal top_connection As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal blind_rams As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal work_spool As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal slant_well As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Text")> ByVal special_instructions As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal gun_loading_complete_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal gun_loading_complete_datetime As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal gun_loader As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal breakthrough_job_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallInt")> ByVal update_dispatch_record_mode As System.Nullable(Of Short),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal well_master_number As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal well_information_url As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal remote_service_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_engineers_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal remote_operators_required As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_job_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal equipment_required_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, status, firstalert, oilcomp_id, rig, rig_phone, approx_start, approx_end, dist_id, competitor, lost_detail_ids, lost_notes, rec_by, spec_req, jsa_rec_id, lsd, province, lat, lon, downhole_lat, downhole_lon, well_name, legal_description, county_id, field, api_number, uwi, well_license_number, kelly_bushing_depth, rotary_table_depth, drill_floor_depth, rams_depth, casing_head_depth, ground_level_depth, mean_sea_depth, sea_floor_depth, operation_market_code, environment_market_code, rig_type_market_code, service_type_market_code, well_type_market_code, acquisition_market_code, security_market_code, prospect_market_code, depth_measurement_unit, hole_size_measurement_unit, density_measurement_unit, temperature_measurement_unit, weight_measurement_unit, concentration_measurement_unit, currency_measurement_unit, length_measurement_unit, distance_measurement_unit, h2s, co2, surface_temp, bht, deviation, max_pressure, wellhead_pressure, max_overbalance_pressure, run_number, perm_datum, perm_datum_depth, driller_zero, wireline_zero, wireline_zero_depth, current_driller_depth, driller_td, wireline_td, true_vertical_depth, dog_leg_severity, distance_to_well, road_direc, equipment_left_datetime, equipment_on_loc_datetime, equipment_left_loc_datetime, equipment_returned_datetime, crew_left_datetime, crew_on_loc_datetime, crew_started_job_datetime, crew_finished_job_datetime, crew_left_loc_datetime, crew_returned_datetime, core_requests, sample_requests, pressure_requests, core_attempts, sample_attempts, pressure_attempts, cores_sold, samples_sold, pressures_sold, truck, truck_start_hours, truck_end_hours, aux_unit, aux_unit_start_hours, aux_unit_end_hours, remote_unit, engineer1, cable_1_id, cable_1_type, cable_1_start_length, cable_1_end_length, cable_1_tension, cable_1_magnetic_marks, cable_1_sheave_od, cable_1_flow_tube_size, cable_1_splice1_depth, cable_1_splice2_depth, cable_2_id, cable_2_type, cable_2_start_length, cable_2_end_length, cable_2_tension, cable_2_magnetic_marks, cable_2_sheave_od, cable_2_flow_tube_size, cable_2_splice1_depth, cable_2_splice2_depth, cable_3_id, cable_3_type, cable_3_start_length, cable_3_end_length, cable_3_tension, cable_3_magnetic_marks, cable_3_sheave_od, cable_3_flow_tube_size, cable_3_splice1_depth, cable_3_splice2_depth, unit_comment, disp_by, distdo_id, fluid_type, fluid_source, fluid_info_source, fluid_last_circulation_datetime, fluid_weight, fluid_specific_gravity, fluid_level, fluid_filt_cake, fluid_loss, fluid_chlorides, fluid_calcium, fluid_rm, fluid_rm_at, fluid_rmf, fluid_rmf_at, fluid_rmc, fluid_rmc_at, fluid_rmbt, fluid_rmbt_at, fluid_ph, fluid_h2s, fluid_co2, fluid_viscosity, fluid_gels_s, fluid_gels_m, fluid_pv, fluid_vp, fluid_h2o_percent_1, fluid_h2o_percent_2, fluid_sand, fluid_solids, fluid_sec_lc_material, fluid_rugosity, fluid_washouts, fluid_ovalness, fluid_corrections, fluid_mud_loss, fluid_barites, comments, tubing_hanger_type, tree_length_2, tree_length_3, top_connection, blind_rams, work_spool, slant_well, special_instructions, gun_loading_complete_flag, gun_loading_complete_datetime, gun_loader, breakthrough_job_flag, update_dispatch_record_mode, sold_to_id, sold_to_address_rec_id, well_master_number, well_information_url, remote_service_flag, remote_engineers_required, remote_operators_required, critical_job_flag, equipment_required_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateQuoteMainQuoteFlag")>  _
	Public Function UpdateQuoteMainQuoteFlag(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal main_quote_flag As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, main_quote_flag)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateRevenueForecastIncrementalRecord")>  _
	Public Function UpdateRevenueForecastIncrementalRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal revenue_month As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal sales_rep_employee_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal opportunity_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal opportunity_probability As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal risk_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal risk_probability As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comment As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, revenue_month, dist_id, oilcomp_id, sales_rep_employee_id, revenue, opportunity_revenue, opportunity_probability, risk_revenue, risk_probability, comment)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateRevenueForecastQmiRecord")>  _
	Public Function UpdateRevenueForecastQmiRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quarter As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal qmi As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), year, quarter, dist_id, qmi)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteRevenueForecastQmiRecord")>  _
	Public Function DeleteRevenueForecastQmiRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quarter As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), year, quarter, dist_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRevenueForecastQmiTotal")>  _
	Public Function GetRevenueForecastQmiTotal(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quarter As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal dist_ids As String) As ISingleResult(Of GetRevenueForecastQmiTotalResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), year, quarter, dist_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetRevenueForecastQmiTotalResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertRevenueForecastQmiRecord")>  _
	Public Function InsertRevenueForecastQmiRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quarter As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal qmi As System.Nullable(Of Decimal)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), year, quarter, dist_id, qmi)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertRevenueForecastIncrementalRecord")>  _
	Public Function InsertRevenueForecastIncrementalRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal revenue_year As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal revenue_month As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal sales_rep_employee_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal opportunity_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal opportunity_probability As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal risk_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal risk_probability As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comment As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), revenue_year, revenue_month, dist_id, oilcomp_id, sales_rep_employee_id, revenue, opportunity_revenue, opportunity_probability, risk_revenue, risk_probability, comment)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertOrUpdateDispRevenueForecastRecord")>  _
	Public Function InsertOrUpdateDispRevenueForecastRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal disp_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal original_disp_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal opportunity_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal opportunity_probability As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(15,2)")> ByVal risk_revenue As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Decimal(5,2)")> ByVal risk_probability As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal comment As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, disp_revenue, original_disp_revenue, opportunity_revenue, opportunity_probability, risk_revenue, risk_probability, comment)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRevenueForecastQmiRecords")>  _
	Public Function GetRevenueForecastQmiRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal quarter As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal dist_ids As String) As ISingleResult(Of revenue_forecast_qmi)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), year, quarter, dist_ids)
		Return CType(result.ReturnValue,ISingleResult(Of revenue_forecast_qmi))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispSecurityMarketCode")>  _
	Public Function GetDispSecurityMarketCode(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispSecurityMarketCodeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispSecurityMarketCodeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SetupDispTightHoleUserAccess")>  _
	Public Function SetupDispTightHoleUserAccess(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal rec_by As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal original_dist_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal security_market_code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal original_security_market_code As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, rec_by, dist_id, original_dist_id, security_market_code, original_security_market_code)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchOperationsDashboardEngineerList")>  _
	Public Function GetDispatchOperationsDashboardEngineerList() As ISingleResult(Of GetDispatchOperationsDashboardEngineerListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchOperationsDashboardEngineerListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchOperationsDashboardData")>  _
	Public Function GetDispatchOperationsDashboardData( _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal end_date As System.Nullable(Of Date),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal psl_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal oilcomp_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal dist_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal environment_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal status_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal rig_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal service_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByVal well_name As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal fluid_types As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal engineer_ids As String,  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op_time_from As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal op_time_to As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal temperature_from As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal temperature_to As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal temperature_unit As System.Nullable(Of Char),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_from As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pressure_to As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal depth_from As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal depth_to As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(1)")> ByVal depth_unit As System.Nullable(Of Char),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal deviation_from As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal deviation_to As System.Nullable(Of Integer),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal remote_service_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal critical_job_flag As System.Nullable(Of Boolean),  _
				<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Bit")> ByVal lost_time_flag As System.Nullable(Of Boolean)) As ISingleResult(Of disp_ops_dashboard)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), start_date, end_date, psl_ids, oilcomp_ids, dist_ids, environment_ids, status_ids, rig_ids, service_ids, well_name, fluid_types, engineer_ids, op_time_from, op_time_to, temperature_from, temperature_to, temperature_unit, pressure_from, pressure_to, depth_from, depth_to, depth_unit, deviation_from, deviation_to, remote_service_flag, critical_job_flag, lost_time_flag)
		Return CType(result.ReturnValue,ISingleResult(Of disp_ops_dashboard))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateFsoQuoteCustomerInformation")>  _
	Public Function UpdateFsoQuoteCustomerInformation(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(40)")> ByVal oilcomp_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal sold_to_address_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal dist_id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id, oilcomp_id, sold_to_id, sold_to_address_rec_id, dist_id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFsoExportData")>  _
	Public Function GetFsoExportData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal fso_rec_id As System.Nullable(Of Integer)) As ISingleResult(Of GetFsoExportDataResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id, fso_rec_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetFsoExportDataResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CopyFsoRecord")>  _
	Public Function CopyFsoRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal copy_fso_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal copy_so_rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal new_fso_number As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Char(5)")> ByVal new_fso_type_id As String) As ISingleResult(Of CopyFsoRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), copy_fso_rec_id, copy_so_rec_id, new_fso_number, new_fso_type_id)
		Return CType(result.ReturnValue,ISingleResult(Of CopyFsoRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetAssetDocRecords")>  _
	Public Function GetAssetDocRecords(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As ISingleResult(Of GetAssetDocRecordsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), asset_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetAssetDocRecordsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertAssetDocRecord")>  _
	Public Function InsertAssetDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(500)")> ByVal original_file_path As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(128)")> ByVal icon_description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Real")> ByVal file_size As System.Nullable(Of Single)) As ISingleResult(Of InsertAssetDocRecordResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), asset_id, original_file_path, icon_description, file_size)
		Return CType(result.ReturnValue,ISingleResult(Of InsertAssetDocRecordResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetDocRecord")>  _
	Public Function UpdateAssetDocRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal rec_id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal document_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal expiry_date As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), rec_id, document_type, expiry_date)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRevenueForecastQuarterlyTotals")>  _
	Public Function GetRevenueForecastQuarterlyTotals(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal end_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal psl_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal oilcomp_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal dist_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal sales_rep_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal status_ids As String) As ISingleResult(Of GetRevenueForecastQuarterlyTotalsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), start_date, end_date, psl_ids, oilcomp_ids, dist_ids, sales_rep_ids, status_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetRevenueForecastQuarterlyTotalsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckAssetIdExists")>  _
	Public Function CheckAssetIdExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(40)")> ByVal asset_id As String) As ISingleResult(Of CheckAssetIdExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), asset_id)
		Return CType(result.ReturnValue,ISingleResult(Of CheckAssetIdExistsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DeleteAssetSubassemblyImport")>  _
	Public Function DeleteAssetSubassemblyImport() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAssetSubassembliesFromImport")>  _
	Public Function UpdateAssetSubassembliesFromImport() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispMarketCodeCompetencies")>  _
	Public Function GetDispMarketCodeCompetencies(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispMarketCodeCompetenciesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispMarketCodeCompetenciesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchOperationsDashboardPersonnelCompetencies")>  _
	Public Function GetDispatchOperationsDashboardPersonnelCompetencies(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal disp_ids As String) As ISingleResult(Of GetDispatchOperationsDashboardPersonnelCompetenciesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchOperationsDashboardPersonnelCompetenciesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispatchOperationsDashboardRequiredCompetencies")>  _
	Public Function GetDispatchOperationsDashboardRequiredCompetencies(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(4000)")> ByVal disp_ids As String) As ISingleResult(Of GetDispatchOperationsDashboardRequiredCompetenciesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_ids)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispatchOperationsDashboardRequiredCompetenciesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetDispPersonnelCompetencies")>  _
	Public Function GetDispPersonnelCompetencies(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal disp_id As System.Nullable(Of Integer)) As ISingleResult(Of GetDispPersonnelCompetenciesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), disp_id)
		Return CType(result.ReturnValue,ISingleResult(Of GetDispPersonnelCompetenciesResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetRevenueForecastData")>  _
	Public Function GetRevenueForecastData(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal start_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="SmallDateTime")> ByVal end_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal psl_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal oilcomp_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal dist_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal sales_rep_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal status_ids As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2000)")> ByVal service_ids As String) As ISingleResult(Of revenue_forecast)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), start_date, end_date, psl_ids, oilcomp_ids, dist_ids, sales_rep_ids, status_ids, service_ids)
		Return CType(result.ReturnValue,ISingleResult(Of revenue_forecast))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdist")>  _
Partial Public Class district
	
	Private _dist_id As Integer
	
	Private _name As String
	
	Private _territory As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _postal_code As String
	
	Private _phone As String
	
	Private _fax As String
	
	Private _manager As String
	
	Private _country_code As String
	
	Private _legal_entity As String
	
	Private _country_name As String
	
	Private _location_type As String
	
	Private _display_well_license_flag As Boolean
	
	Private _display_legal_desc_flag As Boolean
	
	Private _display_province_flag As Boolean
	
	Private _api_uwi_digits_only_flag As Boolean
	
	Private _display_gross_revenue_flag As Boolean
	
	Private _plant_id As String
	
	Private _currency_code As String
	
	Private _report_language As String
	
	Private _has_cmpl_svc_auth_report_flag As Boolean
	
	Private _inactive_flag As Boolean
	
	Private _manager_user_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int NOT NULL")>  _
	Public Property dist_id() As Integer
		Get
			Return Me._dist_id
		End Get
		Set
			If ((Me._dist_id = value)  _
						= false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory", DbType:="VarChar(40)")>  _
	Public Property territory() As String
		Get
			Return Me._territory
		End Get
		Set
			If (String.Equals(Me._territory, value) = false) Then
				Me._territory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="varchar(80)", CanBeNull:=false)>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me._state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postal_code", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property postal_code() As String
		Get
			Return Me._postal_code
		End Get
		Set
			If (String.Equals(Me._postal_code, value) = false) Then
				Me._postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me._phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fax", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property fax() As String
		Get
			Return Me._fax
		End Get
		Set
			If (String.Equals(Me._fax, value) = false) Then
				Me._fax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manager", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property manager() As String
		Get
			Return Me._manager
		End Get
		Set
			If (String.Equals(Me._manager, value) = false) Then
				Me._manager = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", DbType:="char(2)", CanBeNull:=false)>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me._country_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_legal_entity", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property legal_entity() As String
		Get
			Return Me._legal_entity
		End Get
		Set
			If (String.Equals(Me._legal_entity, value) = false) Then
				Me._legal_entity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_name", CanBeNull:=false)>  _
	Public Property country_name() As String
		Get
			Return Me._country_name
		End Get
		Set
			If (String.Equals(Me._country_name, value) = false) Then
				Me._country_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location_type", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property location_type() As String
		Get
			Return Me._location_type
		End Get
		Set
			If (String.Equals(Me._location_type, value) = false) Then
				Me._location_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_well_license_flag", DbType:="bit")>  _
	Public Property display_well_license_flag() As Boolean
		Get
			Return Me._display_well_license_flag
		End Get
		Set
			If ((Me._display_well_license_flag = value)  _
						= false) Then
				Me._display_well_license_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_legal_desc_flag", DbType:="bit")>  _
	Public Property display_legal_desc_flag() As Boolean
		Get
			Return Me._display_legal_desc_flag
		End Get
		Set
			If ((Me._display_legal_desc_flag = value)  _
						= false) Then
				Me._display_legal_desc_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_province_flag", DbType:="bit")>  _
	Public Property display_province_flag() As Boolean
		Get
			Return Me._display_province_flag
		End Get
		Set
			If ((Me._display_province_flag = value)  _
						= false) Then
				Me._display_province_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_api_uwi_digits_only_flag", DbType:="bit")>  _
	Public Property api_uwi_digits_only_flag() As Boolean
		Get
			Return Me._api_uwi_digits_only_flag
		End Get
		Set
			If ((Me._api_uwi_digits_only_flag = value)  _
						= false) Then
				Me._api_uwi_digits_only_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_gross_revenue_flag", DbType:="bit")>  _
	Public Property display_gross_revenue_flag() As Boolean
		Get
			Return Me._display_gross_revenue_flag
		End Get
		Set
			If ((Me._display_gross_revenue_flag = value)  _
						= false) Then
				Me._display_gross_revenue_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="varchar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency_code", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property currency_code() As String
		Get
			Return Me._currency_code
		End Get
		Set
			If (String.Equals(Me._currency_code, value) = false) Then
				Me._currency_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_report_language", DbType:="char(2)", CanBeNull:=false)>  _
	Public Property report_language() As String
		Get
			Return Me._report_language
		End Get
		Set
			If (String.Equals(Me._report_language, value) = false) Then
				Me._report_language = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_has_cmpl_svc_auth_report_flag", DbType:="bit")>  _
	Public Property has_cmpl_svc_auth_report_flag() As Boolean
		Get
			Return Me._has_cmpl_svc_auth_report_flag
		End Get
		Set
			If ((Me._has_cmpl_svc_auth_report_flag = value)  _
						= false) Then
				Me._has_cmpl_svc_auth_report_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="bit")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me._inactive_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manager_user_id", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property manager_user_id() As String
		Get
			Return Me._manager_user_id
		End Get
		Set
			If (String.Equals(Me._manager_user_id, value) = false) Then
				Me._manager_user_id = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_estruck_selection")>  _
Partial Public Class truck_selection
	
	Private _truck As String
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _district As String
	
	Private _status As String
	
	Private _avail_id As System.Nullable(Of Short)
	
	Private _availability As String
	
	Private _cable_length As System.Nullable(Of Integer)
	
	Private _territory As String
	
	Private _cable2_length As System.Nullable(Of Integer)
	
	Private _cable1_id As String
	
	Private _cable1_type As String
	
	Private _cable2_id As String
	
	Private _cable2_type As String
	
	Private _cable3_id As String
	
	Private _cable3_type As String
	
	Private _cable3_length As System.Nullable(Of Integer)
	
	Private _cable1_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable1_splice2_depth As System.Nullable(Of Integer)
	
	Private _cable2_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable2_splice2_depth As System.Nullable(Of Integer)
	
	Private _cable3_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable3_splice2_depth As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me._truck = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_district", DbType:="Char(40)")>  _
	Public Property district() As String
		Get
			Return Me._district
		End Get
		Set
			If (String.Equals(Me._district, value) = false) Then
				Me._district = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(255)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="SmallInt")>  _
	Public Property avail_id() As System.Nullable(Of Short)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me._avail_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_availability", DbType:="Char(20)")>  _
	Public Property availability() As String
		Get
			Return Me._availability
		End Get
		Set
			If (String.Equals(Me._availability, value) = false) Then
				Me._availability = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_length", DbType:="Int")>  _
	Public Property cable1_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_length
		End Get
		Set
			If (Me._cable_length.Equals(value) = false) Then
				Me._cable_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory", CanBeNull:=false)>  _
	Public Property territory() As String
		Get
			Return Me._territory
		End Get
		Set
			If (String.Equals(Me._territory, value) = false) Then
				Me._territory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_length", DbType:="Int")>  _
	Public Property cable2_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable2_length
		End Get
		Set
			If (Me._cable2_length.Equals(value) = false) Then
				Me._cable2_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable1_id", DbType:="varchar(15)", CanBeNull:=false)>  _
	Public Property cable1_id() As String
		Get
			Return Me._cable1_id
		End Get
		Set
			If (String.Equals(Me._cable1_id, value) = false) Then
				Me._cable1_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable1_type", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property cable1_type() As String
		Get
			Return Me._cable1_type
		End Get
		Set
			If (String.Equals(Me._cable1_type, value) = false) Then
				Me._cable1_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_id", DbType:="varchar(15)", CanBeNull:=false)>  _
	Public Property cable2_id() As String
		Get
			Return Me._cable2_id
		End Get
		Set
			If (String.Equals(Me._cable2_id, value) = false) Then
				Me._cable2_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_type", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property cable2_type() As String
		Get
			Return Me._cable2_type
		End Get
		Set
			If (String.Equals(Me._cable2_type, value) = false) Then
				Me._cable2_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_id", DbType:="varchar(15)", CanBeNull:=false)>  _
	Public Property cable3_id() As String
		Get
			Return Me._cable3_id
		End Get
		Set
			If (String.Equals(Me._cable3_id, value) = false) Then
				Me._cable3_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_type", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property cable3_type() As String
		Get
			Return Me._cable3_type
		End Get
		Set
			If (String.Equals(Me._cable3_type, value) = false) Then
				Me._cable3_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_length", DbType:="int")>  _
	Public Property cable3_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable3_length
		End Get
		Set
			If (Me._cable3_length.Equals(value) = false) Then
				Me._cable3_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable1_splice1_depth")>  _
	Public Property cable1_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable1_splice1_depth
		End Get
		Set
			If (Me._cable1_splice1_depth.Equals(value) = false) Then
				Me._cable1_splice1_depth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable1_splice2_depth")>  _
	Public Property cable1_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable1_splice2_depth
		End Get
		Set
			If (Me._cable1_splice2_depth.Equals(value) = false) Then
				Me._cable1_splice2_depth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_splice1_depth")>  _
	Public Property cable2_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable2_splice1_depth
		End Get
		Set
			If (Me._cable2_splice1_depth.Equals(value) = false) Then
				Me._cable2_splice1_depth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_splice2_depth")>  _
	Public Property cable2_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable2_splice2_depth
		End Get
		Set
			If (Me._cable2_splice2_depth.Equals(value) = false) Then
				Me._cable2_splice2_depth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_splice1_depth")>  _
	Public Property cable3_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable3_splice1_depth
		End Get
		Set
			If (Me._cable3_splice1_depth.Equals(value) = false) Then
				Me._cable3_splice1_depth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_splice2_depth")>  _
	Public Property cable3_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable3_splice2_depth
		End Get
		Set
			If (Me._cable3_splice2_depth.Equals(value) = false) Then
				Me._cable3_splice2_depth = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp")>  _
Partial Public Class disp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _status As Short
	
	Private _firstalert As System.Nullable(Of Date)
	
	Private _oilcomp_id As String
	
	Private _rig As String
	
	Private _rig_phone As String
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _approx_end As System.Nullable(Of Date)
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _rec_by As String
	
	Private _spec_req As String
	
	Private _lat As System.Nullable(Of Decimal)
	
	Private _lon As System.Nullable(Of Decimal)
	
	Private _well_name As String
	
	Private _legal_description As String
	
	Private _county_id As String
	
	Private _field As String
	
	Private _api_number As String
	
	Private _kelly_bushing_depth As System.Nullable(Of Single)
	
	Private _rotary_table_depth As System.Nullable(Of Single)
	
	Private _drill_floor_depth As System.Nullable(Of Single)
	
	Private _rams_depth As System.Nullable(Of Single)
	
	Private _casing_head_depth As System.Nullable(Of Single)
	
	Private _ground_level_depth As System.Nullable(Of Single)
	
	Private _mean_sea_depth As System.Nullable(Of Single)
	
	Private _sea_floor_depth As System.Nullable(Of Single)
	
	Private _operation_market_code As String
	
	Private _environment_market_code As System.Nullable(Of Short)
	
	Private _rig_type_market_code As String
	
	Private _service_type_market_code As String
	
	Private _well_type_market_code As String
	
	Private _acquisition_market_code As String
	
	Private _security_market_code As String
	
	Private _prospect_market_code As String
	
	Private _depth_measurement_unit As String
	
	Private _hole_size_measurement_unit As String
	
	Private _density_measurement_unit As String
	
	Private _temperature_measurement_unit As String
	
	Private _weight_measurement_unit As String
	
	Private _concentration_measurement_unit As String
	
	Private _currency_measurement_unit As String
	
	Private _h2s As System.Nullable(Of Single)
	
	Private _co2 As System.Nullable(Of Single)
	
	Private _surface_temp As System.Nullable(Of Single)
	
	Private _bht As System.Nullable(Of Single)
	
	Private _deviation As System.Nullable(Of Single)
	
	Private _max_pressure As System.Nullable(Of Single)
	
	Private _run_number As System.Nullable(Of Byte)
	
	Private _instrument_protection As String
	
	Private _perm_datum As String
	
	Private _perm_datum_depth As System.Nullable(Of Single)
	
	Private _driller_zero As String
	
	Private _wireline_zero As String
	
	Private _wireline_zero_depth As System.Nullable(Of Single)
	
	Private _driller_td As System.Nullable(Of Single)
	
	Private _wireline_td As System.Nullable(Of Single)
	
	Private _road_direc As String
	
	Private _equipment_left_datetime As System.Nullable(Of Date)
	
	Private _equipment_on_loc_datetime As System.Nullable(Of Date)
	
	Private _equipment_left_loc_datetime As System.Nullable(Of Date)
	
	Private _equipment_returned_datetime As System.Nullable(Of Date)
	
	Private _crew_left_datetime As System.Nullable(Of Date)
	
	Private _crew_on_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_started_job_datetime As System.Nullable(Of Date)
	
	Private _crew_finished_job_datetime As System.Nullable(Of Date)
	
	Private _crew_left_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_returned_datetime As System.Nullable(Of Date)
	
	Private _core_attempts As System.Nullable(Of Integer)
	
	Private _sample_attempts As System.Nullable(Of Integer)
	
	Private _pressure_attempts As System.Nullable(Of Integer)
	
	Private _cores_sold As System.Nullable(Of Integer)
	
	Private _samples_sold As System.Nullable(Of Integer)
	
	Private _pressures_sold As System.Nullable(Of Integer)
	
	Private _truck As String
	
	Private _aux_unit As String
	
	Private _engineer1 As String
	
	Private _cable_1_id As String
	
	Private _cable_2_id As String
	
	Private _cable_1_type As String
	
	Private _cable_2_type As String
	
	Private _cable_1_start_length As System.Nullable(Of Integer)
	
	Private _cable_2_start_length As System.Nullable(Of Integer)
	
	Private _cable_1_end_length As System.Nullable(Of Integer)
	
	Private _cable_2_end_length As System.Nullable(Of Integer)
	
	Private _cable_1_tension As System.Nullable(Of Integer)
	
	Private _cable_2_tension As System.Nullable(Of Integer)
	
	Private _disp_by As String
	
	Private _distdo_id As System.Nullable(Of Integer)
	
	Private _fluid_type As String
	
	Private _fluid_source As String
	
	Private _fluid_info_source As String
	
	Private _fluid_last_circulation_datetime As System.Nullable(Of Date)
	
	Private _fluid_weight As System.Nullable(Of Single)
	
	Private _fluid_specific_gravity As System.Nullable(Of Single)
	
	Private _fluid_level As String
	
	Private _fluid_filt_cake As System.Nullable(Of Single)
	
	Private _fluid_loss As System.Nullable(Of Single)
	
	Private _fluid_chlorides As System.Nullable(Of Integer)
	
	Private _fluid_calcium As System.Nullable(Of Single)
	
	Private _fluid_rm As System.Nullable(Of Single)
	
	Private _fluid_rm_at As System.Nullable(Of Integer)
	
	Private _fluid_rmf As System.Nullable(Of Single)
	
	Private _fluid_rmf_at As System.Nullable(Of Integer)
	
	Private _fluid_rmc As System.Nullable(Of Single)
	
	Private _fluid_rmc_at As System.Nullable(Of Integer)
	
	Private _fluid_rmbt As System.Nullable(Of Single)
	
	Private _fluid_rmbt_at As System.Nullable(Of Integer)
	
	Private _fluid_ph As System.Nullable(Of Single)
	
	Private _fluid_h2s As System.Nullable(Of Single)
	
	Private _fluid_co2 As System.Nullable(Of Single)
	
	Private _fluid_viscosity As System.Nullable(Of Single)
	
	Private _fluid_gels_s As System.Nullable(Of Single)
	
	Private _fluid_gels_m As System.Nullable(Of Single)
	
	Private _fluid_pv As System.Nullable(Of Single)
	
	Private _fluid_vp As System.Nullable(Of Single)
	
	Private _fluid_h2o_percent_1 As System.Nullable(Of Single)
	
	Private _fluid_h2o_percent_2 As System.Nullable(Of Single)
	
	Private _fluid_sand As System.Nullable(Of Single)
	
	Private _fluid_solids As System.Nullable(Of Single)
	
	Private _fluid_sec_lc_material As String
	
	Private _fluid_rugosity As System.Nullable(Of Single)
	
	Private _fluid_washouts As String
	
	Private _fluid_ovalness As String
	
	Private _fluid_corrections As String
	
	Private _fluid_mud_loss As System.Nullable(Of Single)
	
	Private _fluid_barites As System.Nullable(Of Single)
	
	Private _tubing_hanger_type As String
	
	Private _tree_length_2 As System.Nullable(Of Single)
	
	Private _tree_length_3 As System.Nullable(Of Single)
	
	Private _top_connection As String
	
	Private _blind_rams As String
	
	Private _work_spool As System.Nullable(Of Boolean)
	
	Private _slant_well As System.Nullable(Of Boolean)
	
	Private _special_instructions As String
	
	Private _gun_loading_complete_flag As System.Nullable(Of Boolean)
	
	Private _gun_loading_complete_datetime As System.Nullable(Of Date)
	
	Private _gun_loader As String
	
	Private _comments As String
	
	Private _psl As String
	
	Private _competitor As String
	
	Private _lost_notes As String
	
	Private _unit_comment As String
	
	Private _dispatch_export_datetime As System.Nullable(Of Date)
	
	Private _dispatch_exported_by As String
	
	Private _lsd As String
	
	Private _jsa_rec_id As System.Nullable(Of Integer)
	
	Private _created_from_well_master_flag As Boolean
	
	Private _uwi As String
	
	Private _well_license_number As String
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Private _data_read_datetime As Date
	
	Private _breakthrough_job_flag As Boolean
	
	Private _province As String
	
	Private _sold_to_id As System.Nullable(Of Integer)
	
	Private _well_master_number As String
	
	Private _wellhead_pressure As System.Nullable(Of Single)
	
	Private _true_vertical_depth As System.Nullable(Of Single)
	
	Private _core_requests As System.Nullable(Of Integer)
	
	Private _sample_requests As System.Nullable(Of Integer)
	
	Private _pressure_requests As System.Nullable(Of Integer)
	
	Private _ecrm_opportunity_id As String
	
	Private _fso_quote_gpi_list As String
	
	Private _sold_to_address_rec_id As System.Nullable(Of Integer)
	
	Private _downhole_lat As System.Nullable(Of Decimal)
	
	Private _downhole_lon As System.Nullable(Of Decimal)
	
	Private _tight_hole_user_access_level As String
	
	Private _cable_3_id As String
	
	Private _cable_3_type As String
	
	Private _cable_3_start_length As System.Nullable(Of Integer)
	
	Private _cable_3_end_length As System.Nullable(Of Integer)
	
	Private _cable_3_tension As System.Nullable(Of Integer)
	
	Private _cable_1_magnetic_marks As String
	
	Private _cable_1_sheave_od As System.Nullable(Of Single)
	
	Private _cable_2_magnetic_marks As String
	
	Private _cable_2_sheave_od As System.Nullable(Of Single)
	
	Private _cable_3_magnetic_marks As String
	
	Private _cable_3_sheave_od As System.Nullable(Of Single)
	
	Private _cable_1_cuts As System.Nullable(Of Integer)
	
	Private _cable_2_cuts As System.Nullable(Of Integer)
	
	Private _cable_3_cuts As System.Nullable(Of Integer)
	
	Private _customer_name As String
	
	Private _county_desc As String
	
	Private _distdo_name As String
	
	Private _rig_name As String
	
	Private _environment_desc As String
	
	Private _county_state As String
	
	Private _country_name As String
	
	Private _truck_start_hours As System.Nullable(Of Integer)
	
	Private _truck_end_hours As System.Nullable(Of Integer)
	
	Private _aux_unit_start_hours As System.Nullable(Of Integer)
	
	Private _aux_unit_end_hours As System.Nullable(Of Integer)
	
	Private _well_information_url As String
	
	Private _disp_has_fso_in_finance_mode_flag As Boolean
	
	Private _app_version As Integer
	
	Private _cable_1_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable_1_splice2_depth As System.Nullable(Of Integer)
	
	Private _cable_2_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable_2_splice2_depth As System.Nullable(Of Integer)
	
	Private _cable_3_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable_3_splice2_depth As System.Nullable(Of Integer)
	
	Private _version_number As Integer
	
	Private _length_measurement_unit As String
	
	Private _actual_lost_time_reason As String
	
	Private _dog_leg_severity As System.Nullable(Of Single)
	
	Private _current_driller_depth As System.Nullable(Of Single)
	
	Private _cable_1_flow_tube_size As System.Nullable(Of Single)
	
	Private _cable_2_flow_tube_size As System.Nullable(Of Single)
	
	Private _cable_3_flow_tube_size As System.Nullable(Of Single)
	
	Private _distance_measurement_unit As String
	
	Private _distance_to_well As System.Nullable(Of Single)
	
	Private _lost_detail_ids As String
	
	Private _remote_service_flag As Boolean
	
	Private _remote_unit As String
	
	Private _fimp_count As Integer
	
	Private _max_overbalance_pressure As System.Nullable(Of Single)
	
	Private _critical_job_flag As Boolean
	
	Private _job_color_code As String
	
	Private _job_approved_state As Byte
	
	Private _equipment_required_flag As System.Nullable(Of Boolean)
	
	Private _remote_engineers_required As System.Nullable(Of Integer)
	
	Private _remote_operators_required As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Short)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnfirstalertChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfirstalertChanged()
    End Sub
    Partial Private Sub Onoilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onoilcomp_idChanged()
    End Sub
    Partial Private Sub OnrigChanging(value As String)
    End Sub
    Partial Private Sub OnrigChanged()
    End Sub
    Partial Private Sub Onrig_phoneChanging(value As String)
    End Sub
    Partial Private Sub Onrig_phoneChanged()
    End Sub
    Partial Private Sub Onapprox_startChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onapprox_startChanged()
    End Sub
    Partial Private Sub Onapprox_endChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onapprox_endChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub Onrec_byChanging(value As String)
    End Sub
    Partial Private Sub Onrec_byChanged()
    End Sub
    Partial Private Sub Onspec_reqChanging(value As String)
    End Sub
    Partial Private Sub Onspec_reqChanged()
    End Sub
    Partial Private Sub OnlatChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlatChanged()
    End Sub
    Partial Private Sub OnlonChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlonChanged()
    End Sub
    Partial Private Sub Onwell_nameChanging(value As String)
    End Sub
    Partial Private Sub Onwell_nameChanged()
    End Sub
    Partial Private Sub Onlegal_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Onlegal_descriptionChanged()
    End Sub
    Partial Private Sub Oncounty_idChanging(value As String)
    End Sub
    Partial Private Sub Oncounty_idChanged()
    End Sub
    Partial Private Sub OnfieldChanging(value As String)
    End Sub
    Partial Private Sub OnfieldChanged()
    End Sub
    Partial Private Sub Onapi_numberChanging(value As String)
    End Sub
    Partial Private Sub Onapi_numberChanged()
    End Sub
    Partial Private Sub Onkelly_bushing_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onkelly_bushing_depthChanged()
    End Sub
    Partial Private Sub Onrotary_table_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onrotary_table_depthChanged()
    End Sub
    Partial Private Sub Ondrill_floor_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondrill_floor_depthChanged()
    End Sub
    Partial Private Sub Onrams_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onrams_depthChanged()
    End Sub
    Partial Private Sub Oncasing_head_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncasing_head_depthChanged()
    End Sub
    Partial Private Sub Onground_level_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onground_level_depthChanged()
    End Sub
    Partial Private Sub Onmean_sea_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmean_sea_depthChanged()
    End Sub
    Partial Private Sub Onsea_floor_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onsea_floor_depthChanged()
    End Sub
    Partial Private Sub Onoperation_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onoperation_market_codeChanged()
    End Sub
    Partial Private Sub Onenvironment_market_codeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub Onenvironment_market_codeChanged()
    End Sub
    Partial Private Sub Onrig_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onrig_type_market_codeChanged()
    End Sub
    Partial Private Sub Onservice_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onservice_type_market_codeChanged()
    End Sub
    Partial Private Sub Onwell_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onwell_type_market_codeChanged()
    End Sub
    Partial Private Sub Onacquisition_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onacquisition_market_codeChanged()
    End Sub
    Partial Private Sub Onsecurity_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onsecurity_market_codeChanged()
    End Sub
    Partial Private Sub Onprospect_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onprospect_market_codeChanged()
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanged()
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanged()
    End Sub
    Partial Private Sub Ondensity_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondensity_measurement_unitChanged()
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanged()
    End Sub
    Partial Private Sub Onweight_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onweight_measurement_unitChanged()
    End Sub
    Partial Private Sub Onconcentration_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onconcentration_measurement_unitChanged()
    End Sub
    Partial Private Sub Oncurrency_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Oncurrency_measurement_unitChanged()
    End Sub
    Partial Private Sub Onh2sChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onh2sChanged()
    End Sub
    Partial Private Sub Onco2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onco2Changed()
    End Sub
    Partial Private Sub Onsurface_tempChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onsurface_tempChanged()
    End Sub
    Partial Private Sub OnbhtChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnbhtChanged()
    End Sub
    Partial Private Sub OndeviationChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OndeviationChanged()
    End Sub
    Partial Private Sub Onmax_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_pressureChanged()
    End Sub
    Partial Private Sub Onrun_numberChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Onrun_numberChanged()
    End Sub
    Partial Private Sub Oninstrument_protectionChanging(value As String)
    End Sub
    Partial Private Sub Oninstrument_protectionChanged()
    End Sub
    Partial Private Sub Onperm_datumChanging(value As String)
    End Sub
    Partial Private Sub Onperm_datumChanged()
    End Sub
    Partial Private Sub Onperm_datum_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onperm_datum_depthChanged()
    End Sub
    Partial Private Sub Ondriller_zeroChanging(value As String)
    End Sub
    Partial Private Sub Ondriller_zeroChanged()
    End Sub
    Partial Private Sub Onwireline_zeroChanging(value As String)
    End Sub
    Partial Private Sub Onwireline_zeroChanged()
    End Sub
    Partial Private Sub Onwireline_zero_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwireline_zero_depthChanged()
    End Sub
    Partial Private Sub Ondriller_tdChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondriller_tdChanged()
    End Sub
    Partial Private Sub Onwireline_tdChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwireline_tdChanged()
    End Sub
    Partial Private Sub Onroad_direcChanging(value As String)
    End Sub
    Partial Private Sub Onroad_direcChanged()
    End Sub
    Partial Private Sub Onequipment_left_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_left_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_on_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_on_loc_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_left_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_left_loc_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_returned_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_returned_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_left_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_left_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_on_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_on_loc_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_started_job_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_started_job_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_left_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_left_loc_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_returned_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_returned_datetimeChanged()
    End Sub
    Partial Private Sub Oncore_attemptsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncore_attemptsChanged()
    End Sub
    Partial Private Sub Onsample_attemptsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsample_attemptsChanged()
    End Sub
    Partial Private Sub Onpressure_attemptsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpressure_attemptsChanged()
    End Sub
    Partial Private Sub Oncores_soldChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncores_soldChanged()
    End Sub
    Partial Private Sub Onsamples_soldChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsamples_soldChanged()
    End Sub
    Partial Private Sub Onpressures_soldChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpressures_soldChanged()
    End Sub
    Partial Private Sub OntruckChanging(value As String)
    End Sub
    Partial Private Sub OntruckChanged()
    End Sub
    Partial Private Sub Onaux_unitChanging(value As String)
    End Sub
    Partial Private Sub Onaux_unitChanged()
    End Sub
    Partial Private Sub Onengineer1Changing(value As String)
    End Sub
    Partial Private Sub Onengineer1Changed()
    End Sub
    Partial Private Sub Oncable_1_idChanging(value As String)
    End Sub
    Partial Private Sub Oncable_1_idChanged()
    End Sub
    Partial Private Sub Oncable_2_idChanging(value As String)
    End Sub
    Partial Private Sub Oncable_2_idChanged()
    End Sub
    Partial Private Sub Oncable_1_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncable_1_typeChanged()
    End Sub
    Partial Private Sub Oncable_2_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncable_2_typeChanged()
    End Sub
    Partial Private Sub Oncable_1_start_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_start_lengthChanged()
    End Sub
    Partial Private Sub Oncable_2_start_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_start_lengthChanged()
    End Sub
    Partial Private Sub Oncable_1_end_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_end_lengthChanged()
    End Sub
    Partial Private Sub Oncable_2_end_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_end_lengthChanged()
    End Sub
    Partial Private Sub Oncable_1_tensionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_tensionChanged()
    End Sub
    Partial Private Sub Oncable_2_tensionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_tensionChanged()
    End Sub
    Partial Private Sub Ondisp_byChanging(value As String)
    End Sub
    Partial Private Sub Ondisp_byChanged()
    End Sub
    Partial Private Sub Ondistdo_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondistdo_idChanged()
    End Sub
    Partial Private Sub Onfluid_typeChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_typeChanged()
    End Sub
    Partial Private Sub Onfluid_sourceChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_sourceChanged()
    End Sub
    Partial Private Sub Onfluid_info_sourceChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_info_sourceChanged()
    End Sub
    Partial Private Sub Onfluid_last_circulation_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfluid_last_circulation_datetimeChanged()
    End Sub
    Partial Private Sub Onfluid_weightChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_weightChanged()
    End Sub
    Partial Private Sub Onfluid_specific_gravityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_specific_gravityChanged()
    End Sub
    Partial Private Sub Onfluid_levelChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_levelChanged()
    End Sub
    Partial Private Sub Onfluid_filt_cakeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_filt_cakeChanged()
    End Sub
    Partial Private Sub Onfluid_lossChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_lossChanged()
    End Sub
    Partial Private Sub Onfluid_chloridesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_chloridesChanged()
    End Sub
    Partial Private Sub Onfluid_calciumChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_calciumChanged()
    End Sub
    Partial Private Sub Onfluid_rmChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmChanged()
    End Sub
    Partial Private Sub Onfluid_rm_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rm_atChanged()
    End Sub
    Partial Private Sub Onfluid_rmfChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmfChanged()
    End Sub
    Partial Private Sub Onfluid_rmf_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rmf_atChanged()
    End Sub
    Partial Private Sub Onfluid_rmcChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmcChanged()
    End Sub
    Partial Private Sub Onfluid_rmc_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rmc_atChanged()
    End Sub
    Partial Private Sub Onfluid_rmbtChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmbtChanged()
    End Sub
    Partial Private Sub Onfluid_rmbt_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rmbt_atChanged()
    End Sub
    Partial Private Sub Onfluid_phChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_phChanged()
    End Sub
    Partial Private Sub Onfluid_h2sChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_h2sChanged()
    End Sub
    Partial Private Sub Onfluid_co2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_co2Changed()
    End Sub
    Partial Private Sub Onfluid_viscosityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_viscosityChanged()
    End Sub
    Partial Private Sub Onfluid_gels_sChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_gels_sChanged()
    End Sub
    Partial Private Sub Onfluid_gels_mChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_gels_mChanged()
    End Sub
    Partial Private Sub Onfluid_pvChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_pvChanged()
    End Sub
    Partial Private Sub Onfluid_vpChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_vpChanged()
    End Sub
    Partial Private Sub Onfluid_h2o_percent_1Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_h2o_percent_1Changed()
    End Sub
    Partial Private Sub Onfluid_h2o_percent_2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_h2o_percent_2Changed()
    End Sub
    Partial Private Sub Onfluid_sandChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_sandChanged()
    End Sub
    Partial Private Sub Onfluid_solidsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_solidsChanged()
    End Sub
    Partial Private Sub Onfluid_sec_lc_materialChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_sec_lc_materialChanged()
    End Sub
    Partial Private Sub Onfluid_rugosityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rugosityChanged()
    End Sub
    Partial Private Sub Onfluid_washoutsChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_washoutsChanged()
    End Sub
    Partial Private Sub Onfluid_ovalnessChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_ovalnessChanged()
    End Sub
    Partial Private Sub Onfluid_correctionsChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_correctionsChanged()
    End Sub
    Partial Private Sub Onfluid_mud_lossChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_mud_lossChanged()
    End Sub
    Partial Private Sub Onfluid_baritesChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_baritesChanged()
    End Sub
    Partial Private Sub Ontubing_hanger_typeChanging(value As String)
    End Sub
    Partial Private Sub Ontubing_hanger_typeChanged()
    End Sub
    Partial Private Sub Ontree_length_2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontree_length_2Changed()
    End Sub
    Partial Private Sub Ontree_length_3Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontree_length_3Changed()
    End Sub
    Partial Private Sub Ontop_connectionChanging(value As String)
    End Sub
    Partial Private Sub Ontop_connectionChanged()
    End Sub
    Partial Private Sub Onblind_ramsChanging(value As String)
    End Sub
    Partial Private Sub Onblind_ramsChanged()
    End Sub
    Partial Private Sub Onwork_spoolChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onwork_spoolChanged()
    End Sub
    Partial Private Sub Onslant_wellChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onslant_wellChanged()
    End Sub
    Partial Private Sub Onspecial_instructionsChanging(value As String)
    End Sub
    Partial Private Sub Onspecial_instructionsChanged()
    End Sub
    Partial Private Sub Ongun_loading_complete_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Ongun_loading_complete_flagChanged()
    End Sub
    Partial Private Sub Ongun_loading_complete_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ongun_loading_complete_datetimeChanged()
    End Sub
    Partial Private Sub Ongun_loaderChanging(value As String)
    End Sub
    Partial Private Sub Ongun_loaderChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    Partial Private Sub OnpslChanging(value As String)
    End Sub
    Partial Private Sub OnpslChanged()
    End Sub
    Partial Private Sub OncompetitorChanging(value As String)
    End Sub
    Partial Private Sub OncompetitorChanged()
    End Sub
    Partial Private Sub Onlost_notesChanging(value As String)
    End Sub
    Partial Private Sub Onlost_notesChanged()
    End Sub
    Partial Private Sub Onunit_commentChanging(value As String)
    End Sub
    Partial Private Sub Onunit_commentChanged()
    End Sub
    Partial Private Sub Ondispatch_export_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondispatch_export_datetimeChanged()
    End Sub
    Partial Private Sub Ondispatch_exported_byChanging(value As String)
    End Sub
    Partial Private Sub Ondispatch_exported_byChanged()
    End Sub
    Partial Private Sub OnlsdChanging(value As String)
    End Sub
    Partial Private Sub OnlsdChanged()
    End Sub
    Partial Private Sub Onjsa_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onjsa_rec_idChanged()
    End Sub
    Partial Private Sub Oncreated_from_well_master_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncreated_from_well_master_flagChanged()
    End Sub
    Partial Private Sub OnuwiChanging(value As String)
    End Sub
    Partial Private Sub OnuwiChanged()
    End Sub
    Partial Private Sub Onwell_license_numberChanging(value As String)
    End Sub
    Partial Private Sub Onwell_license_numberChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanging(value As String)
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanged()
    End Sub
    Partial Private Sub Ondata_read_datetimeChanging(value As Date)
    End Sub
    Partial Private Sub Ondata_read_datetimeChanged()
    End Sub
    Partial Private Sub Onbreakthrough_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onbreakthrough_job_flagChanged()
    End Sub
    Partial Private Sub OnprovinceChanging(value As String)
    End Sub
    Partial Private Sub OnprovinceChanged()
    End Sub
    Partial Private Sub Onsold_to_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_idChanged()
    End Sub
    Partial Private Sub Onwell_master_numberChanging(value As String)
    End Sub
    Partial Private Sub Onwell_master_numberChanged()
    End Sub
    Partial Private Sub Onwellhead_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwellhead_pressureChanged()
    End Sub
    Partial Private Sub Ontrue_vertical_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontrue_vertical_depthChanged()
    End Sub
    Partial Private Sub Oncore_requestsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncore_requestsChanged()
    End Sub
    Partial Private Sub Onsample_requestsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsample_requestsChanged()
    End Sub
    Partial Private Sub Onpressure_requestsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpressure_requestsChanged()
    End Sub
    Partial Private Sub Onecrm_opportunity_idChanging(value As String)
    End Sub
    Partial Private Sub Onecrm_opportunity_idChanged()
    End Sub
    Partial Private Sub Onfso_quote_gpi_listChanging(value As String)
    End Sub
    Partial Private Sub Onfso_quote_gpi_listChanged()
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanged()
    End Sub
    Partial Private Sub Ondownhole_latChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ondownhole_latChanged()
    End Sub
    Partial Private Sub Ondownhole_lonChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ondownhole_lonChanged()
    End Sub
    Partial Private Sub Ontight_hole_user_access_levelChanging(value As String)
    End Sub
    Partial Private Sub Ontight_hole_user_access_levelChanged()
    End Sub
    Partial Private Sub Oncable_3_idChanging(value As String)
    End Sub
    Partial Private Sub Oncable_3_idChanged()
    End Sub
    Partial Private Sub Oncable_3_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncable_3_typeChanged()
    End Sub
    Partial Private Sub Oncable_3_start_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_start_lengthChanged()
    End Sub
    Partial Private Sub Oncable_3_end_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_end_lengthChanged()
    End Sub
    Partial Private Sub Oncable_3_tensionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_tensionChanged()
    End Sub
    Partial Private Sub Oncable_1_magnetic_marksChanging(value As String)
    End Sub
    Partial Private Sub Oncable_1_magnetic_marksChanged()
    End Sub
    Partial Private Sub Oncable_1_sheave_odChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_1_sheave_odChanged()
    End Sub
    Partial Private Sub Oncable_2_magnetic_marksChanging(value As String)
    End Sub
    Partial Private Sub Oncable_2_magnetic_marksChanged()
    End Sub
    Partial Private Sub Oncable_2_sheave_odChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_2_sheave_odChanged()
    End Sub
    Partial Private Sub Oncable_3_magnetic_marksChanging(value As String)
    End Sub
    Partial Private Sub Oncable_3_magnetic_marksChanged()
    End Sub
    Partial Private Sub Oncable_3_sheave_odChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_3_sheave_odChanged()
    End Sub
    Partial Private Sub Oncable_1_cutsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_cutsChanged()
    End Sub
    Partial Private Sub Oncable_2_cutsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_cutsChanged()
    End Sub
    Partial Private Sub Oncable_3_cutsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_cutsChanged()
    End Sub
    Partial Private Sub Oncustomer_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncustomer_nameChanged()
    End Sub
    Partial Private Sub Oncounty_descChanging(value As String)
    End Sub
    Partial Private Sub Oncounty_descChanged()
    End Sub
    Partial Private Sub Ondistdo_nameChanging(value As String)
    End Sub
    Partial Private Sub Ondistdo_nameChanged()
    End Sub
    Partial Private Sub Onrig_nameChanging(value As String)
    End Sub
    Partial Private Sub Onrig_nameChanged()
    End Sub
    Partial Private Sub Onenvironment_descChanging(value As String)
    End Sub
    Partial Private Sub Onenvironment_descChanged()
    End Sub
    Partial Private Sub Oncounty_stateChanging(value As String)
    End Sub
    Partial Private Sub Oncounty_stateChanged()
    End Sub
    Partial Private Sub Oncountry_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncountry_nameChanged()
    End Sub
    Partial Private Sub Ontruck_start_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontruck_start_hoursChanged()
    End Sub
    Partial Private Sub Ontruck_end_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontruck_end_hoursChanged()
    End Sub
    Partial Private Sub Onaux_unit_start_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onaux_unit_start_hoursChanged()
    End Sub
    Partial Private Sub Onaux_unit_end_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onaux_unit_end_hoursChanged()
    End Sub
    Partial Private Sub Onwell_information_urlChanging(value As String)
    End Sub
    Partial Private Sub Onwell_information_urlChanged()
    End Sub
    Partial Private Sub Ondisp_has_fso_in_finance_mode_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ondisp_has_fso_in_finance_mode_flagChanged()
    End Sub
    Partial Private Sub Onapp_versionChanging(value As Integer)
    End Sub
    Partial Private Sub Onapp_versionChanged()
    End Sub
    Partial Private Sub Oncable_1_splice1_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_splice1_depthChanged()
    End Sub
    Partial Private Sub Oncable_1_splice2_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_splice2_depthChanged()
    End Sub
    Partial Private Sub Oncable_2_splice1_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_splice1_depthChanged()
    End Sub
    Partial Private Sub Oncable_2_splice2_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_splice2_depthChanged()
    End Sub
    Partial Private Sub Oncable_3_splice1_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_splice1_depthChanged()
    End Sub
    Partial Private Sub Oncable_3_splice2_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_splice2_depthChanged()
    End Sub
    Partial Private Sub Onversion_numberChanging(value As Integer)
    End Sub
    Partial Private Sub Onversion_numberChanged()
    End Sub
    Partial Private Sub Onlength_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onlength_measurement_unitChanged()
    End Sub
    Partial Private Sub Onactual_lost_time_reasonChanging(value As String)
    End Sub
    Partial Private Sub Onactual_lost_time_reasonChanged()
    End Sub
    Partial Private Sub Ondog_leg_severityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondog_leg_severityChanged()
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanged()
    End Sub
    Partial Private Sub Oncable_1_flow_tube_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_1_flow_tube_sizeChanged()
    End Sub
    Partial Private Sub Oncable_2_flow_tube_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_2_flow_tube_sizeChanged()
    End Sub
    Partial Private Sub Oncable_3_flow_tube_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_3_flow_tube_sizeChanged()
    End Sub
    Partial Private Sub Ondistance_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondistance_measurement_unitChanged()
    End Sub
    Partial Private Sub Ondistance_to_wellChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondistance_to_wellChanged()
    End Sub
    Partial Private Sub Onlost_detail_idsChanging(value As String)
    End Sub
    Partial Private Sub Onlost_detail_idsChanged()
    End Sub
    Partial Private Sub Onremote_service_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onremote_service_flagChanged()
    End Sub
    Partial Private Sub Onremote_unitChanging(value As String)
    End Sub
    Partial Private Sub Onremote_unitChanged()
    End Sub
    Partial Private Sub Onfimp_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onfimp_countChanged()
    End Sub
    Partial Private Sub Onmax_overbalance_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_overbalance_pressureChanged()
    End Sub
    Partial Private Sub Oncritical_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncritical_job_flagChanged()
    End Sub
    Partial Private Sub Onjob_color_codeChanging(value As String)
    End Sub
    Partial Private Sub Onjob_color_codeChanged()
    End Sub
    Partial Private Sub Onjob_approved_stateChanging(value As Byte)
    End Sub
    Partial Private Sub Onjob_approved_stateChanged()
    End Sub
    Partial Private Sub Onequipment_required_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onequipment_required_flagChanged()
    End Sub
    Partial Private Sub Onremote_engineers_requiredChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onremote_engineers_requiredChanged()
    End Sub
    Partial Private Sub Onremote_operators_requiredChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onremote_operators_requiredChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstalert", DbType:="SmallDateTime")>  _
	Public Property firstalert() As System.Nullable(Of Date)
		Get
			Return Me._firstalert
		End Get
		Set
			If (Me._firstalert.Equals(value) = false) Then
				Me.OnfirstalertChanging(value)
				Me.SendPropertyChanging
				Me._firstalert = value
				Me.SendPropertyChanged("firstalert")
				Me.OnfirstalertChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me.Onoilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._oilcomp_id = value
				Me.SendPropertyChanged("oilcomp_id")
				Me.Onoilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig", DbType:="VarChar(40)")>  _
	Public Property rig() As String
		Get
			Return Me._rig
		End Get
		Set
			If (String.Equals(Me._rig, value) = false) Then
				Me.OnrigChanging(value)
				Me.SendPropertyChanging
				Me._rig = value
				Me.SendPropertyChanged("rig")
				Me.OnrigChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_phone", DbType:="VarChar(30)")>  _
	Public Property rig_phone() As String
		Get
			Return Me._rig_phone
		End Get
		Set
			If (String.Equals(Me._rig_phone, value) = false) Then
				Me.Onrig_phoneChanging(value)
				Me.SendPropertyChanging
				Me._rig_phone = value
				Me.SendPropertyChanged("rig_phone")
				Me.Onrig_phoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start", DbType:="SmallDateTime")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me.Onapprox_startChanging(value)
				Me.SendPropertyChanging
				Me._approx_start = value
				Me.SendPropertyChanged("approx_start")
				Me.Onapprox_startChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_end", DbType:="DateTime")>  _
	Public Property approx_end() As System.Nullable(Of Date)
		Get
			Return Me._approx_end
		End Get
		Set
			If (Me._approx_end.Equals(value) = false) Then
				Me.Onapprox_endChanging(value)
				Me.SendPropertyChanging
				Me._approx_end = value
				Me.SendPropertyChanged("approx_end")
				Me.Onapprox_endChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_by", DbType:="varchar(20)")>  _
	Public Property rec_by() As String
		Get
			Return Me._rec_by
		End Get
		Set
			If (String.Equals(Me._rec_by, value) = false) Then
				Me.Onrec_byChanging(value)
				Me.SendPropertyChanging
				Me._rec_by = value
				Me.SendPropertyChanged("rec_by")
				Me.Onrec_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_spec_req", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property spec_req() As String
		Get
			Return Me._spec_req
		End Get
		Set
			If (String.Equals(Me._spec_req, value) = false) Then
				Me.Onspec_reqChanging(value)
				Me.SendPropertyChanging
				Me._spec_req = value
				Me.SendPropertyChanged("spec_req")
				Me.Onspec_reqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lat", DbType:="Decimal(10,8)")>  _
	Public Property lat() As System.Nullable(Of Decimal)
		Get
			Return Me._lat
		End Get
		Set
			If (Me._lat.Equals(value) = false) Then
				Me.OnlatChanging(value)
				Me.SendPropertyChanging
				Me._lat = value
				Me.SendPropertyChanged("lat")
				Me.OnlatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lon", DbType:="Decimal(11,8)")>  _
	Public Property lon() As System.Nullable(Of Decimal)
		Get
			Return Me._lon
		End Get
		Set
			If (Me._lon.Equals(value) = false) Then
				Me.OnlonChanging(value)
				Me.SendPropertyChanging
				Me._lon = value
				Me.SendPropertyChanged("lon")
				Me.OnlonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me.Onwell_nameChanging(value)
				Me.SendPropertyChanging
				Me._well_name = value
				Me.SendPropertyChanged("well_name")
				Me.Onwell_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_legal_description", DbType:="VarChar(150)")>  _
	Public Property legal_description() As String
		Get
			Return Me._legal_description
		End Get
		Set
			If (String.Equals(Me._legal_description, value) = false) Then
				Me.Onlegal_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._legal_description = value
				Me.SendPropertyChanged("legal_description")
				Me.Onlegal_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_id", DbType:="Char(5)")>  _
	Public Property county_id() As String
		Get
			Return Me._county_id
		End Get
		Set
			If (String.Equals(Me._county_id, value) = false) Then
				Me.Oncounty_idChanging(value)
				Me.SendPropertyChanging
				Me._county_id = value
				Me.SendPropertyChanged("county_id")
				Me.Oncounty_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field", DbType:="VarChar(30)")>  _
	Public Property field() As String
		Get
			Return Me._field
		End Get
		Set
			If (String.Equals(Me._field, value) = false) Then
				Me.OnfieldChanging(value)
				Me.SendPropertyChanging
				Me._field = value
				Me.SendPropertyChanged("field")
				Me.OnfieldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_api_number", DbType:="VarChar(30)")>  _
	Public Property api_number() As String
		Get
			Return Me._api_number
		End Get
		Set
			If (String.Equals(Me._api_number, value) = false) Then
				Me.Onapi_numberChanging(value)
				Me.SendPropertyChanging
				Me._api_number = value
				Me.SendPropertyChanged("api_number")
				Me.Onapi_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kelly_bushing_depth", DbType:="real")>  _
	Public Property kelly_bushing_depth() As System.Nullable(Of Single)
		Get
			Return Me._kelly_bushing_depth
		End Get
		Set
			If (Me._kelly_bushing_depth.Equals(value) = false) Then
				Me.Onkelly_bushing_depthChanging(value)
				Me.SendPropertyChanging
				Me._kelly_bushing_depth = value
				Me.SendPropertyChanged("kelly_bushing_depth")
				Me.Onkelly_bushing_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rotary_table_depth", DbType:="real")>  _
	Public Property rotary_table_depth() As System.Nullable(Of Single)
		Get
			Return Me._rotary_table_depth
		End Get
		Set
			If (Me._rotary_table_depth.Equals(value) = false) Then
				Me.Onrotary_table_depthChanging(value)
				Me.SendPropertyChanging
				Me._rotary_table_depth = value
				Me.SendPropertyChanged("rotary_table_depth")
				Me.Onrotary_table_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_drill_floor_depth", DbType:="real")>  _
	Public Property drill_floor_depth() As System.Nullable(Of Single)
		Get
			Return Me._drill_floor_depth
		End Get
		Set
			If (Me._drill_floor_depth.Equals(value) = false) Then
				Me.Ondrill_floor_depthChanging(value)
				Me.SendPropertyChanging
				Me._drill_floor_depth = value
				Me.SendPropertyChanged("drill_floor_depth")
				Me.Ondrill_floor_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rams_depth", DbType:="real")>  _
	Public Property rams_depth() As System.Nullable(Of Single)
		Get
			Return Me._rams_depth
		End Get
		Set
			If (Me._rams_depth.Equals(value) = false) Then
				Me.Onrams_depthChanging(value)
				Me.SendPropertyChanging
				Me._rams_depth = value
				Me.SendPropertyChanged("rams_depth")
				Me.Onrams_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_casing_head_depth", DbType:="real")>  _
	Public Property casing_head_depth() As System.Nullable(Of Single)
		Get
			Return Me._casing_head_depth
		End Get
		Set
			If (Me._casing_head_depth.Equals(value) = false) Then
				Me.Oncasing_head_depthChanging(value)
				Me.SendPropertyChanging
				Me._casing_head_depth = value
				Me.SendPropertyChanged("casing_head_depth")
				Me.Oncasing_head_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ground_level_depth", DbType:="real")>  _
	Public Property ground_level_depth() As System.Nullable(Of Single)
		Get
			Return Me._ground_level_depth
		End Get
		Set
			If (Me._ground_level_depth.Equals(value) = false) Then
				Me.Onground_level_depthChanging(value)
				Me.SendPropertyChanging
				Me._ground_level_depth = value
				Me.SendPropertyChanged("ground_level_depth")
				Me.Onground_level_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mean_sea_depth", DbType:="real")>  _
	Public Property mean_sea_depth() As System.Nullable(Of Single)
		Get
			Return Me._mean_sea_depth
		End Get
		Set
			If (Me._mean_sea_depth.Equals(value) = false) Then
				Me.Onmean_sea_depthChanging(value)
				Me.SendPropertyChanging
				Me._mean_sea_depth = value
				Me.SendPropertyChanged("mean_sea_depth")
				Me.Onmean_sea_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sea_floor_depth", DbType:="real")>  _
	Public Property sea_floor_depth() As System.Nullable(Of Single)
		Get
			Return Me._sea_floor_depth
		End Get
		Set
			If (Me._sea_floor_depth.Equals(value) = false) Then
				Me.Onsea_floor_depthChanging(value)
				Me.SendPropertyChanging
				Me._sea_floor_depth = value
				Me.SendPropertyChanged("sea_floor_depth")
				Me.Onsea_floor_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operation_market_code", DbType:="VarChar(50)")>  _
	Public Property operation_market_code() As String
		Get
			Return Me._operation_market_code
		End Get
		Set
			If (String.Equals(Me._operation_market_code, value) = false) Then
				Me.Onoperation_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._operation_market_code = value
				Me.SendPropertyChanged("operation_market_code")
				Me.Onoperation_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_environment_market_code", DbType:="smallint")>  _
	Public Property environment_market_code() As System.Nullable(Of Short)
		Get
			Return Me._environment_market_code
		End Get
		Set
			If (Me._environment_market_code.Equals(value) = false) Then
				Me.Onenvironment_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._environment_market_code = value
				Me.SendPropertyChanged("environment_market_code")
				Me.Onenvironment_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_type_market_code", DbType:="VarChar(50)")>  _
	Public Property rig_type_market_code() As String
		Get
			Return Me._rig_type_market_code
		End Get
		Set
			If (String.Equals(Me._rig_type_market_code, value) = false) Then
				Me.Onrig_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._rig_type_market_code = value
				Me.SendPropertyChanged("rig_type_market_code")
				Me.Onrig_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_type_market_code", DbType:="VarChar(50)")>  _
	Public Property service_type_market_code() As String
		Get
			Return Me._service_type_market_code
		End Get
		Set
			If (String.Equals(Me._service_type_market_code, value) = false) Then
				Me.Onservice_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._service_type_market_code = value
				Me.SendPropertyChanged("service_type_market_code")
				Me.Onservice_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_type_market_code", DbType:="VarChar(50)")>  _
	Public Property well_type_market_code() As String
		Get
			Return Me._well_type_market_code
		End Get
		Set
			If (String.Equals(Me._well_type_market_code, value) = false) Then
				Me.Onwell_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._well_type_market_code = value
				Me.SendPropertyChanged("well_type_market_code")
				Me.Onwell_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_market_code", DbType:="VarChar(50)")>  _
	Public Property acquisition_market_code() As String
		Get
			Return Me._acquisition_market_code
		End Get
		Set
			If (String.Equals(Me._acquisition_market_code, value) = false) Then
				Me.Onacquisition_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._acquisition_market_code = value
				Me.SendPropertyChanged("acquisition_market_code")
				Me.Onacquisition_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_security_market_code", DbType:="VarChar(50)")>  _
	Public Property security_market_code() As String
		Get
			Return Me._security_market_code
		End Get
		Set
			If (String.Equals(Me._security_market_code, value) = false) Then
				Me.Onsecurity_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._security_market_code = value
				Me.SendPropertyChanged("security_market_code")
				Me.Onsecurity_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_market_code", DbType:="VarChar(50)")>  _
	Public Property prospect_market_code() As String
		Get
			Return Me._prospect_market_code
		End Get
		Set
			If (String.Equals(Me._prospect_market_code, value) = false) Then
				Me.Onprospect_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._prospect_market_code = value
				Me.SendPropertyChanged("prospect_market_code")
				Me.Onprospect_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property depth_measurement_unit() As String
		Get
			Return Me._depth_measurement_unit
		End Get
		Set
			If (String.Equals(Me._depth_measurement_unit, value) = false) Then
				Me.Ondepth_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._depth_measurement_unit = value
				Me.SendPropertyChanged("depth_measurement_unit")
				Me.Ondepth_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hole_size_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property hole_size_measurement_unit() As String
		Get
			Return Me._hole_size_measurement_unit
		End Get
		Set
			If (String.Equals(Me._hole_size_measurement_unit, value) = false) Then
				Me.Onhole_size_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._hole_size_measurement_unit = value
				Me.SendPropertyChanged("hole_size_measurement_unit")
				Me.Onhole_size_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_density_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property density_measurement_unit() As String
		Get
			Return Me._density_measurement_unit
		End Get
		Set
			If (String.Equals(Me._density_measurement_unit, value) = false) Then
				Me.Ondensity_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._density_measurement_unit = value
				Me.SendPropertyChanged("density_measurement_unit")
				Me.Ondensity_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_temperature_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property temperature_measurement_unit() As String
		Get
			Return Me._temperature_measurement_unit
		End Get
		Set
			If (String.Equals(Me._temperature_measurement_unit, value) = false) Then
				Me.Ontemperature_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._temperature_measurement_unit = value
				Me.SendPropertyChanged("temperature_measurement_unit")
				Me.Ontemperature_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weight_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property weight_measurement_unit() As String
		Get
			Return Me._weight_measurement_unit
		End Get
		Set
			If (String.Equals(Me._weight_measurement_unit, value) = false) Then
				Me.Onweight_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._weight_measurement_unit = value
				Me.SendPropertyChanged("weight_measurement_unit")
				Me.Onweight_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_concentration_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property concentration_measurement_unit() As String
		Get
			Return Me._concentration_measurement_unit
		End Get
		Set
			If (String.Equals(Me._concentration_measurement_unit, value) = false) Then
				Me.Onconcentration_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._concentration_measurement_unit = value
				Me.SendPropertyChanged("concentration_measurement_unit")
				Me.Onconcentration_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property currency_measurement_unit() As String
		Get
			Return Me._currency_measurement_unit
		End Get
		Set
			If (String.Equals(Me._currency_measurement_unit, value) = false) Then
				Me.Oncurrency_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._currency_measurement_unit = value
				Me.SendPropertyChanged("currency_measurement_unit")
				Me.Oncurrency_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_h2s", DbType:="Real")>  _
	Public Property h2s() As System.Nullable(Of Single)
		Get
			Return Me._h2s
		End Get
		Set
			If (Me._h2s.Equals(value) = false) Then
				Me.Onh2sChanging(value)
				Me.SendPropertyChanging
				Me._h2s = value
				Me.SendPropertyChanged("h2s")
				Me.Onh2sChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_co2", DbType:="Real")>  _
	Public Property co2() As System.Nullable(Of Single)
		Get
			Return Me._co2
		End Get
		Set
			If (Me._co2.Equals(value) = false) Then
				Me.Onco2Changing(value)
				Me.SendPropertyChanging
				Me._co2 = value
				Me.SendPropertyChanged("co2")
				Me.Onco2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_surface_temp", DbType:="Real")>  _
	Public Property surface_temp() As System.Nullable(Of Single)
		Get
			Return Me._surface_temp
		End Get
		Set
			If (Me._surface_temp.Equals(value) = false) Then
				Me.Onsurface_tempChanging(value)
				Me.SendPropertyChanging
				Me._surface_temp = value
				Me.SendPropertyChanged("surface_temp")
				Me.Onsurface_tempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bht", DbType:="Real")>  _
	Public Property bht() As System.Nullable(Of Single)
		Get
			Return Me._bht
		End Get
		Set
			If (Me._bht.Equals(value) = false) Then
				Me.OnbhtChanging(value)
				Me.SendPropertyChanging
				Me._bht = value
				Me.SendPropertyChanged("bht")
				Me.OnbhtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deviation", DbType:="Real")>  _
	Public Property deviation() As System.Nullable(Of Single)
		Get
			Return Me._deviation
		End Get
		Set
			If (Me._deviation.Equals(value) = false) Then
				Me.OndeviationChanging(value)
				Me.SendPropertyChanging
				Me._deviation = value
				Me.SendPropertyChanged("deviation")
				Me.OndeviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_pressure", DbType:="Real")>  _
	Public Property max_pressure() As System.Nullable(Of Single)
		Get
			Return Me._max_pressure
		End Get
		Set
			If (Me._max_pressure.Equals(value) = false) Then
				Me.Onmax_pressureChanging(value)
				Me.SendPropertyChanging
				Me._max_pressure = value
				Me.SendPropertyChanged("max_pressure")
				Me.Onmax_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_number", DbType:="TinyInt")>  _
	Public Property run_number() As System.Nullable(Of Byte)
		Get
			Return Me._run_number
		End Get
		Set
			If (Me._run_number.Equals(value) = false) Then
				Me.Onrun_numberChanging(value)
				Me.SendPropertyChanging
				Me._run_number = value
				Me.SendPropertyChanged("run_number")
				Me.Onrun_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_instrument_protection", DbType:="VarChar(50)")>  _
	Public Property instrument_protection() As String
		Get
			Return Me._instrument_protection
		End Get
		Set
			If (String.Equals(Me._instrument_protection, value) = false) Then
				Me.Oninstrument_protectionChanging(value)
				Me.SendPropertyChanging
				Me._instrument_protection = value
				Me.SendPropertyChanged("instrument_protection")
				Me.Oninstrument_protectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perm_datum", DbType:="VarChar(50)")>  _
	Public Property perm_datum() As String
		Get
			Return Me._perm_datum
		End Get
		Set
			If (String.Equals(Me._perm_datum, value) = false) Then
				Me.Onperm_datumChanging(value)
				Me.SendPropertyChanging
				Me._perm_datum = value
				Me.SendPropertyChanged("perm_datum")
				Me.Onperm_datumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perm_datum_depth", DbType:="real")>  _
	Public Property perm_datum_depth() As System.Nullable(Of Single)
		Get
			Return Me._perm_datum_depth
		End Get
		Set
			If (Me._perm_datum_depth.Equals(value) = false) Then
				Me.Onperm_datum_depthChanging(value)
				Me.SendPropertyChanging
				Me._perm_datum_depth = value
				Me.SendPropertyChanged("perm_datum_depth")
				Me.Onperm_datum_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_driller_zero", DbType:="VarChar(50)")>  _
	Public Property driller_zero() As String
		Get
			Return Me._driller_zero
		End Get
		Set
			If (String.Equals(Me._driller_zero, value) = false) Then
				Me.Ondriller_zeroChanging(value)
				Me.SendPropertyChanging
				Me._driller_zero = value
				Me.SendPropertyChanged("driller_zero")
				Me.Ondriller_zeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_zero", DbType:="VarChar(50)")>  _
	Public Property wireline_zero() As String
		Get
			Return Me._wireline_zero
		End Get
		Set
			If (String.Equals(Me._wireline_zero, value) = false) Then
				Me.Onwireline_zeroChanging(value)
				Me.SendPropertyChanging
				Me._wireline_zero = value
				Me.SendPropertyChanged("wireline_zero")
				Me.Onwireline_zeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_zero_depth", DbType:="real")>  _
	Public Property wireline_zero_depth() As System.Nullable(Of Single)
		Get
			Return Me._wireline_zero_depth
		End Get
		Set
			If (Me._wireline_zero_depth.Equals(value) = false) Then
				Me.Onwireline_zero_depthChanging(value)
				Me.SendPropertyChanging
				Me._wireline_zero_depth = value
				Me.SendPropertyChanged("wireline_zero_depth")
				Me.Onwireline_zero_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_driller_td", DbType:="real")>  _
	Public Property driller_td() As System.Nullable(Of Single)
		Get
			Return Me._driller_td
		End Get
		Set
			If (Me._driller_td.Equals(value) = false) Then
				Me.Ondriller_tdChanging(value)
				Me.SendPropertyChanging
				Me._driller_td = value
				Me.SendPropertyChanged("driller_td")
				Me.Ondriller_tdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_td", DbType:="real")>  _
	Public Property wireline_td() As System.Nullable(Of Single)
		Get
			Return Me._wireline_td
		End Get
		Set
			If (Me._wireline_td.Equals(value) = false) Then
				Me.Onwireline_tdChanging(value)
				Me.SendPropertyChanging
				Me._wireline_td = value
				Me.SendPropertyChanged("wireline_td")
				Me.Onwireline_tdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_road_direc", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property road_direc() As String
		Get
			Return Me._road_direc
		End Get
		Set
			If (String.Equals(Me._road_direc, value) = false) Then
				Me.Onroad_direcChanging(value)
				Me.SendPropertyChanging
				Me._road_direc = value
				Me.SendPropertyChanged("road_direc")
				Me.Onroad_direcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_left_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_left_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_left_datetime
		End Get
		Set
			If (Me._equipment_left_datetime.Equals(value) = false) Then
				Me.Onequipment_left_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_left_datetime = value
				Me.SendPropertyChanged("equipment_left_datetime")
				Me.Onequipment_left_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_on_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_on_loc_datetime
		End Get
		Set
			If (Me._equipment_on_loc_datetime.Equals(value) = false) Then
				Me.Onequipment_on_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_on_loc_datetime = value
				Me.SendPropertyChanged("equipment_on_loc_datetime")
				Me.Onequipment_on_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_left_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_left_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_left_loc_datetime
		End Get
		Set
			If (Me._equipment_left_loc_datetime.Equals(value) = false) Then
				Me.Onequipment_left_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_left_loc_datetime = value
				Me.SendPropertyChanged("equipment_left_loc_datetime")
				Me.Onequipment_left_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_returned_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_returned_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_returned_datetime
		End Get
		Set
			If (Me._equipment_returned_datetime.Equals(value) = false) Then
				Me.Onequipment_returned_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_returned_datetime = value
				Me.SendPropertyChanged("equipment_returned_datetime")
				Me.Onequipment_returned_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_left_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_left_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_left_datetime
		End Get
		Set
			If (Me._crew_left_datetime.Equals(value) = false) Then
				Me.Oncrew_left_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_left_datetime = value
				Me.SendPropertyChanged("crew_left_datetime")
				Me.Oncrew_left_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_on_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_on_loc_datetime
		End Get
		Set
			If (Me._crew_on_loc_datetime.Equals(value) = false) Then
				Me.Oncrew_on_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_on_loc_datetime = value
				Me.SendPropertyChanged("crew_on_loc_datetime")
				Me.Oncrew_on_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_started_job_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_started_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_started_job_datetime
		End Get
		Set
			If (Me._crew_started_job_datetime.Equals(value) = false) Then
				Me.Oncrew_started_job_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_started_job_datetime = value
				Me.SendPropertyChanged("crew_started_job_datetime")
				Me.Oncrew_started_job_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_finished_job_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_finished_job_datetime
		End Get
		Set
			If (Me._crew_finished_job_datetime.Equals(value) = false) Then
				Me.Oncrew_finished_job_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_finished_job_datetime = value
				Me.SendPropertyChanged("crew_finished_job_datetime")
				Me.Oncrew_finished_job_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_left_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_left_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_left_loc_datetime
		End Get
		Set
			If (Me._crew_left_loc_datetime.Equals(value) = false) Then
				Me.Oncrew_left_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_left_loc_datetime = value
				Me.SendPropertyChanged("crew_left_loc_datetime")
				Me.Oncrew_left_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_returned_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_returned_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_returned_datetime
		End Get
		Set
			If (Me._crew_returned_datetime.Equals(value) = false) Then
				Me.Oncrew_returned_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_returned_datetime = value
				Me.SendPropertyChanged("crew_returned_datetime")
				Me.Oncrew_returned_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_core_attempts", DbType:="Int")>  _
	Public Property core_attempts() As System.Nullable(Of Integer)
		Get
			Return Me._core_attempts
		End Get
		Set
			If (Me._core_attempts.Equals(value) = false) Then
				Me.Oncore_attemptsChanging(value)
				Me.SendPropertyChanging
				Me._core_attempts = value
				Me.SendPropertyChanged("core_attempts")
				Me.Oncore_attemptsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sample_attempts", DbType:="Int")>  _
	Public Property sample_attempts() As System.Nullable(Of Integer)
		Get
			Return Me._sample_attempts
		End Get
		Set
			If (Me._sample_attempts.Equals(value) = false) Then
				Me.Onsample_attemptsChanging(value)
				Me.SendPropertyChanging
				Me._sample_attempts = value
				Me.SendPropertyChanged("sample_attempts")
				Me.Onsample_attemptsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pressure_attempts", DbType:="Int")>  _
	Public Property pressure_attempts() As System.Nullable(Of Integer)
		Get
			Return Me._pressure_attempts
		End Get
		Set
			If (Me._pressure_attempts.Equals(value) = false) Then
				Me.Onpressure_attemptsChanging(value)
				Me.SendPropertyChanging
				Me._pressure_attempts = value
				Me.SendPropertyChanged("pressure_attempts")
				Me.Onpressure_attemptsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cores_sold", DbType:="Int")>  _
	Public Property cores_sold() As System.Nullable(Of Integer)
		Get
			Return Me._cores_sold
		End Get
		Set
			If (Me._cores_sold.Equals(value) = false) Then
				Me.Oncores_soldChanging(value)
				Me.SendPropertyChanging
				Me._cores_sold = value
				Me.SendPropertyChanged("cores_sold")
				Me.Oncores_soldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_samples_sold", DbType:="Int")>  _
	Public Property samples_sold() As System.Nullable(Of Integer)
		Get
			Return Me._samples_sold
		End Get
		Set
			If (Me._samples_sold.Equals(value) = false) Then
				Me.Onsamples_soldChanging(value)
				Me.SendPropertyChanging
				Me._samples_sold = value
				Me.SendPropertyChanged("samples_sold")
				Me.Onsamples_soldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pressures_sold", DbType:="Int")>  _
	Public Property pressures_sold() As System.Nullable(Of Integer)
		Get
			Return Me._pressures_sold
		End Get
		Set
			If (Me._pressures_sold.Equals(value) = false) Then
				Me.Onpressures_soldChanging(value)
				Me.SendPropertyChanging
				Me._pressures_sold = value
				Me.SendPropertyChanged("pressures_sold")
				Me.Onpressures_soldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50)")>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me.OntruckChanging(value)
				Me.SendPropertyChanging
				Me._truck = value
				Me.SendPropertyChanged("truck")
				Me.OntruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit", DbType:="VarChar(50)")>  _
	Public Property aux_unit() As String
		Get
			Return Me._aux_unit
		End Get
		Set
			If (String.Equals(Me._aux_unit, value) = false) Then
				Me.Onaux_unitChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit = value
				Me.SendPropertyChanged("aux_unit")
				Me.Onaux_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_engineer1", DbType:="VarChar(60)")>  _
	Public Property engineer1() As String
		Get
			Return Me._engineer1
		End Get
		Set
			If (String.Equals(Me._engineer1, value) = false) Then
				Me.Onengineer1Changing(value)
				Me.SendPropertyChanging
				Me._engineer1 = value
				Me.SendPropertyChanged("engineer1")
				Me.Onengineer1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_id", DbType:="VarChar(15)")>  _
	Public Property cable_1_id() As String
		Get
			Return Me._cable_1_id
		End Get
		Set
			If (String.Equals(Me._cable_1_id, value) = false) Then
				Me.Oncable_1_idChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_id = value
				Me.SendPropertyChanged("cable_1_id")
				Me.Oncable_1_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_id", DbType:="VarChar(15)")>  _
	Public Property cable_2_id() As String
		Get
			Return Me._cable_2_id
		End Get
		Set
			If (String.Equals(Me._cable_2_id, value) = false) Then
				Me.Oncable_2_idChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_id = value
				Me.SendPropertyChanged("cable_2_id")
				Me.Oncable_2_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_type", DbType:="VarChar(25)")>  _
	Public Property cable_1_type() As String
		Get
			Return Me._cable_1_type
		End Get
		Set
			If (String.Equals(Me._cable_1_type, value) = false) Then
				Me.Oncable_1_typeChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_type = value
				Me.SendPropertyChanged("cable_1_type")
				Me.Oncable_1_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_type", DbType:="VarChar(25)")>  _
	Public Property cable_2_type() As String
		Get
			Return Me._cable_2_type
		End Get
		Set
			If (String.Equals(Me._cable_2_type, value) = false) Then
				Me.Oncable_2_typeChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_type = value
				Me.SendPropertyChanged("cable_2_type")
				Me.Oncable_2_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_start_length", DbType:="Int")>  _
	Public Property cable_1_start_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_start_length
		End Get
		Set
			If (Me._cable_1_start_length.Equals(value) = false) Then
				Me.Oncable_1_start_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_start_length = value
				Me.SendPropertyChanged("cable_1_start_length")
				Me.Oncable_1_start_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_start_length", DbType:="Int")>  _
	Public Property cable_2_start_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_start_length
		End Get
		Set
			If (Me._cable_2_start_length.Equals(value) = false) Then
				Me.Oncable_2_start_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_start_length = value
				Me.SendPropertyChanged("cable_2_start_length")
				Me.Oncable_2_start_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_end_length", DbType:="Int")>  _
	Public Property cable_1_end_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_end_length
		End Get
		Set
			If (Me._cable_1_end_length.Equals(value) = false) Then
				Me.Oncable_1_end_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_end_length = value
				Me.SendPropertyChanged("cable_1_end_length")
				Me.Oncable_1_end_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_end_length", DbType:="Int")>  _
	Public Property cable_2_end_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_end_length
		End Get
		Set
			If (Me._cable_2_end_length.Equals(value) = false) Then
				Me.Oncable_2_end_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_end_length = value
				Me.SendPropertyChanged("cable_2_end_length")
				Me.Oncable_2_end_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_tension", DbType:="Int")>  _
	Public Property cable_1_tension() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_tension
		End Get
		Set
			If (Me._cable_1_tension.Equals(value) = false) Then
				Me.Oncable_1_tensionChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_tension = value
				Me.SendPropertyChanged("cable_1_tension")
				Me.Oncable_1_tensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_tension", DbType:="Int")>  _
	Public Property cable_2_tension() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_tension
		End Get
		Set
			If (Me._cable_2_tension.Equals(value) = false) Then
				Me.Oncable_2_tensionChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_tension = value
				Me.SendPropertyChanged("cable_2_tension")
				Me.Oncable_2_tensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_by", DbType:="varchar(20)")>  _
	Public Property disp_by() As String
		Get
			Return Me._disp_by
		End Get
		Set
			If (String.Equals(Me._disp_by, value) = false) Then
				Me.Ondisp_byChanging(value)
				Me.SendPropertyChanging
				Me._disp_by = value
				Me.SendPropertyChanged("disp_by")
				Me.Ondisp_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distdo_id", DbType:="Int")>  _
	Public Property distdo_id() As System.Nullable(Of Integer)
		Get
			Return Me._distdo_id
		End Get
		Set
			If (Me._distdo_id.Equals(value) = false) Then
				Me.Ondistdo_idChanging(value)
				Me.SendPropertyChanging
				Me._distdo_id = value
				Me.SendPropertyChanged("distdo_id")
				Me.Ondistdo_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_type", DbType:="VarChar(50)")>  _
	Public Property fluid_type() As String
		Get
			Return Me._fluid_type
		End Get
		Set
			If (String.Equals(Me._fluid_type, value) = false) Then
				Me.Onfluid_typeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_type = value
				Me.SendPropertyChanged("fluid_type")
				Me.Onfluid_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_source", DbType:="VarChar(50)")>  _
	Public Property fluid_source() As String
		Get
			Return Me._fluid_source
		End Get
		Set
			If (String.Equals(Me._fluid_source, value) = false) Then
				Me.Onfluid_sourceChanging(value)
				Me.SendPropertyChanging
				Me._fluid_source = value
				Me.SendPropertyChanged("fluid_source")
				Me.Onfluid_sourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_info_source", DbType:="VarChar(50)")>  _
	Public Property fluid_info_source() As String
		Get
			Return Me._fluid_info_source
		End Get
		Set
			If (String.Equals(Me._fluid_info_source, value) = false) Then
				Me.Onfluid_info_sourceChanging(value)
				Me.SendPropertyChanging
				Me._fluid_info_source = value
				Me.SendPropertyChanged("fluid_info_source")
				Me.Onfluid_info_sourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_last_circulation_datetime", DbType:="SmallDateTime")>  _
	Public Property fluid_last_circulation_datetime() As System.Nullable(Of Date)
		Get
			Return Me._fluid_last_circulation_datetime
		End Get
		Set
			If (Me._fluid_last_circulation_datetime.Equals(value) = false) Then
				Me.Onfluid_last_circulation_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_last_circulation_datetime = value
				Me.SendPropertyChanged("fluid_last_circulation_datetime")
				Me.Onfluid_last_circulation_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_weight", DbType:="Real")>  _
	Public Property fluid_weight() As System.Nullable(Of Single)
		Get
			Return Me._fluid_weight
		End Get
		Set
			If (Me._fluid_weight.Equals(value) = false) Then
				Me.Onfluid_weightChanging(value)
				Me.SendPropertyChanging
				Me._fluid_weight = value
				Me.SendPropertyChanged("fluid_weight")
				Me.Onfluid_weightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_specific_gravity", DbType:="Real")>  _
	Public Property fluid_specific_gravity() As System.Nullable(Of Single)
		Get
			Return Me._fluid_specific_gravity
		End Get
		Set
			If (Me._fluid_specific_gravity.Equals(value) = false) Then
				Me.Onfluid_specific_gravityChanging(value)
				Me.SendPropertyChanging
				Me._fluid_specific_gravity = value
				Me.SendPropertyChanged("fluid_specific_gravity")
				Me.Onfluid_specific_gravityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_level", DbType:="varchar(5)")>  _
	Public Property fluid_level() As String
		Get
			Return Me._fluid_level
		End Get
		Set
			If (String.Equals(Me._fluid_level, value) = false) Then
				Me.Onfluid_levelChanging(value)
				Me.SendPropertyChanging
				Me._fluid_level = value
				Me.SendPropertyChanged("fluid_level")
				Me.Onfluid_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_filt_cake", DbType:="Real")>  _
	Public Property fluid_filt_cake() As System.Nullable(Of Single)
		Get
			Return Me._fluid_filt_cake
		End Get
		Set
			If (Me._fluid_filt_cake.Equals(value) = false) Then
				Me.Onfluid_filt_cakeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_filt_cake = value
				Me.SendPropertyChanged("fluid_filt_cake")
				Me.Onfluid_filt_cakeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_loss", DbType:="Real")>  _
	Public Property fluid_loss() As System.Nullable(Of Single)
		Get
			Return Me._fluid_loss
		End Get
		Set
			If (Me._fluid_loss.Equals(value) = false) Then
				Me.Onfluid_lossChanging(value)
				Me.SendPropertyChanging
				Me._fluid_loss = value
				Me.SendPropertyChanged("fluid_loss")
				Me.Onfluid_lossChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_chlorides", DbType:="Int")>  _
	Public Property fluid_chlorides() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_chlorides
		End Get
		Set
			If (Me._fluid_chlorides.Equals(value) = false) Then
				Me.Onfluid_chloridesChanging(value)
				Me.SendPropertyChanging
				Me._fluid_chlorides = value
				Me.SendPropertyChanged("fluid_chlorides")
				Me.Onfluid_chloridesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_calcium", DbType:="Real")>  _
	Public Property fluid_calcium() As System.Nullable(Of Single)
		Get
			Return Me._fluid_calcium
		End Get
		Set
			If (Me._fluid_calcium.Equals(value) = false) Then
				Me.Onfluid_calciumChanging(value)
				Me.SendPropertyChanging
				Me._fluid_calcium = value
				Me.SendPropertyChanged("fluid_calcium")
				Me.Onfluid_calciumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rm", DbType:="Real")>  _
	Public Property fluid_rm() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rm
		End Get
		Set
			If (Me._fluid_rm.Equals(value) = false) Then
				Me.Onfluid_rmChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rm = value
				Me.SendPropertyChanged("fluid_rm")
				Me.Onfluid_rmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rm_at", DbType:="Int")>  _
	Public Property fluid_rm_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rm_at
		End Get
		Set
			If (Me._fluid_rm_at.Equals(value) = false) Then
				Me.Onfluid_rm_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rm_at = value
				Me.SendPropertyChanged("fluid_rm_at")
				Me.Onfluid_rm_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmf", DbType:="Real")>  _
	Public Property fluid_rmf() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rmf
		End Get
		Set
			If (Me._fluid_rmf.Equals(value) = false) Then
				Me.Onfluid_rmfChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmf = value
				Me.SendPropertyChanged("fluid_rmf")
				Me.Onfluid_rmfChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmf_at", DbType:="Int")>  _
	Public Property fluid_rmf_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rmf_at
		End Get
		Set
			If (Me._fluid_rmf_at.Equals(value) = false) Then
				Me.Onfluid_rmf_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmf_at = value
				Me.SendPropertyChanged("fluid_rmf_at")
				Me.Onfluid_rmf_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmc", DbType:="Real")>  _
	Public Property fluid_rmc() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rmc
		End Get
		Set
			If (Me._fluid_rmc.Equals(value) = false) Then
				Me.Onfluid_rmcChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmc = value
				Me.SendPropertyChanged("fluid_rmc")
				Me.Onfluid_rmcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmc_at", DbType:="Int")>  _
	Public Property fluid_rmc_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rmc_at
		End Get
		Set
			If (Me._fluid_rmc_at.Equals(value) = false) Then
				Me.Onfluid_rmc_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmc_at = value
				Me.SendPropertyChanged("fluid_rmc_at")
				Me.Onfluid_rmc_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmbt", DbType:="Real")>  _
	Public Property fluid_rmbt() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rmbt
		End Get
		Set
			If (Me._fluid_rmbt.Equals(value) = false) Then
				Me.Onfluid_rmbtChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmbt = value
				Me.SendPropertyChanged("fluid_rmbt")
				Me.Onfluid_rmbtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmbt_at", DbType:="Int")>  _
	Public Property fluid_rmbt_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rmbt_at
		End Get
		Set
			If (Me._fluid_rmbt_at.Equals(value) = false) Then
				Me.Onfluid_rmbt_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmbt_at = value
				Me.SendPropertyChanged("fluid_rmbt_at")
				Me.Onfluid_rmbt_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_ph", DbType:="Real")>  _
	Public Property fluid_ph() As System.Nullable(Of Single)
		Get
			Return Me._fluid_ph
		End Get
		Set
			If (Me._fluid_ph.Equals(value) = false) Then
				Me.Onfluid_phChanging(value)
				Me.SendPropertyChanging
				Me._fluid_ph = value
				Me.SendPropertyChanged("fluid_ph")
				Me.Onfluid_phChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_h2s", DbType:="Real")>  _
	Public Property fluid_h2s() As System.Nullable(Of Single)
		Get
			Return Me._fluid_h2s
		End Get
		Set
			If (Me._fluid_h2s.Equals(value) = false) Then
				Me.Onfluid_h2sChanging(value)
				Me.SendPropertyChanging
				Me._fluid_h2s = value
				Me.SendPropertyChanged("fluid_h2s")
				Me.Onfluid_h2sChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_co2", DbType:="Real")>  _
	Public Property fluid_co2() As System.Nullable(Of Single)
		Get
			Return Me._fluid_co2
		End Get
		Set
			If (Me._fluid_co2.Equals(value) = false) Then
				Me.Onfluid_co2Changing(value)
				Me.SendPropertyChanging
				Me._fluid_co2 = value
				Me.SendPropertyChanged("fluid_co2")
				Me.Onfluid_co2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_viscosity", DbType:="Real")>  _
	Public Property fluid_viscosity() As System.Nullable(Of Single)
		Get
			Return Me._fluid_viscosity
		End Get
		Set
			If (Me._fluid_viscosity.Equals(value) = false) Then
				Me.Onfluid_viscosityChanging(value)
				Me.SendPropertyChanging
				Me._fluid_viscosity = value
				Me.SendPropertyChanged("fluid_viscosity")
				Me.Onfluid_viscosityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_gels_s", DbType:="Real")>  _
	Public Property fluid_gels_s() As System.Nullable(Of Single)
		Get
			Return Me._fluid_gels_s
		End Get
		Set
			If (Me._fluid_gels_s.Equals(value) = false) Then
				Me.Onfluid_gels_sChanging(value)
				Me.SendPropertyChanging
				Me._fluid_gels_s = value
				Me.SendPropertyChanged("fluid_gels_s")
				Me.Onfluid_gels_sChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_gels_m", DbType:="Real")>  _
	Public Property fluid_gels_m() As System.Nullable(Of Single)
		Get
			Return Me._fluid_gels_m
		End Get
		Set
			If (Me._fluid_gels_m.Equals(value) = false) Then
				Me.Onfluid_gels_mChanging(value)
				Me.SendPropertyChanging
				Me._fluid_gels_m = value
				Me.SendPropertyChanged("fluid_gels_m")
				Me.Onfluid_gels_mChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_pv", DbType:="Real")>  _
	Public Property fluid_pv() As System.Nullable(Of Single)
		Get
			Return Me._fluid_pv
		End Get
		Set
			If (Me._fluid_pv.Equals(value) = false) Then
				Me.Onfluid_pvChanging(value)
				Me.SendPropertyChanging
				Me._fluid_pv = value
				Me.SendPropertyChanged("fluid_pv")
				Me.Onfluid_pvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_vp", DbType:="Real")>  _
	Public Property fluid_vp() As System.Nullable(Of Single)
		Get
			Return Me._fluid_vp
		End Get
		Set
			If (Me._fluid_vp.Equals(value) = false) Then
				Me.Onfluid_vpChanging(value)
				Me.SendPropertyChanging
				Me._fluid_vp = value
				Me.SendPropertyChanged("fluid_vp")
				Me.Onfluid_vpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_h2o_percent_1", DbType:="Real")>  _
	Public Property fluid_h2o_percent_1() As System.Nullable(Of Single)
		Get
			Return Me._fluid_h2o_percent_1
		End Get
		Set
			If (Me._fluid_h2o_percent_1.Equals(value) = false) Then
				Me.Onfluid_h2o_percent_1Changing(value)
				Me.SendPropertyChanging
				Me._fluid_h2o_percent_1 = value
				Me.SendPropertyChanged("fluid_h2o_percent_1")
				Me.Onfluid_h2o_percent_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_h2o_percent_2", DbType:="Real")>  _
	Public Property fluid_h2o_percent_2() As System.Nullable(Of Single)
		Get
			Return Me._fluid_h2o_percent_2
		End Get
		Set
			If (Me._fluid_h2o_percent_2.Equals(value) = false) Then
				Me.Onfluid_h2o_percent_2Changing(value)
				Me.SendPropertyChanging
				Me._fluid_h2o_percent_2 = value
				Me.SendPropertyChanged("fluid_h2o_percent_2")
				Me.Onfluid_h2o_percent_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_sand", DbType:="Real")>  _
	Public Property fluid_sand() As System.Nullable(Of Single)
		Get
			Return Me._fluid_sand
		End Get
		Set
			If (Me._fluid_sand.Equals(value) = false) Then
				Me.Onfluid_sandChanging(value)
				Me.SendPropertyChanging
				Me._fluid_sand = value
				Me.SendPropertyChanged("fluid_sand")
				Me.Onfluid_sandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_solids", DbType:="Real")>  _
	Public Property fluid_solids() As System.Nullable(Of Single)
		Get
			Return Me._fluid_solids
		End Get
		Set
			If (Me._fluid_solids.Equals(value) = false) Then
				Me.Onfluid_solidsChanging(value)
				Me.SendPropertyChanging
				Me._fluid_solids = value
				Me.SendPropertyChanged("fluid_solids")
				Me.Onfluid_solidsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_sec_lc_material", DbType:="varchar(50)")>  _
	Public Property fluid_sec_lc_material() As String
		Get
			Return Me._fluid_sec_lc_material
		End Get
		Set
			If (String.Equals(Me._fluid_sec_lc_material, value) = false) Then
				Me.Onfluid_sec_lc_materialChanging(value)
				Me.SendPropertyChanging
				Me._fluid_sec_lc_material = value
				Me.SendPropertyChanged("fluid_sec_lc_material")
				Me.Onfluid_sec_lc_materialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rugosity", DbType:="Real")>  _
	Public Property fluid_rugosity() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rugosity
		End Get
		Set
			If (Me._fluid_rugosity.Equals(value) = false) Then
				Me.Onfluid_rugosityChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rugosity = value
				Me.SendPropertyChanged("fluid_rugosity")
				Me.Onfluid_rugosityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_washouts", DbType:="VarChar(10)")>  _
	Public Property fluid_washouts() As String
		Get
			Return Me._fluid_washouts
		End Get
		Set
			If (String.Equals(Me._fluid_washouts, value) = false) Then
				Me.Onfluid_washoutsChanging(value)
				Me.SendPropertyChanging
				Me._fluid_washouts = value
				Me.SendPropertyChanged("fluid_washouts")
				Me.Onfluid_washoutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_ovalness", DbType:="VarChar(10)")>  _
	Public Property fluid_ovalness() As String
		Get
			Return Me._fluid_ovalness
		End Get
		Set
			If (String.Equals(Me._fluid_ovalness, value) = false) Then
				Me.Onfluid_ovalnessChanging(value)
				Me.SendPropertyChanging
				Me._fluid_ovalness = value
				Me.SendPropertyChanged("fluid_ovalness")
				Me.Onfluid_ovalnessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_corrections", DbType:="VarChar(10)")>  _
	Public Property fluid_corrections() As String
		Get
			Return Me._fluid_corrections
		End Get
		Set
			If (String.Equals(Me._fluid_corrections, value) = false) Then
				Me.Onfluid_correctionsChanging(value)
				Me.SendPropertyChanging
				Me._fluid_corrections = value
				Me.SendPropertyChanged("fluid_corrections")
				Me.Onfluid_correctionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_mud_loss", DbType:="Real")>  _
	Public Property fluid_mud_loss() As System.Nullable(Of Single)
		Get
			Return Me._fluid_mud_loss
		End Get
		Set
			If (Me._fluid_mud_loss.Equals(value) = false) Then
				Me.Onfluid_mud_lossChanging(value)
				Me.SendPropertyChanging
				Me._fluid_mud_loss = value
				Me.SendPropertyChanged("fluid_mud_loss")
				Me.Onfluid_mud_lossChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_barites", DbType:="Real")>  _
	Public Property fluid_barites() As System.Nullable(Of Single)
		Get
			Return Me._fluid_barites
		End Get
		Set
			If (Me._fluid_barites.Equals(value) = false) Then
				Me.Onfluid_baritesChanging(value)
				Me.SendPropertyChanging
				Me._fluid_barites = value
				Me.SendPropertyChanged("fluid_barites")
				Me.Onfluid_baritesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tubing_hanger_type", DbType:="VarChar(15)")>  _
	Public Property tubing_hanger_type() As String
		Get
			Return Me._tubing_hanger_type
		End Get
		Set
			If (String.Equals(Me._tubing_hanger_type, value) = false) Then
				Me.Ontubing_hanger_typeChanging(value)
				Me.SendPropertyChanging
				Me._tubing_hanger_type = value
				Me.SendPropertyChanged("tubing_hanger_type")
				Me.Ontubing_hanger_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tree_length_2", DbType:="Real")>  _
	Public Property tree_length_2() As System.Nullable(Of Single)
		Get
			Return Me._tree_length_2
		End Get
		Set
			If (Me._tree_length_2.Equals(value) = false) Then
				Me.Ontree_length_2Changing(value)
				Me.SendPropertyChanging
				Me._tree_length_2 = value
				Me.SendPropertyChanged("tree_length_2")
				Me.Ontree_length_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tree_length_3", DbType:="Real")>  _
	Public Property tree_length_3() As System.Nullable(Of Single)
		Get
			Return Me._tree_length_3
		End Get
		Set
			If (Me._tree_length_3.Equals(value) = false) Then
				Me.Ontree_length_3Changing(value)
				Me.SendPropertyChanging
				Me._tree_length_3 = value
				Me.SendPropertyChanged("tree_length_3")
				Me.Ontree_length_3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_top_connection", DbType:="VarChar(10)")>  _
	Public Property top_connection() As String
		Get
			Return Me._top_connection
		End Get
		Set
			If (String.Equals(Me._top_connection, value) = false) Then
				Me.Ontop_connectionChanging(value)
				Me.SendPropertyChanging
				Me._top_connection = value
				Me.SendPropertyChanged("top_connection")
				Me.Ontop_connectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_blind_rams", DbType:="VarChar(10)")>  _
	Public Property blind_rams() As String
		Get
			Return Me._blind_rams
		End Get
		Set
			If (String.Equals(Me._blind_rams, value) = false) Then
				Me.Onblind_ramsChanging(value)
				Me.SendPropertyChanging
				Me._blind_rams = value
				Me.SendPropertyChanged("blind_rams")
				Me.Onblind_ramsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_work_spool", DbType:="Bit")>  _
	Public Property work_spool() As System.Nullable(Of Boolean)
		Get
			Return Me._work_spool
		End Get
		Set
			If (Me._work_spool.Equals(value) = false) Then
				Me.Onwork_spoolChanging(value)
				Me.SendPropertyChanging
				Me._work_spool = value
				Me.SendPropertyChanged("work_spool")
				Me.Onwork_spoolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_slant_well", DbType:="Bit")>  _
	Public Property slant_well() As System.Nullable(Of Boolean)
		Get
			Return Me._slant_well
		End Get
		Set
			If (Me._slant_well.Equals(value) = false) Then
				Me.Onslant_wellChanging(value)
				Me.SendPropertyChanging
				Me._slant_well = value
				Me.SendPropertyChanged("slant_well")
				Me.Onslant_wellChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_special_instructions", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property special_instructions() As String
		Get
			Return Me._special_instructions
		End Get
		Set
			If (String.Equals(Me._special_instructions, value) = false) Then
				Me.Onspecial_instructionsChanging(value)
				Me.SendPropertyChanging
				Me._special_instructions = value
				Me.SendPropertyChanged("special_instructions")
				Me.Onspecial_instructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_loading_complete_flag", DbType:="Bit")>  _
	Public Property gun_loading_complete_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._gun_loading_complete_flag
		End Get
		Set
			If (Me._gun_loading_complete_flag.Equals(value) = false) Then
				Me.Ongun_loading_complete_flagChanging(value)
				Me.SendPropertyChanging
				Me._gun_loading_complete_flag = value
				Me.SendPropertyChanged("gun_loading_complete_flag")
				Me.Ongun_loading_complete_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_loading_complete_datetime", DbType:="SmallDateTime")>  _
	Public Property gun_loading_complete_datetime() As System.Nullable(Of Date)
		Get
			Return Me._gun_loading_complete_datetime
		End Get
		Set
			If (Me._gun_loading_complete_datetime.Equals(value) = false) Then
				Me.Ongun_loading_complete_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._gun_loading_complete_datetime = value
				Me.SendPropertyChanged("gun_loading_complete_datetime")
				Me.Ongun_loading_complete_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_loader", DbType:="VarChar(50)")>  _
	Public Property gun_loader() As String
		Get
			Return Me._gun_loader
		End Get
		Set
			If (String.Equals(Me._gun_loader, value) = false) Then
				Me.Ongun_loaderChanging(value)
				Me.SendPropertyChanging
				Me._gun_loader = value
				Me.SendPropertyChanged("gun_loader")
				Me.Ongun_loaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me.OnpslChanging(value)
				Me.SendPropertyChanging
				Me._psl = value
				Me.SendPropertyChanged("psl")
				Me.OnpslChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competitor", CanBeNull:=false)>  _
	Public Property competitor() As String
		Get
			Return Me._competitor
		End Get
		Set
			If (String.Equals(Me._competitor, value) = false) Then
				Me.OncompetitorChanging(value)
				Me.SendPropertyChanging
				Me._competitor = value
				Me.SendPropertyChanged("competitor")
				Me.OncompetitorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_notes", CanBeNull:=false)>  _
	Public Property lost_notes() As String
		Get
			Return Me._lost_notes
		End Get
		Set
			If (String.Equals(Me._lost_notes, value) = false) Then
				Me.Onlost_notesChanging(value)
				Me.SendPropertyChanging
				Me._lost_notes = value
				Me.SendPropertyChanged("lost_notes")
				Me.Onlost_notesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_comment", DbType:="varchar(256)", CanBeNull:=false)>  _
	Public Property unit_comment() As String
		Get
			Return Me._unit_comment
		End Get
		Set
			If (String.Equals(Me._unit_comment, value) = false) Then
				Me.Onunit_commentChanging(value)
				Me.SendPropertyChanging
				Me._unit_comment = value
				Me.SendPropertyChanged("unit_comment")
				Me.Onunit_commentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_export_datetime", DbType:="SmallDateTime")>  _
	Public Property dispatch_export_datetime() As System.Nullable(Of Date)
		Get
			Return Me._dispatch_export_datetime
		End Get
		Set
			If (Me._dispatch_export_datetime.Equals(value) = false) Then
				Me.Ondispatch_export_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_export_datetime = value
				Me.SendPropertyChanged("dispatch_export_datetime")
				Me.Ondispatch_export_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_exported_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property dispatch_exported_by() As String
		Get
			Return Me._dispatch_exported_by
		End Get
		Set
			If (String.Equals(Me._dispatch_exported_by, value) = false) Then
				Me.Ondispatch_exported_byChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_exported_by = value
				Me.SendPropertyChanged("dispatch_exported_by")
				Me.Ondispatch_exported_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lsd", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property lsd() As String
		Get
			Return Me._lsd
		End Get
		Set
			If (String.Equals(Me._lsd, value) = false) Then
				Me.OnlsdChanging(value)
				Me.SendPropertyChanging
				Me._lsd = value
				Me.SendPropertyChanged("lsd")
				Me.OnlsdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jsa_rec_id", DbType:="int")>  _
	Public Property jsa_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._jsa_rec_id
		End Get
		Set
			If (Me._jsa_rec_id.Equals(value) = false) Then
				Me.Onjsa_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._jsa_rec_id = value
				Me.SendPropertyChanged("jsa_rec_id")
				Me.Onjsa_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_from_well_master_flag", DbType:="bit")>  _
	Public Property created_from_well_master_flag() As Boolean
		Get
			Return Me._created_from_well_master_flag
		End Get
		Set
			If ((Me._created_from_well_master_flag = value)  _
						= false) Then
				Me.Oncreated_from_well_master_flagChanging(value)
				Me.SendPropertyChanging
				Me._created_from_well_master_flag = value
				Me.SendPropertyChanged("created_from_well_master_flag")
				Me.Oncreated_from_well_master_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uwi", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property uwi() As String
		Get
			Return Me._uwi
		End Get
		Set
			If (String.Equals(Me._uwi, value) = false) Then
				Me.OnuwiChanging(value)
				Me.SendPropertyChanging
				Me._uwi = value
				Me.SendPropertyChanged("uwi")
				Me.OnuwiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_license_number", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property well_license_number() As String
		Get
			Return Me._well_license_number
		End Get
		Set
			If (String.Equals(Me._well_license_number, value) = false) Then
				Me.Onwell_license_numberChanging(value)
				Me.SendPropertyChanging
				Me._well_license_number = value
				Me.SendPropertyChanged("well_license_number")
				Me.Onwell_license_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="smalldatetime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me.Onlocked_for_edit_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_datetime = value
				Me.SendPropertyChanged("locked_for_edit_datetime")
				Me.Onlocked_for_edit_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="varchar(20)")>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me.Onlocked_for_edit_byChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_by = value
				Me.SendPropertyChanged("locked_for_edit_by")
				Me.Onlocked_for_edit_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_read_datetime", DbType:="smalldatetime")>  _
	Public Property data_read_datetime() As Date
		Get
			Return Me._data_read_datetime
		End Get
		Set
			If ((Me._data_read_datetime = value)  _
						= false) Then
				Me.Ondata_read_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._data_read_datetime = value
				Me.SendPropertyChanged("data_read_datetime")
				Me.Ondata_read_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_breakthrough_job_flag", DbType:="bit")>  _
	Public Property breakthrough_job_flag() As Boolean
		Get
			Return Me._breakthrough_job_flag
		End Get
		Set
			If ((Me._breakthrough_job_flag = value)  _
						= false) Then
				Me.Onbreakthrough_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._breakthrough_job_flag = value
				Me.SendPropertyChanged("breakthrough_job_flag")
				Me.Onbreakthrough_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property province() As String
		Get
			Return Me._province
		End Get
		Set
			If (String.Equals(Me._province, value) = false) Then
				Me.OnprovinceChanging(value)
				Me.SendPropertyChanging
				Me._province = value
				Me.SendPropertyChanged("province")
				Me.OnprovinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="int")>  _
	Public Property sold_to_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_id
		End Get
		Set
			If (Me._sold_to_id.Equals(value) = false) Then
				Me.Onsold_to_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_id = value
				Me.SendPropertyChanged("sold_to_id")
				Me.Onsold_to_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_master_number", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property well_master_number() As String
		Get
			Return Me._well_master_number
		End Get
		Set
			If (String.Equals(Me._well_master_number, value) = false) Then
				Me.Onwell_master_numberChanging(value)
				Me.SendPropertyChanging
				Me._well_master_number = value
				Me.SendPropertyChanged("well_master_number")
				Me.Onwell_master_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wellhead_pressure", DbType:="real")>  _
	Public Property wellhead_pressure() As System.Nullable(Of Single)
		Get
			Return Me._wellhead_pressure
		End Get
		Set
			If (Me._wellhead_pressure.Equals(value) = false) Then
				Me.Onwellhead_pressureChanging(value)
				Me.SendPropertyChanging
				Me._wellhead_pressure = value
				Me.SendPropertyChanged("wellhead_pressure")
				Me.Onwellhead_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_true_vertical_depth", DbType:="real")>  _
	Public Property true_vertical_depth() As System.Nullable(Of Single)
		Get
			Return Me._true_vertical_depth
		End Get
		Set
			If (Me._true_vertical_depth.Equals(value) = false) Then
				Me.Ontrue_vertical_depthChanging(value)
				Me.SendPropertyChanging
				Me._true_vertical_depth = value
				Me.SendPropertyChanged("true_vertical_depth")
				Me.Ontrue_vertical_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_core_requests", DbType:="int")>  _
	Public Property core_requests() As System.Nullable(Of Integer)
		Get
			Return Me._core_requests
		End Get
		Set
			If (Me._core_requests.Equals(value) = false) Then
				Me.Oncore_requestsChanging(value)
				Me.SendPropertyChanging
				Me._core_requests = value
				Me.SendPropertyChanged("core_requests")
				Me.Oncore_requestsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sample_requests", DbType:="int")>  _
	Public Property sample_requests() As System.Nullable(Of Integer)
		Get
			Return Me._sample_requests
		End Get
		Set
			If (Me._sample_requests.Equals(value) = false) Then
				Me.Onsample_requestsChanging(value)
				Me.SendPropertyChanging
				Me._sample_requests = value
				Me.SendPropertyChanged("sample_requests")
				Me.Onsample_requestsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pressure_requests", DbType:="int")>  _
	Public Property pressure_requests() As System.Nullable(Of Integer)
		Get
			Return Me._pressure_requests
		End Get
		Set
			If (Me._pressure_requests.Equals(value) = false) Then
				Me.Onpressure_requestsChanging(value)
				Me.SendPropertyChanging
				Me._pressure_requests = value
				Me.SendPropertyChanged("pressure_requests")
				Me.Onpressure_requestsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ecrm_opportunity_id", DbType:="varchar(30)")>  _
	Public Property ecrm_opportunity_id() As String
		Get
			Return Me._ecrm_opportunity_id
		End Get
		Set
			If (String.Equals(Me._ecrm_opportunity_id, value) = false) Then
				Me.Onecrm_opportunity_idChanging(value)
				Me.SendPropertyChanging
				Me._ecrm_opportunity_id = value
				Me.SendPropertyChanged("ecrm_opportunity_id")
				Me.Onecrm_opportunity_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_quote_gpi_list", DbType:="varchar(2000)")>  _
	Public Property fso_quote_gpi_list() As String
		Get
			Return Me._fso_quote_gpi_list
		End Get
		Set
			If (String.Equals(Me._fso_quote_gpi_list, value) = false) Then
				Me.Onfso_quote_gpi_listChanging(value)
				Me.SendPropertyChanging
				Me._fso_quote_gpi_list = value
				Me.SendPropertyChanged("fso_quote_gpi_list")
				Me.Onfso_quote_gpi_listChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_address_rec_id", DbType:="int")>  _
	Public Property sold_to_address_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_address_rec_id
		End Get
		Set
			If (Me._sold_to_address_rec_id.Equals(value) = false) Then
				Me.Onsold_to_address_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_address_rec_id = value
				Me.SendPropertyChanged("sold_to_address_rec_id")
				Me.Onsold_to_address_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_downhole_lat", DbType:="decimal(10, 8)")>  _
	Public Property downhole_lat() As System.Nullable(Of Decimal)
		Get
			Return Me._downhole_lat
		End Get
		Set
			If (Me._downhole_lat.Equals(value) = false) Then
				Me.Ondownhole_latChanging(value)
				Me.SendPropertyChanging
				Me._downhole_lat = value
				Me.SendPropertyChanged("downhole_lat")
				Me.Ondownhole_latChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_downhole_lon", DbType:="decimal(11, 8)")>  _
	Public Property downhole_lon() As System.Nullable(Of Decimal)
		Get
			Return Me._downhole_lon
		End Get
		Set
			If (Me._downhole_lon.Equals(value) = false) Then
				Me.Ondownhole_lonChanging(value)
				Me.SendPropertyChanging
				Me._downhole_lon = value
				Me.SendPropertyChanged("downhole_lon")
				Me.Ondownhole_lonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tight_hole_user_access_level", DbType:="varchar(15)", CanBeNull:=false)>  _
	Public Property tight_hole_user_access_level() As String
		Get
			Return Me._tight_hole_user_access_level
		End Get
		Set
			If (String.Equals(Me._tight_hole_user_access_level, value) = false) Then
				Me.Ontight_hole_user_access_levelChanging(value)
				Me.SendPropertyChanging
				Me._tight_hole_user_access_level = value
				Me.SendPropertyChanged("tight_hole_user_access_level")
				Me.Ontight_hole_user_access_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_id", DbType:="varchar(15)", CanBeNull:=false)>  _
	Public Property cable_3_id() As String
		Get
			Return Me._cable_3_id
		End Get
		Set
			If (String.Equals(Me._cable_3_id, value) = false) Then
				Me.Oncable_3_idChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_id = value
				Me.SendPropertyChanged("cable_3_id")
				Me.Oncable_3_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_type", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property cable_3_type() As String
		Get
			Return Me._cable_3_type
		End Get
		Set
			If (String.Equals(Me._cable_3_type, value) = false) Then
				Me.Oncable_3_typeChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_type = value
				Me.SendPropertyChanged("cable_3_type")
				Me.Oncable_3_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_start_length", DbType:="int")>  _
	Public Property cable_3_start_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_start_length
		End Get
		Set
			If (Me._cable_3_start_length.Equals(value) = false) Then
				Me.Oncable_3_start_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_start_length = value
				Me.SendPropertyChanged("cable_3_start_length")
				Me.Oncable_3_start_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_end_length", DbType:="int")>  _
	Public Property cable_3_end_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_end_length
		End Get
		Set
			If (Me._cable_3_end_length.Equals(value) = false) Then
				Me.Oncable_3_end_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_end_length = value
				Me.SendPropertyChanged("cable_3_end_length")
				Me.Oncable_3_end_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_tension", DbType:="int")>  _
	Public Property cable_3_tension() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_tension
		End Get
		Set
			If (Me._cable_3_tension.Equals(value) = false) Then
				Me.Oncable_3_tensionChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_tension = value
				Me.SendPropertyChanged("cable_3_tension")
				Me.Oncable_3_tensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_magnetic_marks", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property cable_1_magnetic_marks() As String
		Get
			Return Me._cable_1_magnetic_marks
		End Get
		Set
			If (String.Equals(Me._cable_1_magnetic_marks, value) = false) Then
				Me.Oncable_1_magnetic_marksChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_magnetic_marks = value
				Me.SendPropertyChanged("cable_1_magnetic_marks")
				Me.Oncable_1_magnetic_marksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_sheave_od", DbType:="real")>  _
	Public Property cable_1_sheave_od() As System.Nullable(Of Single)
		Get
			Return Me._cable_1_sheave_od
		End Get
		Set
			If (Me._cable_1_sheave_od.Equals(value) = false) Then
				Me.Oncable_1_sheave_odChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_sheave_od = value
				Me.SendPropertyChanged("cable_1_sheave_od")
				Me.Oncable_1_sheave_odChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_magnetic_marks", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property cable_2_magnetic_marks() As String
		Get
			Return Me._cable_2_magnetic_marks
		End Get
		Set
			If (String.Equals(Me._cable_2_magnetic_marks, value) = false) Then
				Me.Oncable_2_magnetic_marksChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_magnetic_marks = value
				Me.SendPropertyChanged("cable_2_magnetic_marks")
				Me.Oncable_2_magnetic_marksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_sheave_od", DbType:="real")>  _
	Public Property cable_2_sheave_od() As System.Nullable(Of Single)
		Get
			Return Me._cable_2_sheave_od
		End Get
		Set
			If (Me._cable_2_sheave_od.Equals(value) = false) Then
				Me.Oncable_2_sheave_odChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_sheave_od = value
				Me.SendPropertyChanged("cable_2_sheave_od")
				Me.Oncable_2_sheave_odChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_magnetic_marks", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property cable_3_magnetic_marks() As String
		Get
			Return Me._cable_3_magnetic_marks
		End Get
		Set
			If (String.Equals(Me._cable_3_magnetic_marks, value) = false) Then
				Me.Oncable_3_magnetic_marksChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_magnetic_marks = value
				Me.SendPropertyChanged("cable_3_magnetic_marks")
				Me.Oncable_3_magnetic_marksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_sheave_od", DbType:="real")>  _
	Public Property cable_3_sheave_od() As System.Nullable(Of Single)
		Get
			Return Me._cable_3_sheave_od
		End Get
		Set
			If (Me._cable_3_sheave_od.Equals(value) = false) Then
				Me.Oncable_3_sheave_odChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_sheave_od = value
				Me.SendPropertyChanged("cable_3_sheave_od")
				Me.Oncable_3_sheave_odChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_cuts", DbType:="int")>  _
	Public Property cable_1_cuts() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_cuts
		End Get
		Set
			If (Me._cable_1_cuts.Equals(value) = false) Then
				Me.Oncable_1_cutsChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_cuts = value
				Me.SendPropertyChanged("cable_1_cuts")
				Me.Oncable_1_cutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_cuts", DbType:="int")>  _
	Public Property cable_2_cuts() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_cuts
		End Get
		Set
			If (Me._cable_2_cuts.Equals(value) = false) Then
				Me.Oncable_2_cutsChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_cuts = value
				Me.SendPropertyChanged("cable_2_cuts")
				Me.Oncable_2_cutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_cuts", DbType:="int")>  _
	Public Property cable_3_cuts() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_cuts
		End Get
		Set
			If (Me._cable_3_cuts.Equals(value) = false) Then
				Me.Oncable_3_cutsChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_cuts = value
				Me.SendPropertyChanged("cable_3_cuts")
				Me.Oncable_3_cutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_name", CanBeNull:=false)>  _
	Public Property customer_name() As String
		Get
			Return Me._customer_name
		End Get
		Set
			If (String.Equals(Me._customer_name, value) = false) Then
				Me.Oncustomer_nameChanging(value)
				Me.SendPropertyChanging
				Me._customer_name = value
				Me.SendPropertyChanged("customer_name")
				Me.Oncustomer_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_desc", CanBeNull:=false)>  _
	Public Property county_desc() As String
		Get
			Return Me._county_desc
		End Get
		Set
			If (String.Equals(Me._county_desc, value) = false) Then
				Me.Oncounty_descChanging(value)
				Me.SendPropertyChanging
				Me._county_desc = value
				Me.SendPropertyChanged("county_desc")
				Me.Oncounty_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distdo_name", CanBeNull:=false)>  _
	Public Property distdo_name() As String
		Get
			Return Me._distdo_name
		End Get
		Set
			If (String.Equals(Me._distdo_name, value) = false) Then
				Me.Ondistdo_nameChanging(value)
				Me.SendPropertyChanging
				Me._distdo_name = value
				Me.SendPropertyChanged("distdo_name")
				Me.Ondistdo_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_name", CanBeNull:=false)>  _
	Public Property rig_name() As String
		Get
			Return Me._rig_name
		End Get
		Set
			If (String.Equals(Me._rig_name, value) = false) Then
				Me.Onrig_nameChanging(value)
				Me.SendPropertyChanging
				Me._rig_name = value
				Me.SendPropertyChanged("rig_name")
				Me.Onrig_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_environment_desc", CanBeNull:=false)>  _
	Public Property environment_desc() As String
		Get
			Return Me._environment_desc
		End Get
		Set
			If (String.Equals(Me._environment_desc, value) = false) Then
				Me.Onenvironment_descChanging(value)
				Me.SendPropertyChanging
				Me._environment_desc = value
				Me.SendPropertyChanged("environment_desc")
				Me.Onenvironment_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_state", CanBeNull:=false)>  _
	Public Property county_state() As String
		Get
			Return Me._county_state
		End Get
		Set
			If (String.Equals(Me._county_state, value) = false) Then
				Me.Oncounty_stateChanging(value)
				Me.SendPropertyChanging
				Me._county_state = value
				Me.SendPropertyChanged("county_state")
				Me.Oncounty_stateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_name", CanBeNull:=false)>  _
	Public Property country_name() As String
		Get
			Return Me._country_name
		End Get
		Set
			If (String.Equals(Me._country_name, value) = false) Then
				Me.Oncountry_nameChanging(value)
				Me.SendPropertyChanging
				Me._country_name = value
				Me.SendPropertyChanged("country_name")
				Me.Oncountry_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck_start_hours", DbType:="int")>  _
	Public Property truck_start_hours() As System.Nullable(Of Integer)
		Get
			Return Me._truck_start_hours
		End Get
		Set
			If (Me._truck_start_hours.Equals(value) = false) Then
				Me.Ontruck_start_hoursChanging(value)
				Me.SendPropertyChanging
				Me._truck_start_hours = value
				Me.SendPropertyChanged("truck_start_hours")
				Me.Ontruck_start_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck_end_hours", DbType:="int")>  _
	Public Property truck_end_hours() As System.Nullable(Of Integer)
		Get
			Return Me._truck_end_hours
		End Get
		Set
			If (Me._truck_end_hours.Equals(value) = false) Then
				Me.Ontruck_end_hoursChanging(value)
				Me.SendPropertyChanging
				Me._truck_end_hours = value
				Me.SendPropertyChanged("truck_end_hours")
				Me.Ontruck_end_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit_start_hours", DbType:="int")>  _
	Public Property aux_unit_start_hours() As System.Nullable(Of Integer)
		Get
			Return Me._aux_unit_start_hours
		End Get
		Set
			If (Me._aux_unit_start_hours.Equals(value) = false) Then
				Me.Onaux_unit_start_hoursChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit_start_hours = value
				Me.SendPropertyChanged("aux_unit_start_hours")
				Me.Onaux_unit_start_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit_end_hours", DbType:="int")>  _
	Public Property aux_unit_end_hours() As System.Nullable(Of Integer)
		Get
			Return Me._aux_unit_end_hours
		End Get
		Set
			If (Me._aux_unit_end_hours.Equals(value) = false) Then
				Me.Onaux_unit_end_hoursChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit_end_hours = value
				Me.SendPropertyChanged("aux_unit_end_hours")
				Me.Onaux_unit_end_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_information_url", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property well_information_url() As String
		Get
			Return Me._well_information_url
		End Get
		Set
			If (String.Equals(Me._well_information_url, value) = false) Then
				Me.Onwell_information_urlChanging(value)
				Me.SendPropertyChanging
				Me._well_information_url = value
				Me.SendPropertyChanged("well_information_url")
				Me.Onwell_information_urlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_has_fso_in_finance_mode_flag", DbType:="bit")>  _
	Public Property disp_has_fso_in_finance_mode_flag() As Boolean
		Get
			Return Me._disp_has_fso_in_finance_mode_flag
		End Get
		Set
			If ((Me._disp_has_fso_in_finance_mode_flag = value)  _
						= false) Then
				Me.Ondisp_has_fso_in_finance_mode_flagChanging(value)
				Me.SendPropertyChanging
				Me._disp_has_fso_in_finance_mode_flag = value
				Me.SendPropertyChanged("disp_has_fso_in_finance_mode_flag")
				Me.Ondisp_has_fso_in_finance_mode_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_app_version", DbType:="int")>  _
	Public Property app_version() As Integer
		Get
			Return Me._app_version
		End Get
		Set
			If ((Me._app_version = value)  _
						= false) Then
				Me.Onapp_versionChanging(value)
				Me.SendPropertyChanging
				Me._app_version = value
				Me.SendPropertyChanged("app_version")
				Me.Onapp_versionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_splice1_depth")>  _
	Public Property cable_1_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_splice1_depth
		End Get
		Set
			If (Me._cable_1_splice1_depth.Equals(value) = false) Then
				Me.Oncable_1_splice1_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_splice1_depth = value
				Me.SendPropertyChanged("cable_1_splice1_depth")
				Me.Oncable_1_splice1_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_splice2_depth")>  _
	Public Property cable_1_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_splice2_depth
		End Get
		Set
			If (Me._cable_1_splice2_depth.Equals(value) = false) Then
				Me.Oncable_1_splice2_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_splice2_depth = value
				Me.SendPropertyChanged("cable_1_splice2_depth")
				Me.Oncable_1_splice2_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_splice1_depth")>  _
	Public Property cable_2_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_splice1_depth
		End Get
		Set
			If (Me._cable_2_splice1_depth.Equals(value) = false) Then
				Me.Oncable_2_splice1_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_splice1_depth = value
				Me.SendPropertyChanged("cable_2_splice1_depth")
				Me.Oncable_2_splice1_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_splice2_depth")>  _
	Public Property cable_2_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_splice2_depth
		End Get
		Set
			If (Me._cable_2_splice2_depth.Equals(value) = false) Then
				Me.Oncable_2_splice2_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_splice2_depth = value
				Me.SendPropertyChanged("cable_2_splice2_depth")
				Me.Oncable_2_splice2_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_splice1_depth")>  _
	Public Property cable_3_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_splice1_depth
		End Get
		Set
			If (Me._cable_3_splice1_depth.Equals(value) = false) Then
				Me.Oncable_3_splice1_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_splice1_depth = value
				Me.SendPropertyChanged("cable_3_splice1_depth")
				Me.Oncable_3_splice1_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_splice2_depth")>  _
	Public Property cable_3_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_splice2_depth
		End Get
		Set
			If (Me._cable_3_splice2_depth.Equals(value) = false) Then
				Me.Oncable_3_splice2_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_splice2_depth = value
				Me.SendPropertyChanged("cable_3_splice2_depth")
				Me.Oncable_3_splice2_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_version_number", DbType:="int")>  _
	Public Property version_number() As Integer
		Get
			Return Me._version_number
		End Get
		Set
			If ((Me._version_number = value)  _
						= false) Then
				Me.Onversion_numberChanging(value)
				Me.SendPropertyChanging
				Me._version_number = value
				Me.SendPropertyChanged("version_number")
				Me.Onversion_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_length_measurement_unit", DbType:="varchar(10)")>  _
	Public Property length_measurement_unit() As String
		Get
			Return Me._length_measurement_unit
		End Get
		Set
			If (String.Equals(Me._length_measurement_unit, value) = false) Then
				Me.Onlength_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._length_measurement_unit = value
				Me.SendPropertyChanged("length_measurement_unit")
				Me.Onlength_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actual_lost_time_reason", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property actual_lost_time_reason() As String
		Get
			Return Me._actual_lost_time_reason
		End Get
		Set
			If (String.Equals(Me._actual_lost_time_reason, value) = false) Then
				Me.Onactual_lost_time_reasonChanging(value)
				Me.SendPropertyChanging
				Me._actual_lost_time_reason = value
				Me.SendPropertyChanged("actual_lost_time_reason")
				Me.Onactual_lost_time_reasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dog_leg_severity", DbType:="real")>  _
	Public Property dog_leg_severity() As System.Nullable(Of Single)
		Get
			Return Me._dog_leg_severity
		End Get
		Set
			If (Me._dog_leg_severity.Equals(value) = false) Then
				Me.Ondog_leg_severityChanging(value)
				Me.SendPropertyChanging
				Me._dog_leg_severity = value
				Me.SendPropertyChanged("dog_leg_severity")
				Me.Ondog_leg_severityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_driller_depth", DbType:="real")>  _
	Public Property current_driller_depth() As System.Nullable(Of Single)
		Get
			Return Me._current_driller_depth
		End Get
		Set
			If (Me._current_driller_depth.Equals(value) = false) Then
				Me.Oncurrent_driller_depthChanging(value)
				Me.SendPropertyChanging
				Me._current_driller_depth = value
				Me.SendPropertyChanged("current_driller_depth")
				Me.Oncurrent_driller_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_flow_tube_size", DbType:="real")>  _
	Public Property cable_1_flow_tube_size() As System.Nullable(Of Single)
		Get
			Return Me._cable_1_flow_tube_size
		End Get
		Set
			If (Me._cable_1_flow_tube_size.Equals(value) = false) Then
				Me.Oncable_1_flow_tube_sizeChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_flow_tube_size = value
				Me.SendPropertyChanged("cable_1_flow_tube_size")
				Me.Oncable_1_flow_tube_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_flow_tube_size", DbType:="real")>  _
	Public Property cable_2_flow_tube_size() As System.Nullable(Of Single)
		Get
			Return Me._cable_2_flow_tube_size
		End Get
		Set
			If (Me._cable_2_flow_tube_size.Equals(value) = false) Then
				Me.Oncable_2_flow_tube_sizeChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_flow_tube_size = value
				Me.SendPropertyChanged("cable_2_flow_tube_size")
				Me.Oncable_2_flow_tube_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_flow_tube_size", DbType:="real")>  _
	Public Property cable_3_flow_tube_size() As System.Nullable(Of Single)
		Get
			Return Me._cable_3_flow_tube_size
		End Get
		Set
			If (Me._cable_3_flow_tube_size.Equals(value) = false) Then
				Me.Oncable_3_flow_tube_sizeChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_flow_tube_size = value
				Me.SendPropertyChanged("cable_3_flow_tube_size")
				Me.Oncable_3_flow_tube_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distance_measurement_unit", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property distance_measurement_unit() As String
		Get
			Return Me._distance_measurement_unit
		End Get
		Set
			If (String.Equals(Me._distance_measurement_unit, value) = false) Then
				Me.Ondistance_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._distance_measurement_unit = value
				Me.SendPropertyChanged("distance_measurement_unit")
				Me.Ondistance_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distance_to_well", DbType:="real")>  _
	Public Property distance_to_well() As System.Nullable(Of Single)
		Get
			Return Me._distance_to_well
		End Get
		Set
			If (Me._distance_to_well.Equals(value) = false) Then
				Me.Ondistance_to_wellChanging(value)
				Me.SendPropertyChanging
				Me._distance_to_well = value
				Me.SendPropertyChanged("distance_to_well")
				Me.Ondistance_to_wellChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_detail_ids", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property lost_detail_ids() As String
		Get
			Return Me._lost_detail_ids
		End Get
		Set
			If (String.Equals(Me._lost_detail_ids, value) = false) Then
				Me.Onlost_detail_idsChanging(value)
				Me.SendPropertyChanging
				Me._lost_detail_ids = value
				Me.SendPropertyChanged("lost_detail_ids")
				Me.Onlost_detail_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remote_service_flag", DbType:="bit")>  _
	Public Property remote_service_flag() As Boolean
		Get
			Return Me._remote_service_flag
		End Get
		Set
			If ((Me._remote_service_flag = value)  _
						= false) Then
				Me.Onremote_service_flagChanging(value)
				Me.SendPropertyChanging
				Me._remote_service_flag = value
				Me.SendPropertyChanged("remote_service_flag")
				Me.Onremote_service_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remote_unit", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property remote_unit() As String
		Get
			Return Me._remote_unit
		End Get
		Set
			If (String.Equals(Me._remote_unit, value) = false) Then
				Me.Onremote_unitChanging(value)
				Me.SendPropertyChanging
				Me._remote_unit = value
				Me.SendPropertyChanged("remote_unit")
				Me.Onremote_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fimp_count", DbType:="int")>  _
	Public Property fimp_count() As Integer
		Get
			Return Me._fimp_count
		End Get
		Set
			If ((Me._fimp_count = value)  _
						= false) Then
				Me.Onfimp_countChanging(value)
				Me.SendPropertyChanging
				Me._fimp_count = value
				Me.SendPropertyChanged("fimp_count")
				Me.Onfimp_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_overbalance_pressure", DbType:="real")>  _
	Public Property max_overbalance_pressure() As System.Nullable(Of Single)
		Get
			Return Me._max_overbalance_pressure
		End Get
		Set
			If (Me._max_overbalance_pressure.Equals(value) = false) Then
				Me.Onmax_overbalance_pressureChanging(value)
				Me.SendPropertyChanging
				Me._max_overbalance_pressure = value
				Me.SendPropertyChanged("max_overbalance_pressure")
				Me.Onmax_overbalance_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_critical_job_flag", DbType:="bit")>  _
	Public Property critical_job_flag() As Boolean
		Get
			Return Me._critical_job_flag
		End Get
		Set
			If ((Me._critical_job_flag = value)  _
						= false) Then
				Me.Oncritical_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._critical_job_flag = value
				Me.SendPropertyChanged("critical_job_flag")
				Me.Oncritical_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_color_code", DbType:="char(1)", CanBeNull:=false)>  _
	Public Property job_color_code() As String
		Get
			Return Me._job_color_code
		End Get
		Set
			If (String.Equals(Me._job_color_code, value) = false) Then
				Me.Onjob_color_codeChanging(value)
				Me.SendPropertyChanging
				Me._job_color_code = value
				Me.SendPropertyChanged("job_color_code")
				Me.Onjob_color_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_approved_state", DbType:="tinyint")>  _
	Public Property job_approved_state() As Byte
		Get
			Return Me._job_approved_state
		End Get
		Set
			If ((Me._job_approved_state = value)  _
						= false) Then
				Me.Onjob_approved_stateChanging(value)
				Me.SendPropertyChanging
				Me._job_approved_state = value
				Me.SendPropertyChanged("job_approved_state")
				Me.Onjob_approved_stateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_required_flag", DbType:="bit")>  _
	Public Property equipment_required_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._equipment_required_flag
		End Get
		Set
			If (Me._equipment_required_flag.Equals(value) = false) Then
				Me.Onequipment_required_flagChanging(value)
				Me.SendPropertyChanging
				Me._equipment_required_flag = value
				Me.SendPropertyChanged("equipment_required_flag")
				Me.Onequipment_required_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remote_engineers_required", DbType:="int")>  _
	Public Property remote_engineers_required() As System.Nullable(Of Integer)
		Get
			Return Me._remote_engineers_required
		End Get
		Set
			If (Me._remote_engineers_required.Equals(value) = false) Then
				Me.Onremote_engineers_requiredChanging(value)
				Me.SendPropertyChanging
				Me._remote_engineers_required = value
				Me.SendPropertyChanged("remote_engineers_required")
				Me.Onremote_engineers_requiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remote_operators_required", DbType:="int")>  _
	Public Property remote_operators_required() As System.Nullable(Of Integer)
		Get
			Return Me._remote_operators_required
		End Get
		Set
			If (Me._remote_operators_required.Equals(value) = false) Then
				Me.Onremote_operators_requiredChanging(value)
				Me.SendPropertyChanging
				Me._remote_operators_required = value
				Me.SendPropertyChanged("remote_operators_required")
				Me.Onremote_operators_requiredChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_contact")>  _
Partial Public Class disp_contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _contact_type_id As String
	
	Private _name As String
	
	Private _phone_type1 As String
	
	Private _phone1 As String
	
	Private _phone_type2 As String
	
	Private _phone2 As String
	
	Private _email As String
	
	Private _contact_type_desc As String
	
	Private _employee_id As String
	
	Private _critical_contact_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Oncontact_type_idChanging(value As String)
    End Sub
    Partial Private Sub Oncontact_type_idChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onphone_type1Changing(value As String)
    End Sub
    Partial Private Sub Onphone_type1Changed()
    End Sub
    Partial Private Sub Onphone1Changing(value As String)
    End Sub
    Partial Private Sub Onphone1Changed()
    End Sub
    Partial Private Sub Onphone_type2Changing(value As String)
    End Sub
    Partial Private Sub Onphone_type2Changed()
    End Sub
    Partial Private Sub Onphone2Changing(value As String)
    End Sub
    Partial Private Sub Onphone2Changed()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Oncontact_type_descChanging(value As String)
    End Sub
    Partial Private Sub Oncontact_type_descChanged()
    End Sub
    Partial Private Sub Onemployee_idChanging(value As String)
    End Sub
    Partial Private Sub Onemployee_idChanged()
    End Sub
    Partial Private Sub Oncritical_contact_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncritical_contact_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_type_id", DbType:="Char(5)")>  _
	Public Property contact_type_id() As String
		Get
			Return Me._contact_type_id
		End Get
		Set
			If (String.Equals(Me._contact_type_id, value) = false) Then
				Me.Oncontact_type_idChanging(value)
				Me.SendPropertyChanging
				Me._contact_type_id = value
				Me.SendPropertyChanged("contact_type_id")
				Me.Oncontact_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(30)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone_type1", DbType:="VarChar(10)")>  _
	Public Property phone_type1() As String
		Get
			Return Me._phone_type1
		End Get
		Set
			If (String.Equals(Me._phone_type1, value) = false) Then
				Me.Onphone_type1Changing(value)
				Me.SendPropertyChanging
				Me._phone_type1 = value
				Me.SendPropertyChanged("phone_type1")
				Me.Onphone_type1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone1", DbType:="VarChar(30)")>  _
	Public Property phone1() As String
		Get
			Return Me._phone1
		End Get
		Set
			If (String.Equals(Me._phone1, value) = false) Then
				Me.Onphone1Changing(value)
				Me.SendPropertyChanging
				Me._phone1 = value
				Me.SendPropertyChanged("phone1")
				Me.Onphone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone_type2", DbType:="VarChar(10)")>  _
	Public Property phone_type2() As String
		Get
			Return Me._phone_type2
		End Get
		Set
			If (String.Equals(Me._phone_type2, value) = false) Then
				Me.Onphone_type2Changing(value)
				Me.SendPropertyChanging
				Me._phone_type2 = value
				Me.SendPropertyChanged("phone_type2")
				Me.Onphone_type2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone2", DbType:="VarChar(30)")>  _
	Public Property phone2() As String
		Get
			Return Me._phone2
		End Get
		Set
			If (String.Equals(Me._phone2, value) = false) Then
				Me.Onphone2Changing(value)
				Me.SendPropertyChanging
				Me._phone2 = value
				Me.SendPropertyChanged("phone2")
				Me.Onphone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_type_desc", DbType:="VarChar(50)")>  _
	Public Property contact_type_desc() As String
		Get
			Return Me._contact_type_desc
		End Get
		Set
			If (String.Equals(Me._contact_type_desc, value) = false) Then
				Me.Oncontact_type_descChanging(value)
				Me.SendPropertyChanging
				Me._contact_type_desc = value
				Me.SendPropertyChanged("contact_type_desc")
				Me.Oncontact_type_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me.Onemployee_idChanging(value)
				Me.SendPropertyChanging
				Me._employee_id = value
				Me.SendPropertyChanged("employee_id")
				Me.Onemployee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_critical_contact_flag", DbType:="bit")>  _
	Public Property critical_contact_flag() As Boolean
		Get
			Return Me._critical_contact_flag
		End Get
		Set
			If ((Me._critical_contact_flag = value)  _
						= false) Then
				Me.Oncritical_contact_flagChanging(value)
				Me.SendPropertyChanging
				Me._critical_contact_flag = value
				Me.SendPropertyChanged("critical_contact_flag")
				Me.Oncritical_contact_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_personnel")>  _
Partial Public Class disp_personnel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _employee_id As String
	
	Private _name As String
	
	Private _member_title_id As String
	
	Private _phone As String
	
	Private _email As String
	
	Private _dispatch_comment As String
	
	Private _wireline_personnel_comment As String
	
	Private _left_for_job As System.Nullable(Of Date)
	
	Private _returned_from_job As System.Nullable(Of Date)
	
	Private _member_title_desc As String
	
	Private _fj_bonus_approved_flag As Boolean
	
	Private _dr_or_ma_approved_flag As Boolean
	
	Private _member_subtitle_id As String
	
	Private _member_subtitle_desc As String
	
	Private _include_in_run_engineer_list_flag As Boolean
	
	Private _critical_personnel_flag As Boolean
	
	Private _job_count As System.Nullable(Of Integer)
	
	Private _operating_time As System.Nullable(Of Decimal)
	
	Private _non_productive_time As System.Nullable(Of Decimal)
	
	Private _statistics_changed_flag As Boolean
	
	Private _remote_engineer_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onemployee_idChanging(value As String)
    End Sub
    Partial Private Sub Onemployee_idChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onmember_title_idChanging(value As String)
    End Sub
    Partial Private Sub Onmember_title_idChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Ondispatch_commentChanging(value As String)
    End Sub
    Partial Private Sub Ondispatch_commentChanged()
    End Sub
    Partial Private Sub Onwireline_personnel_commentChanging(value As String)
    End Sub
    Partial Private Sub Onwireline_personnel_commentChanged()
    End Sub
    Partial Private Sub Onleft_for_jobChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onleft_for_jobChanged()
    End Sub
    Partial Private Sub Onreturned_from_jobChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onreturned_from_jobChanged()
    End Sub
    Partial Private Sub Onmember_title_descChanging(value As String)
    End Sub
    Partial Private Sub Onmember_title_descChanged()
    End Sub
    Partial Private Sub Onfj_bonus_approved_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onfj_bonus_approved_flagChanged()
    End Sub
    Partial Private Sub Ondr_or_ma_approved_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ondr_or_ma_approved_flagChanged()
    End Sub
    Partial Private Sub Onmember_subtitle_idChanging(value As String)
    End Sub
    Partial Private Sub Onmember_subtitle_idChanged()
    End Sub
    Partial Private Sub Onmember_subtitle_descChanging(value As String)
    End Sub
    Partial Private Sub Onmember_subtitle_descChanged()
    End Sub
    Partial Private Sub Oninclude_in_run_engineer_list_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninclude_in_run_engineer_list_flagChanged()
    End Sub
    Partial Private Sub Oncritical_personnel_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncritical_personnel_flagChanged()
    End Sub
    Partial Private Sub Onjob_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onjob_countChanged()
    End Sub
    Partial Private Sub Onoperating_timeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onoperating_timeChanged()
    End Sub
    Partial Private Sub Onnon_productive_timeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onnon_productive_timeChanged()
    End Sub
    Partial Private Sub Onstatistics_changed_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onstatistics_changed_flagChanged()
    End Sub
    Partial Private Sub Onremote_engineer_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onremote_engineer_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me.Onemployee_idChanging(value)
				Me.SendPropertyChanging
				Me._employee_id = value
				Me.SendPropertyChanged("employee_id")
				Me.Onemployee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5)")>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me.Onmember_title_idChanging(value)
				Me.SendPropertyChanging
				Me._member_title_id = value
				Me.SendPropertyChanged("member_title_id")
				Me.Onmember_title_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(14)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_comment", DbType:="VarChar(255)")>  _
	Public Property dispatch_comment() As String
		Get
			Return Me._dispatch_comment
		End Get
		Set
			If (String.Equals(Me._dispatch_comment, value) = false) Then
				Me.Ondispatch_commentChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_comment = value
				Me.SendPropertyChanged("dispatch_comment")
				Me.Ondispatch_commentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_personnel_comment", DbType:="VarChar(255)")>  _
	Public Property wireline_personnel_comment() As String
		Get
			Return Me._wireline_personnel_comment
		End Get
		Set
			If (String.Equals(Me._wireline_personnel_comment, value) = false) Then
				Me.Onwireline_personnel_commentChanging(value)
				Me.SendPropertyChanging
				Me._wireline_personnel_comment = value
				Me.SendPropertyChanged("wireline_personnel_comment")
				Me.Onwireline_personnel_commentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_left_for_job", DbType:="SmallDateTime")>  _
	Public Property left_for_job() As System.Nullable(Of Date)
		Get
			Return Me._left_for_job
		End Get
		Set
			If (Me._left_for_job.Equals(value) = false) Then
				Me.Onleft_for_jobChanging(value)
				Me.SendPropertyChanging
				Me._left_for_job = value
				Me.SendPropertyChanged("left_for_job")
				Me.Onleft_for_jobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returned_from_job", DbType:="SmallDateTime")>  _
	Public Property returned_from_job() As System.Nullable(Of Date)
		Get
			Return Me._returned_from_job
		End Get
		Set
			If (Me._returned_from_job.Equals(value) = false) Then
				Me.Onreturned_from_jobChanging(value)
				Me.SendPropertyChanging
				Me._returned_from_job = value
				Me.SendPropertyChanged("returned_from_job")
				Me.Onreturned_from_jobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", CanBeNull:=false)>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me.Onmember_title_descChanging(value)
				Me.SendPropertyChanging
				Me._member_title_desc = value
				Me.SendPropertyChanged("member_title_desc")
				Me.Onmember_title_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fj_bonus_approved_flag", DbType:="bit")>  _
	Public Property fj_bonus_approved_flag() As Boolean
		Get
			Return Me._fj_bonus_approved_flag
		End Get
		Set
			If ((Me._fj_bonus_approved_flag = value)  _
						= false) Then
				Me.Onfj_bonus_approved_flagChanging(value)
				Me.SendPropertyChanging
				Me._fj_bonus_approved_flag = value
				Me.SendPropertyChanged("fj_bonus_approved_flag")
				Me.Onfj_bonus_approved_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dr_or_ma_approved_flag", DbType:="bit")>  _
	Public Property dr_or_ma_approved_flag() As Boolean
		Get
			Return Me._dr_or_ma_approved_flag
		End Get
		Set
			If ((Me._dr_or_ma_approved_flag = value)  _
						= false) Then
				Me.Ondr_or_ma_approved_flagChanging(value)
				Me.SendPropertyChanging
				Me._dr_or_ma_approved_flag = value
				Me.SendPropertyChanged("dr_or_ma_approved_flag")
				Me.Ondr_or_ma_approved_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_subtitle_id", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property member_subtitle_id() As String
		Get
			Return Me._member_subtitle_id
		End Get
		Set
			If (String.Equals(Me._member_subtitle_id, value) = false) Then
				Me.Onmember_subtitle_idChanging(value)
				Me.SendPropertyChanging
				Me._member_subtitle_id = value
				Me.SendPropertyChanged("member_subtitle_id")
				Me.Onmember_subtitle_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_subtitle_desc", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property member_subtitle_desc() As String
		Get
			Return Me._member_subtitle_desc
		End Get
		Set
			If (String.Equals(Me._member_subtitle_desc, value) = false) Then
				Me.Onmember_subtitle_descChanging(value)
				Me.SendPropertyChanging
				Me._member_subtitle_desc = value
				Me.SendPropertyChanged("member_subtitle_desc")
				Me.Onmember_subtitle_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_include_in_run_engineer_list_flag", DbType:="bit")>  _
	Public Property include_in_run_engineer_list_flag() As Boolean
		Get
			Return Me._include_in_run_engineer_list_flag
		End Get
		Set
			If ((Me._include_in_run_engineer_list_flag = value)  _
						= false) Then
				Me.Oninclude_in_run_engineer_list_flagChanging(value)
				Me.SendPropertyChanging
				Me._include_in_run_engineer_list_flag = value
				Me.SendPropertyChanged("include_in_run_engineer_list_flag")
				Me.Oninclude_in_run_engineer_list_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_critical_personnel_flag", DbType:="bit")>  _
	Public Property critical_personnel_flag() As Boolean
		Get
			Return Me._critical_personnel_flag
		End Get
		Set
			If ((Me._critical_personnel_flag = value)  _
						= false) Then
				Me.Oncritical_personnel_flagChanging(value)
				Me.SendPropertyChanging
				Me._critical_personnel_flag = value
				Me.SendPropertyChanged("critical_personnel_flag")
				Me.Oncritical_personnel_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_count", DbType:="int")>  _
	Public Property job_count() As System.Nullable(Of Integer)
		Get
			Return Me._job_count
		End Get
		Set
			If (Me._job_count.Equals(value) = false) Then
				Me.Onjob_countChanging(value)
				Me.SendPropertyChanging
				Me._job_count = value
				Me.SendPropertyChanged("job_count")
				Me.Onjob_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time", DbType:="decimal(10, 2)")>  _
	Public Property operating_time() As System.Nullable(Of Decimal)
		Get
			Return Me._operating_time
		End Get
		Set
			If (Me._operating_time.Equals(value) = false) Then
				Me.Onoperating_timeChanging(value)
				Me.SendPropertyChanging
				Me._operating_time = value
				Me.SendPropertyChanged("operating_time")
				Me.Onoperating_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_non_productive_time", DbType:="decimal(5, 2)")>  _
	Public Property non_productive_time() As System.Nullable(Of Decimal)
		Get
			Return Me._non_productive_time
		End Get
		Set
			If (Me._non_productive_time.Equals(value) = false) Then
				Me.Onnon_productive_timeChanging(value)
				Me.SendPropertyChanging
				Me._non_productive_time = value
				Me.SendPropertyChanged("non_productive_time")
				Me.Onnon_productive_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_statistics_changed_flag", DbType:="bit")>  _
	Public Property statistics_changed_flag() As Boolean
		Get
			Return Me._statistics_changed_flag
		End Get
		Set
			If ((Me._statistics_changed_flag = value)  _
						= false) Then
				Me.Onstatistics_changed_flagChanging(value)
				Me.SendPropertyChanging
				Me._statistics_changed_flag = value
				Me.SendPropertyChanged("statistics_changed_flag")
				Me.Onstatistics_changed_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remote_engineer_flag", DbType:="bit")>  _
	Public Property remote_engineer_flag() As Boolean
		Get
			Return Me._remote_engineer_flag
		End Get
		Set
			If ((Me._remote_engineer_flag = value)  _
						= false) Then
				Me.Onremote_engineer_flagChanging(value)
				Me.SendPropertyChanging
				Me._remote_engineer_flag = value
				Me.SendPropertyChanged("remote_engineer_flag")
				Me.Onremote_engineer_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_services_requested")>  _
Partial Public Class disp_services_requested
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _run_order As System.Nullable(Of Integer)
	
	Private _run_instructions As String
	
	Private _otc_st_temp As String
	
	Private _service_list As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onrun_orderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrun_orderChanged()
    End Sub
    Partial Private Sub Onrun_instructionsChanging(value As String)
    End Sub
    Partial Private Sub Onrun_instructionsChanged()
    End Sub
    Partial Private Sub Onotc_st_tempChanging(value As String)
    End Sub
    Partial Private Sub Onotc_st_tempChanged()
    End Sub
    Partial Private Sub Onservice_listChanging(value As String)
    End Sub
    Partial Private Sub Onservice_listChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_order", DbType:="Int")>  _
	Public Property run_order() As System.Nullable(Of Integer)
		Get
			Return Me._run_order
		End Get
		Set
			If (Me._run_order.Equals(value) = false) Then
				Me.Onrun_orderChanging(value)
				Me.SendPropertyChanging
				Me._run_order = value
				Me.SendPropertyChanged("run_order")
				Me.Onrun_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_instructions", DbType:="VarChar(250)")>  _
	Public Property run_instructions() As String
		Get
			Return Me._run_instructions
		End Get
		Set
			If (String.Equals(Me._run_instructions, value) = false) Then
				Me.Onrun_instructionsChanging(value)
				Me.SendPropertyChanging
				Me._run_instructions = value
				Me.SendPropertyChanged("run_instructions")
				Me.Onrun_instructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_otc_st_temp", DbType:="VarChar(40)")>  _
	Public Property otc_st_temp() As String
		Get
			Return Me._otc_st_temp
		End Get
		Set
			If (String.Equals(Me._otc_st_temp, value) = false) Then
				Me.Onotc_st_tempChanging(value)
				Me.SendPropertyChanging
				Me._otc_st_temp = value
				Me.SendPropertyChanged("otc_st_temp")
				Me.Onotc_st_tempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list", CanBeNull:=false)>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me.Onservice_listChanging(value)
				Me.SendPropertyChanging
				Me._service_list = value
				Me.SendPropertyChanged("service_list")
				Me.Onservice_listChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_field_test")>  _
Partial Public Class disp_field_test
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _op_num As System.Nullable(Of Integer)
	
	Private _trip_num As System.Nullable(Of Integer)
	
	Private _xxxx_zzz As String
	
	Private _comments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onop_numChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onop_numChanged()
    End Sub
    Partial Private Sub Ontrip_numChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontrip_numChanged()
    End Sub
    Partial Private Sub Onxxxx_zzzChanging(value As String)
    End Sub
    Partial Private Sub Onxxxx_zzzChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op_num", DbType:="Int")>  _
	Public Property op_num() As System.Nullable(Of Integer)
		Get
			Return Me._op_num
		End Get
		Set
			If (Me._op_num.Equals(value) = false) Then
				Me.Onop_numChanging(value)
				Me.SendPropertyChanging
				Me._op_num = value
				Me.SendPropertyChanged("op_num")
				Me.Onop_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trip_num", DbType:="Int")>  _
	Public Property trip_num() As System.Nullable(Of Integer)
		Get
			Return Me._trip_num
		End Get
		Set
			If (Me._trip_num.Equals(value) = false) Then
				Me.Ontrip_numChanging(value)
				Me.SendPropertyChanging
				Me._trip_num = value
				Me.SendPropertyChanged("trip_num")
				Me.Ontrip_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_xxxx_zzz", DbType:="VarChar(40)")>  _
	Public Property xxxx_zzz() As String
		Get
			Return Me._xxxx_zzz
		End Get
		Set
			If (String.Equals(Me._xxxx_zzz, value) = false) Then
				Me.Onxxxx_zzzChanging(value)
				Me.SendPropertyChanging
				Me._xxxx_zzz = value
				Me.SendPropertyChanged("xxxx_zzz")
				Me.Onxxxx_zzzChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="VarChar(80)")>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.prdisp_interval")>  _
Partial Public Class disp_interval
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _run_number As String
	
	Private _start_depth As System.Nullable(Of Single)
	
	Private _end_depth As System.Nullable(Of Single)
	
	Private _length As System.Nullable(Of Single)
	
	Private _shot_density As System.Nullable(Of Integer)
	
	Private _charge_count As System.Nullable(Of Integer)
	
	Private _charge_type As String
	
	Private _gun_type As String
	
	Private _gun_size As String
	
	Private _gun_supplier As String
	
	Private _primer_cord As String
	
	Private _phasing As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onrun_numberChanging(value As String)
    End Sub
    Partial Private Sub Onrun_numberChanged()
    End Sub
    Partial Private Sub Onstart_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onstart_depthChanged()
    End Sub
    Partial Private Sub Onend_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onend_depthChanged()
    End Sub
    Partial Private Sub OnlengthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnlengthChanged()
    End Sub
    Partial Private Sub Onshot_densityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onshot_densityChanged()
    End Sub
    Partial Private Sub Oncharge_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncharge_countChanged()
    End Sub
    Partial Private Sub Oncharge_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncharge_typeChanged()
    End Sub
    Partial Private Sub Ongun_typeChanging(value As String)
    End Sub
    Partial Private Sub Ongun_typeChanged()
    End Sub
    Partial Private Sub Ongun_sizeChanging(value As String)
    End Sub
    Partial Private Sub Ongun_sizeChanged()
    End Sub
    Partial Private Sub Ongun_supplierChanging(value As String)
    End Sub
    Partial Private Sub Ongun_supplierChanged()
    End Sub
    Partial Private Sub Onprimer_cordChanging(value As String)
    End Sub
    Partial Private Sub Onprimer_cordChanged()
    End Sub
    Partial Private Sub OnphasingChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnphasingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_number", DbType:="varchar(10)")>  _
	Public Property run_number() As String
		Get
			Return Me._run_number
		End Get
		Set
			If (String.Equals(Me._run_number, value) = false) Then
				Me.Onrun_numberChanging(value)
				Me.SendPropertyChanging
				Me._run_number = value
				Me.SendPropertyChanged("run_number")
				Me.Onrun_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_start_depth", DbType:="Real")>  _
	Public Property start_depth() As System.Nullable(Of Single)
		Get
			Return Me._start_depth
		End Get
		Set
			If (Me._start_depth.Equals(value) = false) Then
				Me.Onstart_depthChanging(value)
				Me.SendPropertyChanging
				Me._start_depth = value
				Me.SendPropertyChanged("start_depth")
				Me.Onstart_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_end_depth", DbType:="Real")>  _
	Public Property end_depth() As System.Nullable(Of Single)
		Get
			Return Me._end_depth
		End Get
		Set
			If (Me._end_depth.Equals(value) = false) Then
				Me.Onend_depthChanging(value)
				Me.SendPropertyChanging
				Me._end_depth = value
				Me.SendPropertyChanged("end_depth")
				Me.Onend_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_length", DbType:="Real")>  _
	Public Property length() As System.Nullable(Of Single)
		Get
			Return Me._length
		End Get
		Set
			If (Me._length.Equals(value) = false) Then
				Me.OnlengthChanging(value)
				Me.SendPropertyChanging
				Me._length = value
				Me.SendPropertyChanged("length")
				Me.OnlengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shot_density", DbType:="Int")>  _
	Public Property shot_density() As System.Nullable(Of Integer)
		Get
			Return Me._shot_density
		End Get
		Set
			If (Me._shot_density.Equals(value) = false) Then
				Me.Onshot_densityChanging(value)
				Me.SendPropertyChanging
				Me._shot_density = value
				Me.SendPropertyChanged("shot_density")
				Me.Onshot_densityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_charge_count", DbType:="Int")>  _
	Public Property charge_count() As System.Nullable(Of Integer)
		Get
			Return Me._charge_count
		End Get
		Set
			If (Me._charge_count.Equals(value) = false) Then
				Me.Oncharge_countChanging(value)
				Me.SendPropertyChanging
				Me._charge_count = value
				Me.SendPropertyChanged("charge_count")
				Me.Oncharge_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_charge_type", DbType:="VarChar(30)")>  _
	Public Property charge_type() As String
		Get
			Return Me._charge_type
		End Get
		Set
			If (String.Equals(Me._charge_type, value) = false) Then
				Me.Oncharge_typeChanging(value)
				Me.SendPropertyChanging
				Me._charge_type = value
				Me.SendPropertyChanged("charge_type")
				Me.Oncharge_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_type", DbType:="VarChar(40)")>  _
	Public Property gun_type() As String
		Get
			Return Me._gun_type
		End Get
		Set
			If (String.Equals(Me._gun_type, value) = false) Then
				Me.Ongun_typeChanging(value)
				Me.SendPropertyChanging
				Me._gun_type = value
				Me.SendPropertyChanged("gun_type")
				Me.Ongun_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_size", DbType:="VarChar(10)")>  _
	Public Property gun_size() As String
		Get
			Return Me._gun_size
		End Get
		Set
			If (String.Equals(Me._gun_size, value) = false) Then
				Me.Ongun_sizeChanging(value)
				Me.SendPropertyChanging
				Me._gun_size = value
				Me.SendPropertyChanged("gun_size")
				Me.Ongun_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_supplier", DbType:="VarChar(30)")>  _
	Public Property gun_supplier() As String
		Get
			Return Me._gun_supplier
		End Get
		Set
			If (String.Equals(Me._gun_supplier, value) = false) Then
				Me.Ongun_supplierChanging(value)
				Me.SendPropertyChanging
				Me._gun_supplier = value
				Me.SendPropertyChanged("gun_supplier")
				Me.Ongun_supplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_primer_cord", DbType:="VarChar(30)")>  _
	Public Property primer_cord() As String
		Get
			Return Me._primer_cord
		End Get
		Set
			If (String.Equals(Me._primer_cord, value) = false) Then
				Me.Onprimer_cordChanging(value)
				Me.SendPropertyChanging
				Me._primer_cord = value
				Me.SendPropertyChanged("primer_cord")
				Me.Onprimer_cordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phasing", DbType:="Real")>  _
	Public Property phasing() As System.Nullable(Of Single)
		Get
			Return Me._phasing
		End Get
		Set
			If (Me._phasing.Equals(value) = false) Then
				Me.OnphasingChanging(value)
				Me.SendPropertyChanging
				Me._phasing = value
				Me.SendPropertyChanged("phasing")
				Me.OnphasingChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_tubular")>  _
Partial Public Class disp_tubular
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _tubular_type As String
	
	Private _tubular_size As System.Nullable(Of Single)
	
	Private _tubular_weight As System.Nullable(Of Single)
	
	Private _start_depth As System.Nullable(Of Single)
	
	Private _end_depth As System.Nullable(Of Single)
	
	Private _deviation As System.Nullable(Of Single)
	
	Private _tubular_grade As String
	
	Private _hole_size_flag As Boolean
	
	Private _thread_type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Ontubular_typeChanging(value As String)
    End Sub
    Partial Private Sub Ontubular_typeChanged()
    End Sub
    Partial Private Sub Ontubular_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontubular_sizeChanged()
    End Sub
    Partial Private Sub Ontubular_weightChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontubular_weightChanged()
    End Sub
    Partial Private Sub Onstart_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onstart_depthChanged()
    End Sub
    Partial Private Sub Onend_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onend_depthChanged()
    End Sub
    Partial Private Sub OndeviationChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OndeviationChanged()
    End Sub
    Partial Private Sub Ontubular_gradeChanging(value As String)
    End Sub
    Partial Private Sub Ontubular_gradeChanged()
    End Sub
    Partial Private Sub Onhole_size_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onhole_size_flagChanged()
    End Sub
    Partial Private Sub Onthread_typeChanging(value As String)
    End Sub
    Partial Private Sub Onthread_typeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tubular_type", DbType:="VarChar(10)")>  _
	Public Property tubular_type() As String
		Get
			Return Me._tubular_type
		End Get
		Set
			If (String.Equals(Me._tubular_type, value) = false) Then
				Me.Ontubular_typeChanging(value)
				Me.SendPropertyChanging
				Me._tubular_type = value
				Me.SendPropertyChanged("tubular_type")
				Me.Ontubular_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tubular_size", DbType:="real")>  _
	Public Property tubular_size() As System.Nullable(Of Single)
		Get
			Return Me._tubular_size
		End Get
		Set
			If (Me._tubular_size.Equals(value) = false) Then
				Me.Ontubular_sizeChanging(value)
				Me.SendPropertyChanging
				Me._tubular_size = value
				Me.SendPropertyChanged("tubular_size")
				Me.Ontubular_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tubular_weight", DbType:="Real")>  _
	Public Property tubular_weight() As System.Nullable(Of Single)
		Get
			Return Me._tubular_weight
		End Get
		Set
			If (Me._tubular_weight.Equals(value) = false) Then
				Me.Ontubular_weightChanging(value)
				Me.SendPropertyChanging
				Me._tubular_weight = value
				Me.SendPropertyChanged("tubular_weight")
				Me.Ontubular_weightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_start_depth", DbType:="real")>  _
	Public Property start_depth() As System.Nullable(Of Single)
		Get
			Return Me._start_depth
		End Get
		Set
			If (Me._start_depth.Equals(value) = false) Then
				Me.Onstart_depthChanging(value)
				Me.SendPropertyChanging
				Me._start_depth = value
				Me.SendPropertyChanged("start_depth")
				Me.Onstart_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_end_depth", DbType:="real")>  _
	Public Property end_depth() As System.Nullable(Of Single)
		Get
			Return Me._end_depth
		End Get
		Set
			If (Me._end_depth.Equals(value) = false) Then
				Me.Onend_depthChanging(value)
				Me.SendPropertyChanging
				Me._end_depth = value
				Me.SendPropertyChanged("end_depth")
				Me.Onend_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deviation", DbType:="Real")>  _
	Public Property deviation() As System.Nullable(Of Single)
		Get
			Return Me._deviation
		End Get
		Set
			If (Me._deviation.Equals(value) = false) Then
				Me.OndeviationChanging(value)
				Me.SendPropertyChanging
				Me._deviation = value
				Me.SendPropertyChanged("deviation")
				Me.OndeviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tubular_grade", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property tubular_grade() As String
		Get
			Return Me._tubular_grade
		End Get
		Set
			If (String.Equals(Me._tubular_grade, value) = false) Then
				Me.Ontubular_gradeChanging(value)
				Me.SendPropertyChanging
				Me._tubular_grade = value
				Me.SendPropertyChanged("tubular_grade")
				Me.Ontubular_gradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hole_size_flag", DbType:="bit")>  _
	Public Property hole_size_flag() As Boolean
		Get
			Return Me._hole_size_flag
		End Get
		Set
			If ((Me._hole_size_flag = value)  _
						= false) Then
				Me.Onhole_size_flagChanging(value)
				Me.SendPropertyChanging
				Me._hole_size_flag = value
				Me.SendPropertyChanged("hole_size_flag")
				Me.Onhole_size_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_thread_type", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property thread_type() As String
		Get
			Return Me._thread_type
		End Get
		Set
			If (String.Equals(Me._thread_type, value) = false) Then
				Me.Onthread_typeChanging(value)
				Me.SendPropertyChanging
				Me._thread_type = value
				Me.SendPropertyChanged("thread_type")
				Me.Onthread_typeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_run")>  _
Partial Public Class disp_run
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _op_num As System.Nullable(Of Integer)
	
	Private _trip_num As System.Nullable(Of Integer)
	
	Private _run_order As System.Nullable(Of Integer)
	
	Private _in_datetime As System.Nullable(Of Date)
	
	Private _out_datetime As System.Nullable(Of Date)
	
	Private _employee_id As String
	
	Private _interval_top_depth As System.Nullable(Of Single)
	
	Private _interval_bottom_depth As System.Nullable(Of Single)
	
	Private _fail_code As String
	
	Private _operating_time_hours As System.Nullable(Of Single)
	
	Private _lost_time_hours As System.Nullable(Of Single)
	
	Private _comment As String
	
	Private _cable_id As String
	
	Private _cable_tension As System.Nullable(Of Integer)
	
	Private _cable_cuts As System.Nullable(Of Integer)
	
	Private _service_list As String
	
	Private _standby_time_hours As System.Nullable(Of Single)
	
	Private _fishing_flag As Boolean
	
	Private _temperature As System.Nullable(Of Single)
	
	Private _pressure As System.Nullable(Of Single)
	
	Private _jarring_count As System.Nullable(Of Integer)
	
	Private _service_type As String
	
	Private _corrected_lost_time_hours As System.Nullable(Of Single)
	
	Private _corrected_lost_time_reason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onop_numChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onop_numChanged()
    End Sub
    Partial Private Sub Ontrip_numChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontrip_numChanged()
    End Sub
    Partial Private Sub Onrun_orderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrun_orderChanged()
    End Sub
    Partial Private Sub Onin_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onin_datetimeChanged()
    End Sub
    Partial Private Sub Onout_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onout_datetimeChanged()
    End Sub
    Partial Private Sub Onemployee_idChanging(value As String)
    End Sub
    Partial Private Sub Onemployee_idChanged()
    End Sub
    Partial Private Sub Oninterval_top_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oninterval_top_depthChanged()
    End Sub
    Partial Private Sub Oninterval_bottom_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oninterval_bottom_depthChanged()
    End Sub
    Partial Private Sub Onfail_codeChanging(value As String)
    End Sub
    Partial Private Sub Onfail_codeChanged()
    End Sub
    Partial Private Sub Onoperating_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onoperating_time_hoursChanged()
    End Sub
    Partial Private Sub Onlost_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onlost_time_hoursChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Oncable_idChanging(value As String)
    End Sub
    Partial Private Sub Oncable_idChanged()
    End Sub
    Partial Private Sub Oncable_tensionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_tensionChanged()
    End Sub
    Partial Private Sub Oncable_cutsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_cutsChanged()
    End Sub
    Partial Private Sub Onservice_listChanging(value As String)
    End Sub
    Partial Private Sub Onservice_listChanged()
    End Sub
    Partial Private Sub Onstandby_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onstandby_time_hoursChanged()
    End Sub
    Partial Private Sub Onfishing_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onfishing_flagChanged()
    End Sub
    Partial Private Sub OntemperatureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OntemperatureChanged()
    End Sub
    Partial Private Sub OnpressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnpressureChanged()
    End Sub
    Partial Private Sub Onjarring_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onjarring_countChanged()
    End Sub
    Partial Private Sub Onservice_typeChanging(value As String)
    End Sub
    Partial Private Sub Onservice_typeChanged()
    End Sub
    Partial Private Sub Oncorrected_lost_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncorrected_lost_time_hoursChanged()
    End Sub
    Partial Private Sub Oncorrected_lost_time_reasonChanging(value As String)
    End Sub
    Partial Private Sub Oncorrected_lost_time_reasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op_num", DbType:="Int")>  _
	Public Property op_num() As System.Nullable(Of Integer)
		Get
			Return Me._op_num
		End Get
		Set
			If (Me._op_num.Equals(value) = false) Then
				Me.Onop_numChanging(value)
				Me.SendPropertyChanging
				Me._op_num = value
				Me.SendPropertyChanged("op_num")
				Me.Onop_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trip_num", DbType:="Int")>  _
	Public Property trip_num() As System.Nullable(Of Integer)
		Get
			Return Me._trip_num
		End Get
		Set
			If (Me._trip_num.Equals(value) = false) Then
				Me.Ontrip_numChanging(value)
				Me.SendPropertyChanging
				Me._trip_num = value
				Me.SendPropertyChanged("trip_num")
				Me.Ontrip_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_order", DbType:="Int")>  _
	Public Property run_order() As System.Nullable(Of Integer)
		Get
			Return Me._run_order
		End Get
		Set
			If (Me._run_order.Equals(value) = false) Then
				Me.Onrun_orderChanging(value)
				Me.SendPropertyChanging
				Me._run_order = value
				Me.SendPropertyChanged("run_order")
				Me.Onrun_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_in_datetime", DbType:="SmallDateTime")>  _
	Public Property in_datetime() As System.Nullable(Of Date)
		Get
			Return Me._in_datetime
		End Get
		Set
			If (Me._in_datetime.Equals(value) = false) Then
				Me.Onin_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._in_datetime = value
				Me.SendPropertyChanged("in_datetime")
				Me.Onin_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_out_datetime", DbType:="SmallDateTime")>  _
	Public Property out_datetime() As System.Nullable(Of Date)
		Get
			Return Me._out_datetime
		End Get
		Set
			If (Me._out_datetime.Equals(value) = false) Then
				Me.Onout_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._out_datetime = value
				Me.SendPropertyChanged("out_datetime")
				Me.Onout_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me.Onemployee_idChanging(value)
				Me.SendPropertyChanging
				Me._employee_id = value
				Me.SendPropertyChanged("employee_id")
				Me.Onemployee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_interval_top_depth", DbType:="Real")>  _
	Public Property interval_top_depth() As System.Nullable(Of Single)
		Get
			Return Me._interval_top_depth
		End Get
		Set
			If (Me._interval_top_depth.Equals(value) = false) Then
				Me.Oninterval_top_depthChanging(value)
				Me.SendPropertyChanging
				Me._interval_top_depth = value
				Me.SendPropertyChanged("interval_top_depth")
				Me.Oninterval_top_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_interval_bottom_depth", DbType:="Real")>  _
	Public Property interval_bottom_depth() As System.Nullable(Of Single)
		Get
			Return Me._interval_bottom_depth
		End Get
		Set
			If (Me._interval_bottom_depth.Equals(value) = false) Then
				Me.Oninterval_bottom_depthChanging(value)
				Me.SendPropertyChanging
				Me._interval_bottom_depth = value
				Me.SendPropertyChanged("interval_bottom_depth")
				Me.Oninterval_bottom_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fail_code", DbType:="VarChar(10)")>  _
	Public Property fail_code() As String
		Get
			Return Me._fail_code
		End Get
		Set
			If (String.Equals(Me._fail_code, value) = false) Then
				Me.Onfail_codeChanging(value)
				Me.SendPropertyChanging
				Me._fail_code = value
				Me.SendPropertyChanged("fail_code")
				Me.Onfail_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time_hours", DbType:="Real")>  _
	Public Property operating_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._operating_time_hours
		End Get
		Set
			If (Me._operating_time_hours.Equals(value) = false) Then
				Me.Onoperating_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._operating_time_hours = value
				Me.SendPropertyChanged("operating_time_hours")
				Me.Onoperating_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_hours", DbType:="Real")>  _
	Public Property lost_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._lost_time_hours
		End Get
		Set
			If (Me._lost_time_hours.Equals(value) = false) Then
				Me.Onlost_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._lost_time_hours = value
				Me.SendPropertyChanged("lost_time_hours")
				Me.Onlost_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(256)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_id", DbType:="VarChar(15)")>  _
	Public Property cable_id() As String
		Get
			Return Me._cable_id
		End Get
		Set
			If (String.Equals(Me._cable_id, value) = false) Then
				Me.Oncable_idChanging(value)
				Me.SendPropertyChanging
				Me._cable_id = value
				Me.SendPropertyChanged("cable_id")
				Me.Oncable_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_tension", DbType:="Int")>  _
	Public Property cable_tension() As System.Nullable(Of Integer)
		Get
			Return Me._cable_tension
		End Get
		Set
			If (Me._cable_tension.Equals(value) = false) Then
				Me.Oncable_tensionChanging(value)
				Me.SendPropertyChanging
				Me._cable_tension = value
				Me.SendPropertyChanged("cable_tension")
				Me.Oncable_tensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_cuts", DbType:="Int")>  _
	Public Property cable_cuts() As System.Nullable(Of Integer)
		Get
			Return Me._cable_cuts
		End Get
		Set
			If (Me._cable_cuts.Equals(value) = false) Then
				Me.Oncable_cutsChanging(value)
				Me.SendPropertyChanging
				Me._cable_cuts = value
				Me.SendPropertyChanged("cable_cuts")
				Me.Oncable_cutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list", CanBeNull:=false)>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me.Onservice_listChanging(value)
				Me.SendPropertyChanging
				Me._service_list = value
				Me.SendPropertyChanged("service_list")
				Me.Onservice_listChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_standby_time_hours", DbType:="real")>  _
	Public Property standby_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._standby_time_hours
		End Get
		Set
			If (Me._standby_time_hours.Equals(value) = false) Then
				Me.Onstandby_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._standby_time_hours = value
				Me.SendPropertyChanged("standby_time_hours")
				Me.Onstandby_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fishing_flag", DbType:="bit")>  _
	Public Property fishing_flag() As Boolean
		Get
			Return Me._fishing_flag
		End Get
		Set
			If ((Me._fishing_flag = value)  _
						= false) Then
				Me.Onfishing_flagChanging(value)
				Me.SendPropertyChanging
				Me._fishing_flag = value
				Me.SendPropertyChanged("fishing_flag")
				Me.Onfishing_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_temperature", DbType:="real")>  _
	Public Property temperature() As System.Nullable(Of Single)
		Get
			Return Me._temperature
		End Get
		Set
			If (Me._temperature.Equals(value) = false) Then
				Me.OntemperatureChanging(value)
				Me.SendPropertyChanging
				Me._temperature = value
				Me.SendPropertyChanged("temperature")
				Me.OntemperatureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pressure", DbType:="real")>  _
	Public Property pressure() As System.Nullable(Of Single)
		Get
			Return Me._pressure
		End Get
		Set
			If (Me._pressure.Equals(value) = false) Then
				Me.OnpressureChanging(value)
				Me.SendPropertyChanging
				Me._pressure = value
				Me.SendPropertyChanged("pressure")
				Me.OnpressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jarring_count", DbType:="int")>  _
	Public Property jarring_count() As System.Nullable(Of Integer)
		Get
			Return Me._jarring_count
		End Get
		Set
			If (Me._jarring_count.Equals(value) = false) Then
				Me.Onjarring_countChanging(value)
				Me.SendPropertyChanging
				Me._jarring_count = value
				Me.SendPropertyChanged("jarring_count")
				Me.Onjarring_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_type", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property service_type() As String
		Get
			Return Me._service_type
		End Get
		Set
			If (String.Equals(Me._service_type, value) = false) Then
				Me.Onservice_typeChanging(value)
				Me.SendPropertyChanging
				Me._service_type = value
				Me.SendPropertyChanged("service_type")
				Me.Onservice_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_corrected_lost_time_hours", DbType:="real")>  _
	Public Property corrected_lost_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._corrected_lost_time_hours
		End Get
		Set
			If (Me._corrected_lost_time_hours.Equals(value) = false) Then
				Me.Oncorrected_lost_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._corrected_lost_time_hours = value
				Me.SendPropertyChanged("corrected_lost_time_hours")
				Me.Oncorrected_lost_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_corrected_lost_time_reason", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property corrected_lost_time_reason() As String
		Get
			Return Me._corrected_lost_time_reason
		End Get
		Set
			If (String.Equals(Me._corrected_lost_time_reason, value) = false) Then
				Me.Oncorrected_lost_time_reasonChanging(value)
				Me.SendPropertyChanging
				Me._corrected_lost_time_reason = value
				Me.SendPropertyChanged("corrected_lost_time_reason")
				Me.Oncorrected_lost_time_reasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_asset")>  _
Partial Public Class disp_asset
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _asset_id As String
	
	Private _lost_time_hours As System.Nullable(Of Single)
	
	Private _down_hole_tool_flag As System.Nullable(Of Boolean)
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _over_pm_pt_thresh_approval_flag As System.Nullable(Of Boolean)
	
	Private _over_pm_pt_thresh_approver As String
	
	Private _pm1_approved_flag As System.Nullable(Of Boolean)
	
	Private _pm1_approved_by As String
	
	Private _verified_flag As System.Nullable(Of Boolean)
	
	Private _verified_by As String
	
	Private _average_drill_time As System.Nullable(Of Single)
	
	Private _average_core_length As System.Nullable(Of Single)
	
	Private _core_requests As System.Nullable(Of Integer)
	
	Private _core_attempts As System.Nullable(Of Integer)
	
	Private _cores_sold As System.Nullable(Of Integer)
	
	Private _row_number As System.Nullable(Of Integer)
	
	Private _series_id As String
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As Integer
	
	Private _status As String
	
	Private _maintenance_desc As String
	
	Private _tech_ident_no As String
	
	Private _pm_point_threshold_level As String
	
	Private _series_desc As String
	
	Private _asset_has_subassembly_flag As Boolean
	
	Private _fimp_incident_id As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onlost_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onlost_time_hoursChanged()
    End Sub
    Partial Private Sub Ondown_hole_tool_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Ondown_hole_tool_flagChanged()
    End Sub
    Partial Private Sub Onpm_pointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpm_pointsChanged()
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approval_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approval_flagChanged()
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approverChanging(value As String)
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approverChanged()
    End Sub
    Partial Private Sub Onpm1_approved_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onpm1_approved_flagChanged()
    End Sub
    Partial Private Sub Onpm1_approved_byChanging(value As String)
    End Sub
    Partial Private Sub Onpm1_approved_byChanged()
    End Sub
    Partial Private Sub Onverified_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onverified_flagChanged()
    End Sub
    Partial Private Sub Onverified_byChanging(value As String)
    End Sub
    Partial Private Sub Onverified_byChanged()
    End Sub
    Partial Private Sub Onaverage_drill_timeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaverage_drill_timeChanged()
    End Sub
    Partial Private Sub Onaverage_core_lengthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaverage_core_lengthChanged()
    End Sub
    Partial Private Sub Oncore_requestsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncore_requestsChanged()
    End Sub
    Partial Private Sub Oncore_attemptsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncore_attemptsChanged()
    End Sub
    Partial Private Sub Oncores_soldChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncores_soldChanged()
    End Sub
    Partial Private Sub Onrow_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrow_numberChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_idChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanged()
    End Sub
    Partial Private Sub Onavail_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onavail_idChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub Onmaintenance_descChanging(value As String)
    End Sub
    Partial Private Sub Onmaintenance_descChanged()
    End Sub
    Partial Private Sub Ontech_ident_noChanging(value As String)
    End Sub
    Partial Private Sub Ontech_ident_noChanged()
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanging(value As String)
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanged()
    End Sub
    Partial Private Sub Onseries_descChanging(value As String)
    End Sub
    Partial Private Sub Onseries_descChanged()
    End Sub
    Partial Private Sub Onasset_has_subassembly_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_has_subassembly_flagChanged()
    End Sub
    Partial Private Sub Onfimp_incident_idsChanging(value As String)
    End Sub
    Partial Private Sub Onfimp_incident_idsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_hours", DbType:="Real")>  _
	Public Property lost_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._lost_time_hours
		End Get
		Set
			If (Me._lost_time_hours.Equals(value) = false) Then
				Me.Onlost_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._lost_time_hours = value
				Me.SendPropertyChanged("lost_time_hours")
				Me.Onlost_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_down_hole_tool_flag", DbType:="Bit")>  _
	Public Property down_hole_tool_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._down_hole_tool_flag
		End Get
		Set
			If (Me._down_hole_tool_flag.Equals(value) = false) Then
				Me.Ondown_hole_tool_flagChanging(value)
				Me.SendPropertyChanging
				Me._down_hole_tool_flag = value
				Me.SendPropertyChanged("down_hole_tool_flag")
				Me.Ondown_hole_tool_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="Int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me.Onpm_pointsChanging(value)
				Me.SendPropertyChanging
				Me._pm_points = value
				Me.SendPropertyChanged("pm_points")
				Me.Onpm_pointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_over_pm_pt_thresh_approval_flag", DbType:="Bit")>  _
	Public Property over_pm_pt_thresh_approval_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._over_pm_pt_thresh_approval_flag
		End Get
		Set
			If (Me._over_pm_pt_thresh_approval_flag.Equals(value) = false) Then
				Me.Onover_pm_pt_thresh_approval_flagChanging(value)
				Me.SendPropertyChanging
				Me._over_pm_pt_thresh_approval_flag = value
				Me.SendPropertyChanged("over_pm_pt_thresh_approval_flag")
				Me.Onover_pm_pt_thresh_approval_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_over_pm_pt_thresh_approver", DbType:="VarChar(20)")>  _
	Public Property over_pm_pt_thresh_approver() As String
		Get
			Return Me._over_pm_pt_thresh_approver
		End Get
		Set
			If (String.Equals(Me._over_pm_pt_thresh_approver, value) = false) Then
				Me.Onover_pm_pt_thresh_approverChanging(value)
				Me.SendPropertyChanging
				Me._over_pm_pt_thresh_approver = value
				Me.SendPropertyChanged("over_pm_pt_thresh_approver")
				Me.Onover_pm_pt_thresh_approverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm1_approved_flag", DbType:="Bit")>  _
	Public Property pm1_approved_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._pm1_approved_flag
		End Get
		Set
			If (Me._pm1_approved_flag.Equals(value) = false) Then
				Me.Onpm1_approved_flagChanging(value)
				Me.SendPropertyChanging
				Me._pm1_approved_flag = value
				Me.SendPropertyChanged("pm1_approved_flag")
				Me.Onpm1_approved_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm1_approved_by", DbType:="VarChar(20)")>  _
	Public Property pm1_approved_by() As String
		Get
			Return Me._pm1_approved_by
		End Get
		Set
			If (String.Equals(Me._pm1_approved_by, value) = false) Then
				Me.Onpm1_approved_byChanging(value)
				Me.SendPropertyChanging
				Me._pm1_approved_by = value
				Me.SendPropertyChanged("pm1_approved_by")
				Me.Onpm1_approved_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_verified_flag", DbType:="Bit")>  _
	Public Property verified_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._verified_flag
		End Get
		Set
			If (Me._verified_flag.Equals(value) = false) Then
				Me.Onverified_flagChanging(value)
				Me.SendPropertyChanging
				Me._verified_flag = value
				Me.SendPropertyChanged("verified_flag")
				Me.Onverified_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_verified_by", DbType:="VarChar(20)")>  _
	Public Property verified_by() As String
		Get
			Return Me._verified_by
		End Get
		Set
			If (String.Equals(Me._verified_by, value) = false) Then
				Me.Onverified_byChanging(value)
				Me.SendPropertyChanging
				Me._verified_by = value
				Me.SendPropertyChanged("verified_by")
				Me.Onverified_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_average_drill_time", DbType:="Real")>  _
	Public Property average_drill_time() As System.Nullable(Of Single)
		Get
			Return Me._average_drill_time
		End Get
		Set
			If (Me._average_drill_time.Equals(value) = false) Then
				Me.Onaverage_drill_timeChanging(value)
				Me.SendPropertyChanging
				Me._average_drill_time = value
				Me.SendPropertyChanged("average_drill_time")
				Me.Onaverage_drill_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_average_core_length", DbType:="Real")>  _
	Public Property average_core_length() As System.Nullable(Of Single)
		Get
			Return Me._average_core_length
		End Get
		Set
			If (Me._average_core_length.Equals(value) = false) Then
				Me.Onaverage_core_lengthChanging(value)
				Me.SendPropertyChanging
				Me._average_core_length = value
				Me.SendPropertyChanged("average_core_length")
				Me.Onaverage_core_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_core_requests", DbType:="Int")>  _
	Public Property core_requests() As System.Nullable(Of Integer)
		Get
			Return Me._core_requests
		End Get
		Set
			If (Me._core_requests.Equals(value) = false) Then
				Me.Oncore_requestsChanging(value)
				Me.SendPropertyChanging
				Me._core_requests = value
				Me.SendPropertyChanged("core_requests")
				Me.Oncore_requestsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_core_attempts", DbType:="Int")>  _
	Public Property core_attempts() As System.Nullable(Of Integer)
		Get
			Return Me._core_attempts
		End Get
		Set
			If (Me._core_attempts.Equals(value) = false) Then
				Me.Oncore_attemptsChanging(value)
				Me.SendPropertyChanging
				Me._core_attempts = value
				Me.SendPropertyChanged("core_attempts")
				Me.Oncore_attemptsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cores_sold", DbType:="Int")>  _
	Public Property cores_sold() As System.Nullable(Of Integer)
		Get
			Return Me._cores_sold
		End Get
		Set
			If (Me._cores_sold.Equals(value) = false) Then
				Me.Oncores_soldChanging(value)
				Me.SendPropertyChanging
				Me._cores_sold = value
				Me.SendPropertyChanged("cores_sold")
				Me.Oncores_soldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int")>  _
	Public Property row_number() As System.Nullable(Of Integer)
		Get
			Return Me._row_number
		End Get
		Set
			If (Me._row_number.Equals(value) = false) Then
				Me.Onrow_numberChanging(value)
				Me.SendPropertyChanging
				Me._row_number = value
				Me.SendPropertyChanged("row_number")
				Me.Onrow_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me.Oncurrent_plant_idChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_id = value
				Me.SendPropertyChanged("current_plant_id")
				Me.Oncurrent_plant_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me.Oncurrent_plant_nameChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_name = value
				Me.SendPropertyChanged("current_plant_name")
				Me.Oncurrent_plant_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="int")>  _
	Public Property avail_id() As Integer
		Get
			Return Me._avail_id
		End Get
		Set
			If ((Me._avail_id = value)  _
						= false) Then
				Me.Onavail_idChanging(value)
				Me.SendPropertyChanging
				Me._avail_id = value
				Me.SendPropertyChanged("avail_id")
				Me.Onavail_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maintenance_desc", DbType:="varchar(1)", CanBeNull:=false)>  _
	Public Property maintenance_desc() As String
		Get
			Return Me._maintenance_desc
		End Get
		Set
			If (String.Equals(Me._maintenance_desc, value) = false) Then
				Me.Onmaintenance_descChanging(value)
				Me.SendPropertyChanging
				Me._maintenance_desc = value
				Me.SendPropertyChanged("maintenance_desc")
				Me.Onmaintenance_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tech_ident_no", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property tech_ident_no() As String
		Get
			Return Me._tech_ident_no
		End Get
		Set
			If (String.Equals(Me._tech_ident_no, value) = false) Then
				Me.Ontech_ident_noChanging(value)
				Me.SendPropertyChanging
				Me._tech_ident_no = value
				Me.SendPropertyChanged("tech_ident_no")
				Me.Ontech_ident_noChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me.Onpm_point_threshold_levelChanging(value)
				Me.SendPropertyChanging
				Me._pm_point_threshold_level = value
				Me.SendPropertyChanged("pm_point_threshold_level")
				Me.Onpm_point_threshold_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="varchar(100)", CanBeNull:=false)>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me.Onseries_descChanging(value)
				Me.SendPropertyChanging
				Me._series_desc = value
				Me.SendPropertyChanged("series_desc")
				Me.Onseries_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_has_subassembly_flag", DbType:="bit")>  _
	Public Property asset_has_subassembly_flag() As Boolean
		Get
			Return Me._asset_has_subassembly_flag
		End Get
		Set
			If ((Me._asset_has_subassembly_flag = value)  _
						= false) Then
				Me.Onasset_has_subassembly_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_has_subassembly_flag = value
				Me.SendPropertyChanged("asset_has_subassembly_flag")
				Me.Onasset_has_subassembly_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fimp_incident_id", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property fimp_incident_ids() As String
		Get
			Return Me._fimp_incident_id
		End Get
		Set
			If (String.Equals(Me._fimp_incident_id, value) = false) Then
				Me.Onfimp_incident_idsChanging(value)
				Me.SendPropertyChanging
				Me._fimp_incident_id = value
				Me.SendPropertyChanged("fimp_incident_ids")
				Me.Onfimp_incident_idsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_es_inuse_truck")>  _
Partial Public Class asset_crew_inuse
	
	Private _item_type As String
	
	Private _asset As String
	
	Private _asset_type As String
	
	Private _dispatch_id As String
	
	Private _latitude_longitude As String
	
	Private _dispatch_location As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_type", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property item_type() As String
		Get
			Return Me._item_type
		End Get
		Set
			If (String.Equals(Me._item_type, value) = false) Then
				Me._item_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset", DbType:="VarChar(50)")>  _
	Public Property asset() As String
		Get
			Return Me._asset
		End Get
		Set
			If (String.Equals(Me._asset, value) = false) Then
				Me._asset = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_type", DbType:="VarChar(30)")>  _
	Public Property asset_type() As String
		Get
			Return Me._asset_type
		End Get
		Set
			If (String.Equals(Me._asset_type, value) = false) Then
				Me._asset_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_id", DbType:="Varchar(10)", CanBeNull:=false)>  _
	Public Property dispatch_id() As String
		Get
			Return Me._dispatch_id
		End Get
		Set
			If (String.Equals(Me._dispatch_id, value) = false) Then
				Me._dispatch_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude_longitude", DbType:="VarChar(40)")>  _
	Public Property latitude_longitude() As String
		Get
			Return Me._latitude_longitude
		End Get
		Set
			If (String.Equals(Me._latitude_longitude, value) = false) Then
				Me._latitude_longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_location", DbType:="VarChar(200)")>  _
	Public Property dispatch_location() As String
		Get
			Return Me._dispatch_location
		End Get
		Set
			If (String.Equals(Me._dispatch_location, value) = false) Then
				Me._dispatch_location = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class v_dispatch_find_list_result
	
	Private _disp_id As Integer
	
	Private _status As Short
	
	Private _status_desc As String
	
	Private _oilcomp_id As String
	
	Private _oilcomp_name As String
	
	Private _rig As String
	
	Private _rig_name As String
	
	Private _well_name As String
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _dist_name As String
	
	Private _on_loc As System.Nullable(Of Date)
	
	Private _job_cmpl As System.Nullable(Of Date)
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _lat As System.Nullable(Of Decimal)
	
	Private _lon As System.Nullable(Of Decimal)
	
	Private _county_id As String
	
	Private _county_desc As String
	
	Private _truck As String
	
	Private _fso_list As String
	
	Private _dispatch_export_datetime As System.Nullable(Of Date)
	
	Private _dispatch_exported_by As String
	
	Private _rec_by As String
	
	Private _lsd As String
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Private _personnel_count As Integer
	
	Private _unexported_quote_count As Integer
	
	Private _psl As String
	
	Private _cable_1_id As String
	
	Private _services_requested_count As Integer
	
	Private _psl_display_id As String
	
	Private _country_code As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_desc", DbType:="Char(11)")>  _
	Public Property status_desc() As String
		Get
			Return Me._status_desc
		End Get
		Set
			If (String.Equals(Me._status_desc, value) = false) Then
				Me._status_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_name", DbType:="VarChar(80)")>  _
	Public Property oilcomp_name() As String
		Get
			Return Me._oilcomp_name
		End Get
		Set
			If (String.Equals(Me._oilcomp_name, value) = false) Then
				Me._oilcomp_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig", DbType:="VarChar(40)")>  _
	Public Property rig() As String
		Get
			Return Me._rig
		End Get
		Set
			If (String.Equals(Me._rig, value) = false) Then
				Me._rig = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_name", DbType:="VarChar(100)")>  _
	Public Property rig_name() As String
		Get
			Return Me._rig_name
		End Get
		Set
			If (String.Equals(Me._rig_name, value) = false) Then
				Me._rig_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(30)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_name", DbType:="Char(40)")>  _
	Public Property dist_name() As String
		Get
			Return Me._dist_name
		End Get
		Set
			If (String.Equals(Me._dist_name, value) = false) Then
				Me._dist_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_on_loc", DbType:="SmallDateTime")>  _
	Public Property crew_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._on_loc
		End Get
		Set
			If (Me._on_loc.Equals(value) = false) Then
				Me._on_loc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_cmpl", DbType:="SmallDateTime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._job_cmpl
		End Get
		Set
			If (Me._job_cmpl.Equals(value) = false) Then
				Me._job_cmpl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start", DbType:="SmallDateTime")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me._approx_start = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lat", DbType:="Decimal(10,8)")>  _
	Public Property lat() As System.Nullable(Of Decimal)
		Get
			Return Me._lat
		End Get
		Set
			If (Me._lat.Equals(value) = false) Then
				Me._lat = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lon", DbType:="Decimal(11,8)")>  _
	Public Property lon() As System.Nullable(Of Decimal)
		Get
			Return Me._lon
		End Get
		Set
			If (Me._lon.Equals(value) = false) Then
				Me._lon = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_id", DbType:="Char(5)")>  _
	Public Property county_id() As String
		Get
			Return Me._county_id
		End Get
		Set
			If (String.Equals(Me._county_id, value) = false) Then
				Me._county_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_desc", DbType:="VarChar(50)")>  _
	Public Property county_desc() As String
		Get
			Return Me._county_desc
		End Get
		Set
			If (String.Equals(Me._county_desc, value) = false) Then
				Me._county_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50)")>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me._truck = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_list", DbType:="VarChar(2000)")>  _
	Public Property fso_list() As String
		Get
			Return Me._fso_list
		End Get
		Set
			If (String.Equals(Me._fso_list, value) = false) Then
				Me._fso_list = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_export_datetime", DbType:="smalldatetime")>  _
	Public Property dispatch_export_datetime() As System.Nullable(Of Date)
		Get
			Return Me._dispatch_export_datetime
		End Get
		Set
			If (Me._dispatch_export_datetime.Equals(value) = false) Then
				Me._dispatch_export_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_exported_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property dispatch_exported_by() As String
		Get
			Return Me._dispatch_exported_by
		End Get
		Set
			If (String.Equals(Me._dispatch_exported_by, value) = false) Then
				Me._dispatch_exported_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_by", DbType:="char(10)", CanBeNull:=false)>  _
	Public Property rec_by() As String
		Get
			Return Me._rec_by
		End Get
		Set
			If (String.Equals(Me._rec_by, value) = false) Then
				Me._rec_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lsd", DbType:="varchar(30)")>  _
	Public Property lsd() As String
		Get
			Return Me._lsd
		End Get
		Set
			If (String.Equals(Me._lsd, value) = false) Then
				Me._lsd = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="smalldatetime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me._locked_for_edit_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="varchar(20)")>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me._locked_for_edit_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_personnel_count", DbType:="int")>  _
	Public Property personnel_count() As Integer
		Get
			Return Me._personnel_count
		End Get
		Set
			If ((Me._personnel_count = value)  _
						= false) Then
				Me._personnel_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unexported_quote_count", DbType:="int")>  _
	Public Property unexported_quote_count() As Integer
		Get
			Return Me._unexported_quote_count
		End Get
		Set
			If ((Me._unexported_quote_count = value)  _
						= false) Then
				Me._unexported_quote_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="char(2)", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_id", DbType:="varchar(15)")>  _
	Public Property cable_1_id() As String
		Get
			Return Me._cable_1_id
		End Get
		Set
			If (String.Equals(Me._cable_1_id, value) = false) Then
				Me._cable_1_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_services_requested_count", DbType:="int")>  _
	Public Property services_requested_count() As Integer
		Get
			Return Me._services_requested_count
		End Get
		Set
			If ((Me._services_requested_count = value)  _
						= false) Then
				Me._services_requested_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_display_id", CanBeNull:=false)>  _
	Public Property psl_display_id() As String
		Get
			Return Me._psl_display_id
		End Get
		Set
			If (String.Equals(Me._psl_display_id, value) = false) Then
				Me._psl_display_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", CanBeNull:=false)>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me._country_code = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class v_quote_find_list_result
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _quote_number As String
	
	Private _created_datetime As Date
	
	Private _created_by As String
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _price_schedule_id As String
	
	Private _header_comment As String
	
	Private _print_quote_flag As Boolean
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _exported_to_sap_flag As System.Nullable(Of Boolean)
	
	Private _currency As String
	
	Private _master_contract_inactive_flag As System.Nullable(Of Boolean)
	
	Private _contract_type As String
	
	Private _oilcomp_id As String
	
	Private _exchange_rate As System.Nullable(Of Decimal)
	
	Private _access_level As String
	
	Private _selected_flag As Boolean
	
	Private _main_quote_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onquote_numberChanging(value As String)
    End Sub
    Partial Private Sub Onquote_numberChanged()
    End Sub
    Partial Private Sub Oncreated_datetimeChanging(value As Date)
    End Sub
    Partial Private Sub Oncreated_datetimeChanged()
    End Sub
    Partial Private Sub Oncreated_byChanging(value As String)
    End Sub
    Partial Private Sub Oncreated_byChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onprice_schedule_idChanging(value As String)
    End Sub
    Partial Private Sub Onprice_schedule_idChanged()
    End Sub
    Partial Private Sub Onheader_commentChanging(value As String)
    End Sub
    Partial Private Sub Onheader_commentChanged()
    End Sub
    Partial Private Sub Onprint_quote_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onprint_quote_flagChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub Onexported_to_sap_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onexported_to_sap_flagChanged()
    End Sub
    Partial Private Sub OncurrencyChanging(value As String)
    End Sub
    Partial Private Sub OncurrencyChanged()
    End Sub
    Partial Private Sub Oncontract_inactive_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncontract_inactive_flagChanged()
    End Sub
    Partial Private Sub Oncontract_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncontract_typeChanged()
    End Sub
    Partial Private Sub Onoilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onoilcomp_idChanged()
    End Sub
    Partial Private Sub Onexchange_rateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onexchange_rateChanged()
    End Sub
    Partial Private Sub Onaccess_levelChanging(value As String)
    End Sub
    Partial Private Sub Onaccess_levelChanged()
    End Sub
    Partial Private Sub Onselected_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onselected_flagChanged()
    End Sub
    Partial Private Sub Onmain_quote_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onmain_quote_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property quote_number() As String
		Get
			Return Me._quote_number
		End Get
		Set
			If (String.Equals(Me._quote_number, value) = false) Then
				Me.Onquote_numberChanging(value)
				Me.SendPropertyChanging
				Me._quote_number = value
				Me.SendPropertyChanged("quote_number")
				Me.Onquote_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_datetime", DbType:="smalldatetime")>  _
	Public Property created_datetime() As Date
		Get
			Return Me._created_datetime
		End Get
		Set
			If ((Me._created_datetime = value)  _
						= false) Then
				Me.Oncreated_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._created_datetime = value
				Me.SendPropertyChanged("created_datetime")
				Me.Oncreated_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property created_by() As String
		Get
			Return Me._created_by
		End Get
		Set
			If (String.Equals(Me._created_by, value) = false) Then
				Me.Oncreated_byChanging(value)
				Me.SendPropertyChanging
				Me._created_by = value
				Me.SendPropertyChanged("created_by")
				Me.Oncreated_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_schedule_id", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property price_schedule_id() As String
		Get
			Return Me._price_schedule_id
		End Get
		Set
			If (String.Equals(Me._price_schedule_id, value) = false) Then
				Me.Onprice_schedule_idChanging(value)
				Me.SendPropertyChanging
				Me._price_schedule_id = value
				Me.SendPropertyChanged("price_schedule_id")
				Me.Onprice_schedule_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_header_comment", DbType:="varchar(100)", CanBeNull:=false)>  _
	Public Property header_comment() As String
		Get
			Return Me._header_comment
		End Get
		Set
			If (String.Equals(Me._header_comment, value) = false) Then
				Me.Onheader_commentChanging(value)
				Me.SendPropertyChanging
				Me._header_comment = value
				Me.SendPropertyChanged("header_comment")
				Me.Onheader_commentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_print_quote_flag")>  _
	Public Property print_quote_flag() As Boolean
		Get
			Return Me._print_quote_flag
		End Get
		Set
			If ((Me._print_quote_flag = value)  _
						= false) Then
				Me.Onprint_quote_flagChanging(value)
				Me.SendPropertyChanging
				Me._print_quote_flag = value
				Me.SendPropertyChanged("print_quote_flag")
				Me.Onprint_quote_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_to_sap_flag", DbType:="bit")>  _
	Public Property exported_to_sap_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._exported_to_sap_flag
		End Get
		Set
			If (Me._exported_to_sap_flag.Equals(value) = false) Then
				Me.Onexported_to_sap_flagChanging(value)
				Me.SendPropertyChanging
				Me._exported_to_sap_flag = value
				Me.SendPropertyChanged("exported_to_sap_flag")
				Me.Onexported_to_sap_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency", CanBeNull:=false)>  _
	Public Property currency() As String
		Get
			Return Me._currency
		End Get
		Set
			If (String.Equals(Me._currency, value) = false) Then
				Me.OncurrencyChanging(value)
				Me.SendPropertyChanging
				Me._currency = value
				Me.SendPropertyChanged("currency")
				Me.OncurrencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_master_contract_inactive_flag", DbType:="bit")>  _
	Public Property contract_inactive_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._master_contract_inactive_flag
		End Get
		Set
			If (Me._master_contract_inactive_flag.Equals(value) = false) Then
				Me.Oncontract_inactive_flagChanging(value)
				Me.SendPropertyChanging
				Me._master_contract_inactive_flag = value
				Me.SendPropertyChanged("contract_inactive_flag")
				Me.Oncontract_inactive_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_type", DbType:="char(1)", CanBeNull:=false)>  _
	Public Property contract_type() As String
		Get
			Return Me._contract_type
		End Get
		Set
			If (String.Equals(Me._contract_type, value) = false) Then
				Me.Oncontract_typeChanging(value)
				Me.SendPropertyChanging
				Me._contract_type = value
				Me.SendPropertyChanged("contract_type")
				Me.Oncontract_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", CanBeNull:=false)>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me.Onoilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._oilcomp_id = value
				Me.SendPropertyChanged("oilcomp_id")
				Me.Onoilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exchange_rate")>  _
	Public Property exchange_rate() As System.Nullable(Of Decimal)
		Get
			Return Me._exchange_rate
		End Get
		Set
			If (Me._exchange_rate.Equals(value) = false) Then
				Me.Onexchange_rateChanging(value)
				Me.SendPropertyChanging
				Me._exchange_rate = value
				Me.SendPropertyChanged("exchange_rate")
				Me.Onexchange_rateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_access_level", CanBeNull:=false)>  _
	Public Property access_level() As String
		Get
			Return Me._access_level
		End Get
		Set
			If (String.Equals(Me._access_level, value) = false) Then
				Me.Onaccess_levelChanging(value)
				Me.SendPropertyChanging
				Me._access_level = value
				Me.SendPropertyChanged("access_level")
				Me.Onaccess_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected_flag", DbType:="bit")>  _
	Public Property selected_flag() As Boolean
		Get
			Return Me._selected_flag
		End Get
		Set
			If ((Me._selected_flag = value)  _
						= false) Then
				Me.Onselected_flagChanging(value)
				Me.SendPropertyChanging
				Me._selected_flag = value
				Me.SendPropertyChanged("selected_flag")
				Me.Onselected_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_main_quote_flag", DbType:="bit")>  _
	Public Property main_quote_flag() As Boolean
		Get
			Return Me._main_quote_flag
		End Get
		Set
			If ((Me._main_quote_flag = value)  _
						= false) Then
				Me.Onmain_quote_flagChanging(value)
				Me.SendPropertyChanging
				Me._main_quote_flag = value
				Me.SendPropertyChanged("main_quote_flag")
				Me.Onmain_quote_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_doc")>  _
Partial Public Class disp_doc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _original_file_path As String
	
	Private _icon_description As String
	
	Private _update_user_id As String
	
	Private _update_time As System.Nullable(Of Date)
	
	Private _attach_email_flag As Boolean
	
	Private _file_size As System.Nullable(Of Single)
	
	Private _document_type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onoriginal_file_pathChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_file_pathChanged()
    End Sub
    Partial Private Sub Onicon_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Onicon_descriptionChanged()
    End Sub
    Partial Private Sub Onupdate_user_idChanging(value As String)
    End Sub
    Partial Private Sub Onupdate_user_idChanged()
    End Sub
    Partial Private Sub Onupdate_timeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onupdate_timeChanged()
    End Sub
    Partial Private Sub Onattach_email_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onattach_email_flagChanged()
    End Sub
    Partial Private Sub Onfile_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfile_sizeChanged()
    End Sub
    Partial Private Sub Ondocument_typeChanging(value As String)
    End Sub
    Partial Private Sub Ondocument_typeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_file_path", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property original_file_path() As String
		Get
			Return Me._original_file_path
		End Get
		Set
			If (String.Equals(Me._original_file_path, value) = false) Then
				Me.Onoriginal_file_pathChanging(value)
				Me.SendPropertyChanging
				Me._original_file_path = value
				Me.SendPropertyChanged("original_file_path")
				Me.Onoriginal_file_pathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon_description", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property icon_description() As String
		Get
			Return Me._icon_description
		End Get
		Set
			If (String.Equals(Me._icon_description, value) = false) Then
				Me.Onicon_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._icon_description = value
				Me.SendPropertyChanged("icon_description")
				Me.Onicon_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_user_id", DbType:="VarChar(30)")>  _
	Public Property update_user_id() As String
		Get
			Return Me._update_user_id
		End Get
		Set
			If (String.Equals(Me._update_user_id, value) = false) Then
				Me.Onupdate_user_idChanging(value)
				Me.SendPropertyChanging
				Me._update_user_id = value
				Me.SendPropertyChanged("update_user_id")
				Me.Onupdate_user_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_time", DbType:="DateTime")>  _
	Public Property update_time() As System.Nullable(Of Date)
		Get
			Return Me._update_time
		End Get
		Set
			If (Me._update_time.Equals(value) = false) Then
				Me.Onupdate_timeChanging(value)
				Me.SendPropertyChanging
				Me._update_time = value
				Me.SendPropertyChanged("update_time")
				Me.Onupdate_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attach_email_flag", DbType:="Bit NOT NULL")>  _
	Public Property attach_email_flag() As Boolean
		Get
			Return Me._attach_email_flag
		End Get
		Set
			If ((Me._attach_email_flag = value)  _
						= false) Then
				Me.Onattach_email_flagChanging(value)
				Me.SendPropertyChanging
				Me._attach_email_flag = value
				Me.SendPropertyChanged("attach_email_flag")
				Me.Onattach_email_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_size", DbType:="Real")>  _
	Public Property file_size() As System.Nullable(Of Single)
		Get
			Return Me._file_size
		End Get
		Set
			If (Me._file_size.Equals(value) = false) Then
				Me.Onfile_sizeChanging(value)
				Me.SendPropertyChanging
				Me._file_size = value
				Me.SendPropertyChanged("file_size")
				Me.Onfile_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type", DbType:="varchar(50)")>  _
	Public Property document_type() As String
		Get
			Return Me._document_type
		End Get
		Set
			If (String.Equals(Me._document_type, value) = false) Then
				Me.Ondocument_typeChanging(value)
				Me.SendPropertyChanging
				Me._document_type = value
				Me.SendPropertyChanged("document_type")
				Me.Ondocument_typeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_hist_esdisp_pjb")>  _
Partial Public Class v_hist_disp_pjb
	
	Private _update_user As String
	
	Private _update_time As Date
	
	Private _disp_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_user", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property update_user() As String
		Get
			Return Me._update_user
		End Get
		Set
			If (String.Equals(Me._update_user, value) = false) Then
				Me._update_user = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_time", DbType:="DateTime NOT NULL")>  _
	Public Property update_time() As Date
		Get
			Return Me._update_time
		End Get
		Set
			If ((Me._update_time = value)  _
						= false) Then
				Me._update_time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_pjb")>  _
Partial Public Class disp_pjb
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _template_id As Integer
	
	Private _comment As String
	
	Private _created_datetime As System.Nullable(Of Date)
	
	Private _created_by As String
	
	Private _last_updated_datetime As System.Nullable(Of Date)
	
	Private _last_updated_by As String
	
	Private _complexity_types As String
	
	Private _referenced_disp_id As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Ontemplate_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontemplate_idChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Oncreated_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreated_datetimeChanged()
    End Sub
    Partial Private Sub Oncreated_byChanging(value As String)
    End Sub
    Partial Private Sub Oncreated_byChanged()
    End Sub
    Partial Private Sub Onlast_updated_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_updated_datetimeChanged()
    End Sub
    Partial Private Sub Onlast_updated_byChanging(value As String)
    End Sub
    Partial Private Sub Onlast_updated_byChanged()
    End Sub
    Partial Private Sub Oncomplexity_typesChanging(value As String)
    End Sub
    Partial Private Sub Oncomplexity_typesChanged()
    End Sub
    Partial Private Sub Onreferenced_disp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onreferenced_disp_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_id", DbType:="Int NOT NULL")>  _
	Public Property template_id() As Integer
		Get
			Return Me._template_id
		End Get
		Set
			If ((Me._template_id = value)  _
						= false) Then
				Me.Ontemplate_idChanging(value)
				Me.SendPropertyChanging
				Me._template_id = value
				Me.SendPropertyChanged("template_id")
				Me.Ontemplate_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(500)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_datetime", DbType:="SmallDateTime")>  _
	Public Property created_datetime() As System.Nullable(Of Date)
		Get
			Return Me._created_datetime
		End Get
		Set
			If (Me._created_datetime.Equals(value) = false) Then
				Me.Oncreated_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._created_datetime = value
				Me.SendPropertyChanged("created_datetime")
				Me.Oncreated_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_by", DbType:="VarChar(20)")>  _
	Public Property created_by() As String
		Get
			Return Me._created_by
		End Get
		Set
			If (String.Equals(Me._created_by, value) = false) Then
				Me.Oncreated_byChanging(value)
				Me.SendPropertyChanging
				Me._created_by = value
				Me.SendPropertyChanged("created_by")
				Me.Oncreated_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_updated_datetime", DbType:="SmallDateTime")>  _
	Public Property last_updated_datetime() As System.Nullable(Of Date)
		Get
			Return Me._last_updated_datetime
		End Get
		Set
			If (Me._last_updated_datetime.Equals(value) = false) Then
				Me.Onlast_updated_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._last_updated_datetime = value
				Me.SendPropertyChanged("last_updated_datetime")
				Me.Onlast_updated_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_updated_by", DbType:="VarChar(20)")>  _
	Public Property last_updated_by() As String
		Get
			Return Me._last_updated_by
		End Get
		Set
			If (String.Equals(Me._last_updated_by, value) = false) Then
				Me.Onlast_updated_byChanging(value)
				Me.SendPropertyChanging
				Me._last_updated_by = value
				Me.SendPropertyChanged("last_updated_by")
				Me.Onlast_updated_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_complexity_types", DbType:="varchar(100)", CanBeNull:=false)>  _
	Public Property complexity_types() As String
		Get
			Return Me._complexity_types
		End Get
		Set
			If (String.Equals(Me._complexity_types, value) = false) Then
				Me.Oncomplexity_typesChanging(value)
				Me.SendPropertyChanging
				Me._complexity_types = value
				Me.SendPropertyChanged("complexity_types")
				Me.Oncomplexity_typesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referenced_disp_id", DbType:="int")>  _
	Public Property referenced_disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._referenced_disp_id
		End Get
		Set
			If (Me._referenced_disp_id.Equals(value) = false) Then
				Me.Onreferenced_disp_idChanging(value)
				Me.SendPropertyChanging
				Me._referenced_disp_id = value
				Me.SendPropertyChanged("referenced_disp_id")
				Me.Onreferenced_disp_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_pjb_response")>  _
Partial Public Class disp_pjb_response
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _response_id As Integer
	
	Private _disp_id As Integer
	
	Private _question_id As Integer
	
	Private _response_data As String
	
	Private _response_details As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onresponse_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onresponse_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onquestion_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onquestion_idChanged()
    End Sub
    Partial Private Sub Onresponse_dataChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_dataChanged()
    End Sub
    Partial Private Sub Onresponse_detailsChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_detailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property response_id() As Integer
		Get
			Return Me._response_id
		End Get
		Set
			If ((Me._response_id = value)  _
						= false) Then
				Me.Onresponse_idChanging(value)
				Me.SendPropertyChanging
				Me._response_id = value
				Me.SendPropertyChanged("response_id")
				Me.Onresponse_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question_id", DbType:="Int NOT NULL")>  _
	Public Property question_id() As Integer
		Get
			Return Me._question_id
		End Get
		Set
			If ((Me._question_id = value)  _
						= false) Then
				Me.Onquestion_idChanging(value)
				Me.SendPropertyChanging
				Me._question_id = value
				Me.SendPropertyChanged("question_id")
				Me.Onquestion_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_data", DbType:="VarChar(2000)")>  _
	Public Property response_data() As String
		Get
			Return Me._response_data
		End Get
		Set
			If (String.Equals(Me._response_data, value) = false) Then
				Me.Onresponse_dataChanging(value)
				Me.SendPropertyChanging
				Me._response_data = value
				Me.SendPropertyChanged("response_data")
				Me.Onresponse_dataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_details", DbType:="VarChar(50)")>  _
	Public Property response_details() As String
		Get
			Return Me._response_details
		End Get
		Set
			If (String.Equals(Me._response_details, value) = false) Then
				Me.Onresponse_detailsChanging(value)
				Me.SendPropertyChanging
				Me._response_details = value
				Me.SendPropertyChanged("response_details")
				Me.Onresponse_detailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_lqa")>  _
Partial Public Class disp_lqa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _lqa_type_id As Integer
	
	Private _engineer As String
	
	Private _engineer_update_datetime As System.Nullable(Of Date)
	
	Private _original_reviewer As String
	
	Private _original_review_datetime As System.Nullable(Of Date)
	
	Private _last_reviewer As String
	
	Private _last_review_datetime As System.Nullable(Of Date)
	
	Private _comment As String
	
	Private _is_new_record As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onlqa_type_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onlqa_type_idChanged()
    End Sub
    Partial Private Sub OnengineerChanging(value As String)
    End Sub
    Partial Private Sub OnengineerChanged()
    End Sub
    Partial Private Sub Onengineer_update_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onengineer_update_datetimeChanged()
    End Sub
    Partial Private Sub Onoriginal_reviewerChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_reviewerChanged()
    End Sub
    Partial Private Sub Onoriginal_review_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onoriginal_review_datetimeChanged()
    End Sub
    Partial Private Sub Onlast_reviewerChanging(value As String)
    End Sub
    Partial Private Sub Onlast_reviewerChanged()
    End Sub
    Partial Private Sub Onlast_review_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_review_datetimeChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Onis_new_recordChanging(value As Boolean)
    End Sub
    Partial Private Sub Onis_new_recordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_type_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lqa_type_id() As Integer
		Get
			Return Me._lqa_type_id
		End Get
		Set
			If ((Me._lqa_type_id = value)  _
						= false) Then
				Me.Onlqa_type_idChanging(value)
				Me.SendPropertyChanging
				Me._lqa_type_id = value
				Me.SendPropertyChanged("lqa_type_id")
				Me.Onlqa_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_engineer", DbType:="VarChar(30)")>  _
	Public Property engineer() As String
		Get
			Return Me._engineer
		End Get
		Set
			If (String.Equals(Me._engineer, value) = false) Then
				Me.OnengineerChanging(value)
				Me.SendPropertyChanging
				Me._engineer = value
				Me.SendPropertyChanged("engineer")
				Me.OnengineerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_engineer_update_datetime", DbType:="SmallDateTime")>  _
	Public Property engineer_update_datetime() As System.Nullable(Of Date)
		Get
			Return Me._engineer_update_datetime
		End Get
		Set
			If (Me._engineer_update_datetime.Equals(value) = false) Then
				Me.Onengineer_update_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._engineer_update_datetime = value
				Me.SendPropertyChanged("engineer_update_datetime")
				Me.Onengineer_update_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_reviewer", DbType:="VarChar(30)")>  _
	Public Property original_reviewer() As String
		Get
			Return Me._original_reviewer
		End Get
		Set
			If (String.Equals(Me._original_reviewer, value) = false) Then
				Me.Onoriginal_reviewerChanging(value)
				Me.SendPropertyChanging
				Me._original_reviewer = value
				Me.SendPropertyChanged("original_reviewer")
				Me.Onoriginal_reviewerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_review_datetime", DbType:="SmallDateTime")>  _
	Public Property original_review_datetime() As System.Nullable(Of Date)
		Get
			Return Me._original_review_datetime
		End Get
		Set
			If (Me._original_review_datetime.Equals(value) = false) Then
				Me.Onoriginal_review_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._original_review_datetime = value
				Me.SendPropertyChanged("original_review_datetime")
				Me.Onoriginal_review_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_reviewer", DbType:="VarChar(30)")>  _
	Public Property last_reviewer() As String
		Get
			Return Me._last_reviewer
		End Get
		Set
			If (String.Equals(Me._last_reviewer, value) = false) Then
				Me.Onlast_reviewerChanging(value)
				Me.SendPropertyChanging
				Me._last_reviewer = value
				Me.SendPropertyChanged("last_reviewer")
				Me.Onlast_reviewerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_review_datetime", DbType:="SmallDateTime")>  _
	Public Property last_review_datetime() As System.Nullable(Of Date)
		Get
			Return Me._last_review_datetime
		End Get
		Set
			If (Me._last_review_datetime.Equals(value) = false) Then
				Me.Onlast_review_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._last_review_datetime = value
				Me.SendPropertyChanged("last_review_datetime")
				Me.Onlast_review_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(500)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_new_record")>  _
	Public Property is_new_record() As Boolean
		Get
			Return Me._is_new_record
		End Get
		Set
			If ((Me._is_new_record = value)  _
						= false) Then
				Me.Onis_new_recordChanging(value)
				Me.SendPropertyChanging
				Me._is_new_record = value
				Me.SendPropertyChanged("is_new_record")
				Me.Onis_new_recordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_lqa_item")>  _
Partial Public Class disp_lqa_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _service_id As String
	
	Private _lqa_question_rec_id As Integer
	
	Private _engineer_response_flag As Boolean
	
	Private _reviewer_response_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onservice_idChanging(value As String)
    End Sub
    Partial Private Sub Onservice_idChanged()
    End Sub
    Partial Private Sub Onlqa_question_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onlqa_question_rec_idChanged()
    End Sub
    Partial Private Sub Onengineer_response_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onengineer_response_flagChanged()
    End Sub
    Partial Private Sub Onreviewer_response_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onreviewer_response_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property service_id() As String
		Get
			Return Me._service_id
		End Get
		Set
			If (String.Equals(Me._service_id, value) = false) Then
				Me.Onservice_idChanging(value)
				Me.SendPropertyChanging
				Me._service_id = value
				Me.SendPropertyChanged("service_id")
				Me.Onservice_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_question_rec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lqa_question_rec_id() As Integer
		Get
			Return Me._lqa_question_rec_id
		End Get
		Set
			If ((Me._lqa_question_rec_id = value)  _
						= false) Then
				Me.Onlqa_question_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._lqa_question_rec_id = value
				Me.SendPropertyChanged("lqa_question_rec_id")
				Me.Onlqa_question_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_engineer_response_flag", DbType:="Bit NOT NULL")>  _
	Public Property engineer_response_flag() As Boolean
		Get
			Return Me._engineer_response_flag
		End Get
		Set
			If ((Me._engineer_response_flag = value)  _
						= false) Then
				Me.Onengineer_response_flagChanging(value)
				Me.SendPropertyChanging
				Me._engineer_response_flag = value
				Me.SendPropertyChanged("engineer_response_flag")
				Me.Onengineer_response_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reviewer_response_flag", DbType:="Bit NOT NULL")>  _
	Public Property reviewer_response_flag() As Boolean
		Get
			Return Me._reviewer_response_flag
		End Get
		Set
			If ((Me._reviewer_response_flag = value)  _
						= false) Then
				Me.Onreviewer_response_flagChanging(value)
				Me.SendPropertyChanging
				Me._reviewer_response_flag = value
				Me.SendPropertyChanged("reviewer_response_flag")
				Me.Onreviewer_response_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_fso")>  _
Partial Public Class disp_fso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _field_ticket_number As String
	
	Private _price_schedule_id As String
	
	Private _discount As System.Nullable(Of Decimal)
	
	Private _net_amount As System.Nullable(Of Decimal)
	
	Private _header_comment As String
	
	Private _comment As String
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Private _quote_linked_to_fso_rec_id As System.Nullable(Of Integer)
	
	Private _depth_charge_default_quantity As System.Nullable(Of Integer)
	
	Private _logging_charge_default_quantity As System.Nullable(Of Integer)
	
	Private _operation_charge_default_quantity As System.Nullable(Of Integer)
	
	Private _oilcomp_id As String
	
	Private _sold_to_id As System.Nullable(Of Integer)
	
	Private _quote_version_number As System.Nullable(Of Integer)
	
	Private _exported_to_sap_flag As System.Nullable(Of Boolean)
	
	Private _sap_export_id As String
	
	Private _sap_sales_document_number As String
	
	Private _pressure As System.Nullable(Of Single)
	
	Private _temperature As System.Nullable(Of Single)
	
	Private _area As String
	
	Private _purchase_order_number As String
	
	Private _sold_to_address_rec_id As System.Nullable(Of Integer)
	
	Private _multi_psl_export_flag As System.Nullable(Of Boolean)
	
	Private _data_read_datetime As System.Nullable(Of Date)
	
	Private _dispatch_export_datetime As System.Nullable(Of Date)
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _fso_invoiced_flag As System.Nullable(Of Boolean)
	
	Private _fso_type_id As String
	
	Private _disp_completed As System.Nullable(Of Boolean)
	
	Private _fso_in_finance_mode_flag As System.Nullable(Of Boolean)
	
	Private _geoscience_fso_flag As Boolean
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _sap_sales_order_number As String
	
	Private _service_order_rec_id As System.Nullable(Of Integer)
	
	Private _currency As String
	
	Private _uplift As System.Nullable(Of Decimal)
	
	Private _unit As String
	
	Private _uploaded_to_server_flag As Boolean
	
	Private _custom_field1 As String
	
	Private _custom_value1 As String
	
	Private _custom_field2 As String
	
	Private _custom_value2 As String
	
	Private _exchange_rate As System.Nullable(Of Decimal)
	
	Private _contract_type As String
	
	Private _linked_to_contract_rec_id As System.Nullable(Of Integer)
	
	Private _linked_to_contract_number As String
	
	Private _access_level As String
	
	Private _created_by As String
	
	Private _created_datetime As System.Nullable(Of Date)
	
	Private _main_quote_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onfield_ticket_numberChanging(value As String)
    End Sub
    Partial Private Sub Onfield_ticket_numberChanged()
    End Sub
    Partial Private Sub Onprice_schedule_idChanging(value As String)
    End Sub
    Partial Private Sub Onprice_schedule_idChanged()
    End Sub
    Partial Private Sub OndiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OndiscountChanged()
    End Sub
    Partial Private Sub Onnet_amountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onnet_amountChanged()
    End Sub
    Partial Private Sub Onheader_commentChanging(value As String)
    End Sub
    Partial Private Sub Onheader_commentChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanging(value As String)
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanged()
    End Sub
    Partial Private Sub Onquote_linked_to_fso_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onquote_linked_to_fso_rec_idChanged()
    End Sub
    Partial Private Sub Ondepth_charge_default_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondepth_charge_default_quantityChanged()
    End Sub
    Partial Private Sub Onlogging_charge_default_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onlogging_charge_default_quantityChanged()
    End Sub
    Partial Private Sub Onoperation_charge_default_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onoperation_charge_default_quantityChanged()
    End Sub
    Partial Private Sub Onoilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onoilcomp_idChanged()
    End Sub
    Partial Private Sub Onsold_to_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_idChanged()
    End Sub
    Partial Private Sub Onquote_version_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onquote_version_numberChanged()
    End Sub
    Partial Private Sub Onexported_to_sap_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onexported_to_sap_flagChanged()
    End Sub
    Partial Private Sub Onsap_export_idChanging(value As String)
    End Sub
    Partial Private Sub Onsap_export_idChanged()
    End Sub
    Partial Private Sub Onsap_sales_document_numberChanging(value As String)
    End Sub
    Partial Private Sub Onsap_sales_document_numberChanged()
    End Sub
    Partial Private Sub OnpressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnpressureChanged()
    End Sub
    Partial Private Sub OntemperatureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OntemperatureChanged()
    End Sub
    Partial Private Sub OnareaChanging(value As String)
    End Sub
    Partial Private Sub OnareaChanged()
    End Sub
    Partial Private Sub Onpurchase_order_numberChanging(value As String)
    End Sub
    Partial Private Sub Onpurchase_order_numberChanged()
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanged()
    End Sub
    Partial Private Sub Onmulti_psl_export_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onmulti_psl_export_flagChanged()
    End Sub
    Partial Private Sub Ondata_read_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondata_read_datetimeChanged()
    End Sub
    Partial Private Sub Ondispatch_export_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondispatch_export_datetimeChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub Onfso_invoiced_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfso_invoiced_flagChanged()
    End Sub
    Partial Private Sub Onfso_type_idChanging(value As String)
    End Sub
    Partial Private Sub Onfso_type_idChanged()
    End Sub
    Partial Private Sub Ondisp_completedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Ondisp_completedChanged()
    End Sub
    Partial Private Sub Onfso_in_finance_mode_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfso_in_finance_mode_flagChanged()
    End Sub
    Partial Private Sub Ongeoscience_fso_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ongeoscience_fso_flagChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onsap_sales_order_numberChanging(value As String)
    End Sub
    Partial Private Sub Onsap_sales_order_numberChanged()
    End Sub
    Partial Private Sub Onservice_order_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onservice_order_rec_idChanged()
    End Sub
    Partial Private Sub OncurrencyChanging(value As String)
    End Sub
    Partial Private Sub OncurrencyChanged()
    End Sub
    Partial Private Sub OnupliftChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnupliftChanged()
    End Sub
    Partial Private Sub OnunitChanging(value As String)
    End Sub
    Partial Private Sub OnunitChanged()
    End Sub
    Partial Private Sub Onuploaded_to_server_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onuploaded_to_server_flagChanged()
    End Sub
    Partial Private Sub Oncustom_field1Changing(value As String)
    End Sub
    Partial Private Sub Oncustom_field1Changed()
    End Sub
    Partial Private Sub Oncustom_value1Changing(value As String)
    End Sub
    Partial Private Sub Oncustom_value1Changed()
    End Sub
    Partial Private Sub Oncustom_field2Changing(value As String)
    End Sub
    Partial Private Sub Oncustom_field2Changed()
    End Sub
    Partial Private Sub Oncustom_value2Changing(value As String)
    End Sub
    Partial Private Sub Oncustom_value2Changed()
    End Sub
    Partial Private Sub Onexchange_rateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onexchange_rateChanged()
    End Sub
    Partial Private Sub Oncontract_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncontract_typeChanged()
    End Sub
    Partial Private Sub Onlinked_to_contract_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onlinked_to_contract_rec_idChanged()
    End Sub
    Partial Private Sub Onlinked_to_contract_numberChanging(value As String)
    End Sub
    Partial Private Sub Onlinked_to_contract_numberChanged()
    End Sub
    Partial Private Sub Onaccess_levelChanging(value As String)
    End Sub
    Partial Private Sub Onaccess_levelChanged()
    End Sub
    Partial Private Sub Oncreated_byChanging(value As String)
    End Sub
    Partial Private Sub Oncreated_byChanged()
    End Sub
    Partial Private Sub Oncreated_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreated_datetimeChanged()
    End Sub
    Partial Private Sub Onmain_quote_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onmain_quote_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_ticket_number", DbType:="VarChar(40)")>  _
	Public Property field_ticket_number() As String
		Get
			Return Me._field_ticket_number
		End Get
		Set
			If (String.Equals(Me._field_ticket_number, value) = false) Then
				Me.Onfield_ticket_numberChanging(value)
				Me.SendPropertyChanging
				Me._field_ticket_number = value
				Me.SendPropertyChanged("field_ticket_number")
				Me.Onfield_ticket_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_schedule_id", DbType:="VarChar(10)")>  _
	Public Property price_schedule_id() As String
		Get
			Return Me._price_schedule_id
		End Get
		Set
			If (String.Equals(Me._price_schedule_id, value) = false) Then
				Me.Onprice_schedule_idChanging(value)
				Me.SendPropertyChanging
				Me._price_schedule_id = value
				Me.SendPropertyChanged("price_schedule_id")
				Me.Onprice_schedule_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(5,2)")>  _
	Public Property discount() As System.Nullable(Of Decimal)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me.OndiscountChanging(value)
				Me.SendPropertyChanging
				Me._discount = value
				Me.SendPropertyChanged("discount")
				Me.OndiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_net_amount", DbType:="Decimal(15,2)")>  _
	Public Property net_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._net_amount
		End Get
		Set
			If (Me._net_amount.Equals(value) = false) Then
				Me.Onnet_amountChanging(value)
				Me.SendPropertyChanging
				Me._net_amount = value
				Me.SendPropertyChanged("net_amount")
				Me.Onnet_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_header_comment", DbType:="VarChar(100)")>  _
	Public Property header_comment() As String
		Get
			Return Me._header_comment
		End Get
		Set
			If (String.Equals(Me._header_comment, value) = false) Then
				Me.Onheader_commentChanging(value)
				Me.SendPropertyChanging
				Me._header_comment = value
				Me.SendPropertyChanged("header_comment")
				Me.Onheader_commentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(2500)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me.Onlocked_for_edit_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_datetime = value
				Me.SendPropertyChanged("locked_for_edit_datetime")
				Me.Onlocked_for_edit_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="VarChar(20)")>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me.Onlocked_for_edit_byChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_by = value
				Me.SendPropertyChanged("locked_for_edit_by")
				Me.Onlocked_for_edit_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_linked_to_fso_rec_id", DbType:="Int")>  _
	Public Property quote_linked_to_fso_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._quote_linked_to_fso_rec_id
		End Get
		Set
			If (Me._quote_linked_to_fso_rec_id.Equals(value) = false) Then
				Me.Onquote_linked_to_fso_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._quote_linked_to_fso_rec_id = value
				Me.SendPropertyChanged("quote_linked_to_fso_rec_id")
				Me.Onquote_linked_to_fso_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_charge_default_quantity", DbType:="Int")>  _
	Public Property depth_charge_default_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._depth_charge_default_quantity
		End Get
		Set
			If (Me._depth_charge_default_quantity.Equals(value) = false) Then
				Me.Ondepth_charge_default_quantityChanging(value)
				Me.SendPropertyChanging
				Me._depth_charge_default_quantity = value
				Me.SendPropertyChanged("depth_charge_default_quantity")
				Me.Ondepth_charge_default_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logging_charge_default_quantity", DbType:="Int")>  _
	Public Property logging_charge_default_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._logging_charge_default_quantity
		End Get
		Set
			If (Me._logging_charge_default_quantity.Equals(value) = false) Then
				Me.Onlogging_charge_default_quantityChanging(value)
				Me.SendPropertyChanging
				Me._logging_charge_default_quantity = value
				Me.SendPropertyChanged("logging_charge_default_quantity")
				Me.Onlogging_charge_default_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operation_charge_default_quantity", DbType:="Int")>  _
	Public Property operation_charge_default_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._operation_charge_default_quantity
		End Get
		Set
			If (Me._operation_charge_default_quantity.Equals(value) = false) Then
				Me.Onoperation_charge_default_quantityChanging(value)
				Me.SendPropertyChanging
				Me._operation_charge_default_quantity = value
				Me.SendPropertyChanged("operation_charge_default_quantity")
				Me.Onoperation_charge_default_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me.Onoilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._oilcomp_id = value
				Me.SendPropertyChanged("oilcomp_id")
				Me.Onoilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="Int")>  _
	Public Property sold_to_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_id
		End Get
		Set
			If (Me._sold_to_id.Equals(value) = false) Then
				Me.Onsold_to_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_id = value
				Me.SendPropertyChanged("sold_to_id")
				Me.Onsold_to_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_version_number", DbType:="Int")>  _
	Public Property quote_version_number() As System.Nullable(Of Integer)
		Get
			Return Me._quote_version_number
		End Get
		Set
			If (Me._quote_version_number.Equals(value) = false) Then
				Me.Onquote_version_numberChanging(value)
				Me.SendPropertyChanging
				Me._quote_version_number = value
				Me.SendPropertyChanged("quote_version_number")
				Me.Onquote_version_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_to_sap_flag", DbType:="Bit")>  _
	Public Property exported_to_sap_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._exported_to_sap_flag
		End Get
		Set
			If (Me._exported_to_sap_flag.Equals(value) = false) Then
				Me.Onexported_to_sap_flagChanging(value)
				Me.SendPropertyChanging
				Me._exported_to_sap_flag = value
				Me.SendPropertyChanged("exported_to_sap_flag")
				Me.Onexported_to_sap_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_id", DbType:="VarChar(30)")>  _
	Public Property sap_export_id() As String
		Get
			Return Me._sap_export_id
		End Get
		Set
			If (String.Equals(Me._sap_export_id, value) = false) Then
				Me.Onsap_export_idChanging(value)
				Me.SendPropertyChanging
				Me._sap_export_id = value
				Me.SendPropertyChanged("sap_export_id")
				Me.Onsap_export_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_sales_document_number", DbType:="VarChar(30)")>  _
	Public Property sap_sales_document_number() As String
		Get
			Return Me._sap_sales_document_number
		End Get
		Set
			If (String.Equals(Me._sap_sales_document_number, value) = false) Then
				Me.Onsap_sales_document_numberChanging(value)
				Me.SendPropertyChanging
				Me._sap_sales_document_number = value
				Me.SendPropertyChanged("sap_sales_document_number")
				Me.Onsap_sales_document_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pressure", DbType:="Real")>  _
	Public Property pressure() As System.Nullable(Of Single)
		Get
			Return Me._pressure
		End Get
		Set
			If (Me._pressure.Equals(value) = false) Then
				Me.OnpressureChanging(value)
				Me.SendPropertyChanging
				Me._pressure = value
				Me.SendPropertyChanged("pressure")
				Me.OnpressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_temperature", DbType:="Real")>  _
	Public Property temperature() As System.Nullable(Of Single)
		Get
			Return Me._temperature
		End Get
		Set
			If (Me._temperature.Equals(value) = false) Then
				Me.OntemperatureChanging(value)
				Me.SendPropertyChanging
				Me._temperature = value
				Me.SendPropertyChanged("temperature")
				Me.OntemperatureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_area", DbType:="VarChar(15)")>  _
	Public Property area() As String
		Get
			Return Me._area
		End Get
		Set
			If (String.Equals(Me._area, value) = false) Then
				Me.OnareaChanging(value)
				Me.SendPropertyChanging
				Me._area = value
				Me.SendPropertyChanged("area")
				Me.OnareaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_purchase_order_number", DbType:="VarChar(30)")>  _
	Public Property purchase_order_number() As String
		Get
			Return Me._purchase_order_number
		End Get
		Set
			If (String.Equals(Me._purchase_order_number, value) = false) Then
				Me.Onpurchase_order_numberChanging(value)
				Me.SendPropertyChanging
				Me._purchase_order_number = value
				Me.SendPropertyChanged("purchase_order_number")
				Me.Onpurchase_order_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_address_rec_id", DbType:="Int")>  _
	Public Property sold_to_address_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_address_rec_id
		End Get
		Set
			If (Me._sold_to_address_rec_id.Equals(value) = false) Then
				Me.Onsold_to_address_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_address_rec_id = value
				Me.SendPropertyChanged("sold_to_address_rec_id")
				Me.Onsold_to_address_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_multi_psl_export_flag", DbType:="Bit")>  _
	Public Property multi_psl_export_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._multi_psl_export_flag
		End Get
		Set
			If (Me._multi_psl_export_flag.Equals(value) = false) Then
				Me.Onmulti_psl_export_flagChanging(value)
				Me.SendPropertyChanging
				Me._multi_psl_export_flag = value
				Me.SendPropertyChanged("multi_psl_export_flag")
				Me.Onmulti_psl_export_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_read_datetime", DbType:="smalldatetime")>  _
	Public Property data_read_datetime() As System.Nullable(Of Date)
		Get
			Return Me._data_read_datetime
		End Get
		Set
			If (Me._data_read_datetime.Equals(value) = false) Then
				Me.Ondata_read_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._data_read_datetime = value
				Me.SendPropertyChanged("data_read_datetime")
				Me.Ondata_read_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_export_datetime", DbType:="smalldatetime")>  _
	Public Property dispatch_export_datetime() As System.Nullable(Of Date)
		Get
			Return Me._dispatch_export_datetime
		End Get
		Set
			If (Me._dispatch_export_datetime.Equals(value) = false) Then
				Me.Ondispatch_export_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_export_datetime = value
				Me.SendPropertyChanged("dispatch_export_datetime")
				Me.Ondispatch_export_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_invoiced_flag", DbType:="bit")>  _
	Public Property fso_invoiced_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._fso_invoiced_flag
		End Get
		Set
			If (Me._fso_invoiced_flag.Equals(value) = false) Then
				Me.Onfso_invoiced_flagChanging(value)
				Me.SendPropertyChanging
				Me._fso_invoiced_flag = value
				Me.SendPropertyChanged("fso_invoiced_flag")
				Me.Onfso_invoiced_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_type_id")>  _
	Public Property fso_type_id() As String
		Get
			Return Me._fso_type_id
		End Get
		Set
			If (String.Equals(Me._fso_type_id, value) = false) Then
				Me.Onfso_type_idChanging(value)
				Me.SendPropertyChanging
				Me._fso_type_id = value
				Me.SendPropertyChanged("fso_type_id")
				Me.Onfso_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_completed", DbType:="bit")>  _
	Public Property disp_completed() As System.Nullable(Of Boolean)
		Get
			Return Me._disp_completed
		End Get
		Set
			If (Me._disp_completed.Equals(value) = false) Then
				Me.Ondisp_completedChanging(value)
				Me.SendPropertyChanging
				Me._disp_completed = value
				Me.SendPropertyChanged("disp_completed")
				Me.Ondisp_completedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_in_finance_mode_flag", DbType:="bit")>  _
	Public Property fso_in_finance_mode_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._fso_in_finance_mode_flag
		End Get
		Set
			If (Me._fso_in_finance_mode_flag.Equals(value) = false) Then
				Me.Onfso_in_finance_mode_flagChanging(value)
				Me.SendPropertyChanging
				Me._fso_in_finance_mode_flag = value
				Me.SendPropertyChanged("fso_in_finance_mode_flag")
				Me.Onfso_in_finance_mode_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_geoscience_fso_flag", DbType:="bit")>  _
	Public Property geoscience_fso_flag() As Boolean
		Get
			Return Me._geoscience_fso_flag
		End Get
		Set
			If ((Me._geoscience_fso_flag = value)  _
						= false) Then
				Me.Ongeoscience_fso_flagChanging(value)
				Me.SendPropertyChanging
				Me._geoscience_fso_flag = value
				Me.SendPropertyChanged("geoscience_fso_flag")
				Me.Ongeoscience_fso_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_sales_order_number", DbType:="varchar(20)")>  _
	Public Property sap_sales_order_number() As String
		Get
			Return Me._sap_sales_order_number
		End Get
		Set
			If (String.Equals(Me._sap_sales_order_number, value) = false) Then
				Me.Onsap_sales_order_numberChanging(value)
				Me.SendPropertyChanging
				Me._sap_sales_order_number = value
				Me.SendPropertyChanged("sap_sales_order_number")
				Me.Onsap_sales_order_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_order_rec_id", DbType:="int")>  _
	Public Property service_order_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._service_order_rec_id
		End Get
		Set
			If (Me._service_order_rec_id.Equals(value) = false) Then
				Me.Onservice_order_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._service_order_rec_id = value
				Me.SendPropertyChanged("service_order_rec_id")
				Me.Onservice_order_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property currency() As String
		Get
			Return Me._currency
		End Get
		Set
			If (String.Equals(Me._currency, value) = false) Then
				Me.OncurrencyChanging(value)
				Me.SendPropertyChanging
				Me._currency = value
				Me.SendPropertyChanged("currency")
				Me.OncurrencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uplift", DbType:="decimal(5, 2)")>  _
	Public Property uplift() As System.Nullable(Of Decimal)
		Get
			Return Me._uplift
		End Get
		Set
			If (Me._uplift.Equals(value) = false) Then
				Me.OnupliftChanging(value)
				Me.SendPropertyChanging
				Me._uplift = value
				Me.SendPropertyChanged("uplift")
				Me.OnupliftChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property unit() As String
		Get
			Return Me._unit
		End Get
		Set
			If (String.Equals(Me._unit, value) = false) Then
				Me.OnunitChanging(value)
				Me.SendPropertyChanging
				Me._unit = value
				Me.SendPropertyChanged("unit")
				Me.OnunitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uploaded_to_server_flag")>  _
	Public Property uploaded_to_server_flag() As Boolean
		Get
			Return Me._uploaded_to_server_flag
		End Get
		Set
			If ((Me._uploaded_to_server_flag = value)  _
						= false) Then
				Me.Onuploaded_to_server_flagChanging(value)
				Me.SendPropertyChanging
				Me._uploaded_to_server_flag = value
				Me.SendPropertyChanged("uploaded_to_server_flag")
				Me.Onuploaded_to_server_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custom_field1", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property custom_field1() As String
		Get
			Return Me._custom_field1
		End Get
		Set
			If (String.Equals(Me._custom_field1, value) = false) Then
				Me.Oncustom_field1Changing(value)
				Me.SendPropertyChanging
				Me._custom_field1 = value
				Me.SendPropertyChanged("custom_field1")
				Me.Oncustom_field1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custom_value1", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property custom_value1() As String
		Get
			Return Me._custom_value1
		End Get
		Set
			If (String.Equals(Me._custom_value1, value) = false) Then
				Me.Oncustom_value1Changing(value)
				Me.SendPropertyChanging
				Me._custom_value1 = value
				Me.SendPropertyChanged("custom_value1")
				Me.Oncustom_value1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custom_field2", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property custom_field2() As String
		Get
			Return Me._custom_field2
		End Get
		Set
			If (String.Equals(Me._custom_field2, value) = false) Then
				Me.Oncustom_field2Changing(value)
				Me.SendPropertyChanging
				Me._custom_field2 = value
				Me.SendPropertyChanged("custom_field2")
				Me.Oncustom_field2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custom_value2", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property custom_value2() As String
		Get
			Return Me._custom_value2
		End Get
		Set
			If (String.Equals(Me._custom_value2, value) = false) Then
				Me.Oncustom_value2Changing(value)
				Me.SendPropertyChanging
				Me._custom_value2 = value
				Me.SendPropertyChanged("custom_value2")
				Me.Oncustom_value2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exchange_rate", DbType:="decimal(15, 5)")>  _
	Public Property exchange_rate() As System.Nullable(Of Decimal)
		Get
			Return Me._exchange_rate
		End Get
		Set
			If (Me._exchange_rate.Equals(value) = false) Then
				Me.Onexchange_rateChanging(value)
				Me.SendPropertyChanging
				Me._exchange_rate = value
				Me.SendPropertyChanged("exchange_rate")
				Me.Onexchange_rateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_type", DbType:="varchar(1)")>  _
	Public Property contract_type() As String
		Get
			Return Me._contract_type
		End Get
		Set
			If (String.Equals(Me._contract_type, value) = false) Then
				Me.Oncontract_typeChanging(value)
				Me.SendPropertyChanging
				Me._contract_type = value
				Me.SendPropertyChanged("contract_type")
				Me.Oncontract_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linked_to_contract_rec_id", DbType:="int")>  _
	Public Property linked_to_contract_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._linked_to_contract_rec_id
		End Get
		Set
			If (Me._linked_to_contract_rec_id.Equals(value) = false) Then
				Me.Onlinked_to_contract_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._linked_to_contract_rec_id = value
				Me.SendPropertyChanged("linked_to_contract_rec_id")
				Me.Onlinked_to_contract_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linked_to_contract_number", CanBeNull:=false)>  _
	Public Property linked_to_contract_number() As String
		Get
			Return Me._linked_to_contract_number
		End Get
		Set
			If (String.Equals(Me._linked_to_contract_number, value) = false) Then
				Me.Onlinked_to_contract_numberChanging(value)
				Me.SendPropertyChanging
				Me._linked_to_contract_number = value
				Me.SendPropertyChanged("linked_to_contract_number")
				Me.Onlinked_to_contract_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_access_level", CanBeNull:=false)>  _
	Public Property access_level() As String
		Get
			Return Me._access_level
		End Get
		Set
			If (String.Equals(Me._access_level, value) = false) Then
				Me.Onaccess_levelChanging(value)
				Me.SendPropertyChanging
				Me._access_level = value
				Me.SendPropertyChanged("access_level")
				Me.Onaccess_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_by", CanBeNull:=false)>  _
	Public Property created_by() As String
		Get
			Return Me._created_by
		End Get
		Set
			If (String.Equals(Me._created_by, value) = false) Then
				Me.Oncreated_byChanging(value)
				Me.SendPropertyChanging
				Me._created_by = value
				Me.SendPropertyChanged("created_by")
				Me.Oncreated_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_datetime", DbType:="smalldatetime")>  _
	Public Property created_datetime() As System.Nullable(Of Date)
		Get
			Return Me._created_datetime
		End Get
		Set
			If (Me._created_datetime.Equals(value) = false) Then
				Me.Oncreated_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._created_datetime = value
				Me.SendPropertyChanged("created_datetime")
				Me.Oncreated_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_main_quote_flag", DbType:="bit")>  _
	Public Property main_quote_flag() As Boolean
		Get
			Return Me._main_quote_flag
		End Get
		Set
			If ((Me._main_quote_flag = value)  _
						= false) Then
				Me.Onmain_quote_flagChanging(value)
				Me.SendPropertyChanging
				Me._main_quote_flag = value
				Me.SendPropertyChanged("main_quote_flag")
				Me.Onmain_quote_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_fso_item")>  _
Partial Public Class disp_fso_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _fso_rec_id As System.Nullable(Of Integer)
	
	Private _gpi As String
	
	Private _item As String
	
	Private _price_schedule_id As String
	
	Private _quantity As System.Nullable(Of Decimal)
	
	Private _unit_price As System.Nullable(Of Decimal)
	
	Private _override_unit_price As System.Nullable(Of Decimal)
	
	Private _net_amount As System.Nullable(Of Decimal)
	
	Private _discount As System.Nullable(Of Decimal)
	
	Private _row_number As System.Nullable(Of Integer)
	
	Private _sap_export_row_number As System.Nullable(Of Integer)
	
	Private _inserted_as_additional_charge_flag As System.Nullable(Of Boolean)
	
	Private _group_name As String
	
	Private _custom_description As String
	
	Private _line_item_comment As String
	
	Private _material As String
	
	Private _description As String
	
	Private _customer_description As String
	
	Private _name As String
	
	Private _minimum_quantity As System.Nullable(Of Decimal)
	
	Private _discount_allowed_flag As System.Nullable(Of Boolean)
	
	Private _gross_amount As System.Nullable(Of Decimal)
	
	Private _add_to_group_calculation_flag As System.Nullable(Of Boolean)
	
	Private _price_book_rec_id As System.Nullable(Of Integer)
	
	Private _depth_unit As String
	
	Private _uplift As System.Nullable(Of Decimal)
	
	Private _ship_datetime As System.Nullable(Of Date)
	
	Private _return_datetime As System.Nullable(Of Date)
	
	Private _bundle_item_flag As Boolean
	
	Private _bundle_item_rec_id As System.Nullable(Of Integer)
	
	Private _base_unit_price As System.Nullable(Of Decimal)
	
	Private _upsell_item_flag As Boolean
	
	Private _copied_from_contract_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onfso_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfso_rec_idChanged()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub OnitemChanging(value As String)
    End Sub
    Partial Private Sub OnitemChanged()
    End Sub
    Partial Private Sub Onprice_schedule_idChanging(value As String)
    End Sub
    Partial Private Sub Onprice_schedule_idChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub Onunit_priceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onunit_priceChanged()
    End Sub
    Partial Private Sub Onoverride_unit_priceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onoverride_unit_priceChanged()
    End Sub
    Partial Private Sub Onnet_amountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onnet_amountChanged()
    End Sub
    Partial Private Sub OndiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OndiscountChanged()
    End Sub
    Partial Private Sub Onrow_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrow_numberChanged()
    End Sub
    Partial Private Sub Onsap_export_row_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsap_export_row_numberChanged()
    End Sub
    Partial Private Sub Oninserted_as_additional_charge_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oninserted_as_additional_charge_flagChanged()
    End Sub
    Partial Private Sub Ongroup_nameChanging(value As String)
    End Sub
    Partial Private Sub Ongroup_nameChanged()
    End Sub
    Partial Private Sub Oncustom_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Oncustom_descriptionChanged()
    End Sub
    Partial Private Sub Online_item_commentChanging(value As String)
    End Sub
    Partial Private Sub Online_item_commentChanged()
    End Sub
    Partial Private Sub OnmaterialChanging(value As String)
    End Sub
    Partial Private Sub OnmaterialChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Oncustomer_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Oncustomer_descriptionChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onminimum_quantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onminimum_quantityChanged()
    End Sub
    Partial Private Sub Ondiscount_allowed_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Ondiscount_allowed_flagChanged()
    End Sub
    Partial Private Sub Ongross_amountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ongross_amountChanged()
    End Sub
    Partial Private Sub Onadd_to_group_calculation_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onadd_to_group_calculation_flagChanged()
    End Sub
    Partial Private Sub Onprice_book_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onprice_book_rec_idChanged()
    End Sub
    Partial Private Sub OnunitChanging(value As String)
    End Sub
    Partial Private Sub OnunitChanged()
    End Sub
    Partial Private Sub OnupliftChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnupliftChanged()
    End Sub
    Partial Private Sub Onship_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onship_datetimeChanged()
    End Sub
    Partial Private Sub Onreturn_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onreturn_datetimeChanged()
    End Sub
    Partial Private Sub Onbundle_summary_item_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onbundle_summary_item_flagChanged()
    End Sub
    Partial Private Sub Onbundle_item_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onbundle_item_rec_idChanged()
    End Sub
    Partial Private Sub Onbase_unit_priceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onbase_unit_priceChanged()
    End Sub
    Partial Private Sub Onupsell_item_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onupsell_item_flagChanged()
    End Sub
    Partial Private Sub Oncopied_from_contract_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncopied_from_contract_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_rec_id", DbType:="Int")>  _
	Public Property fso_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._fso_rec_id
		End Get
		Set
			If (Me._fso_rec_id.Equals(value) = false) Then
				Me.Onfso_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._fso_rec_id = value
				Me.SendPropertyChanged("fso_rec_id")
				Me.Onfso_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40)")>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item", DbType:="VarChar(10)")>  _
	Public Property item() As String
		Get
			Return Me._item
		End Get
		Set
			If (String.Equals(Me._item, value) = false) Then
				Me.OnitemChanging(value)
				Me.SendPropertyChanging
				Me._item = value
				Me.SendPropertyChanged("item")
				Me.OnitemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_schedule_id", DbType:="VarChar(10)")>  _
	Public Property price_schedule_id() As String
		Get
			Return Me._price_schedule_id
		End Get
		Set
			If (String.Equals(Me._price_schedule_id, value) = false) Then
				Me.Onprice_schedule_idChanging(value)
				Me.SendPropertyChanging
				Me._price_schedule_id = value
				Me.SendPropertyChanged("price_schedule_id")
				Me.Onprice_schedule_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Decimal(10,2)")>  _
	Public Property quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._unit_price
		End Get
		Set
			If (Me._unit_price.Equals(value) = false) Then
				Me.Onunit_priceChanging(value)
				Me.SendPropertyChanging
				Me._unit_price = value
				Me.SendPropertyChanged("unit_price")
				Me.Onunit_priceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_override_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property override_unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._override_unit_price
		End Get
		Set
			If (Me._override_unit_price.Equals(value) = false) Then
				Me.Onoverride_unit_priceChanging(value)
				Me.SendPropertyChanging
				Me._override_unit_price = value
				Me.SendPropertyChanged("override_unit_price")
				Me.Onoverride_unit_priceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_net_amount", DbType:="Decimal(15,2)")>  _
	Public Property net_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._net_amount
		End Get
		Set
			If (Me._net_amount.Equals(value) = false) Then
				Me.Onnet_amountChanging(value)
				Me.SendPropertyChanging
				Me._net_amount = value
				Me.SendPropertyChanged("net_amount")
				Me.Onnet_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(5,2)")>  _
	Public Property discount() As System.Nullable(Of Decimal)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me.OndiscountChanging(value)
				Me.SendPropertyChanging
				Me._discount = value
				Me.SendPropertyChanged("discount")
				Me.OndiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int")>  _
	Public Property row_number() As System.Nullable(Of Integer)
		Get
			Return Me._row_number
		End Get
		Set
			If (Me._row_number.Equals(value) = false) Then
				Me.Onrow_numberChanging(value)
				Me.SendPropertyChanging
				Me._row_number = value
				Me.SendPropertyChanged("row_number")
				Me.Onrow_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_row_number", DbType:="Int")>  _
	Public Property sap_export_row_number() As System.Nullable(Of Integer)
		Get
			Return Me._sap_export_row_number
		End Get
		Set
			If (Me._sap_export_row_number.Equals(value) = false) Then
				Me.Onsap_export_row_numberChanging(value)
				Me.SendPropertyChanging
				Me._sap_export_row_number = value
				Me.SendPropertyChanged("sap_export_row_number")
				Me.Onsap_export_row_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inserted_as_additional_charge_flag", DbType:="Bit")>  _
	Public Property inserted_as_additional_charge_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._inserted_as_additional_charge_flag
		End Get
		Set
			If (Me._inserted_as_additional_charge_flag.Equals(value) = false) Then
				Me.Oninserted_as_additional_charge_flagChanging(value)
				Me.SendPropertyChanging
				Me._inserted_as_additional_charge_flag = value
				Me.SendPropertyChanged("inserted_as_additional_charge_flag")
				Me.Oninserted_as_additional_charge_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_name", DbType:="VarChar(30)")>  _
	Public Property group_name() As String
		Get
			Return Me._group_name
		End Get
		Set
			If (String.Equals(Me._group_name, value) = false) Then
				Me.Ongroup_nameChanging(value)
				Me.SendPropertyChanging
				Me._group_name = value
				Me.SendPropertyChanged("group_name")
				Me.Ongroup_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custom_description", DbType:="VarChar(150)")>  _
	Public Property custom_description() As String
		Get
			Return Me._custom_description
		End Get
		Set
			If (String.Equals(Me._custom_description, value) = false) Then
				Me.Oncustom_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._custom_description = value
				Me.SendPropertyChanged("custom_description")
				Me.Oncustom_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_line_item_comment", DbType:="VarChar(250)")>  _
	Public Property line_item_comment() As String
		Get
			Return Me._line_item_comment
		End Get
		Set
			If (String.Equals(Me._line_item_comment, value) = false) Then
				Me.Online_item_commentChanging(value)
				Me.SendPropertyChanging
				Me._line_item_comment = value
				Me.SendPropertyChanged("line_item_comment")
				Me.Online_item_commentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="varchar(15)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me.OnmaterialChanging(value)
				Me.SendPropertyChanging
				Me._material = value
				Me.SendPropertyChanged("material")
				Me.OnmaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="varchar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_description", DbType:="varchar(250)")>  _
	Public Property customer_description() As String
		Get
			Return Me._customer_description
		End Get
		Set
			If (String.Equals(Me._customer_description, value) = false) Then
				Me.Oncustomer_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._customer_description = value
				Me.SendPropertyChanged("customer_description")
				Me.Oncustomer_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="varchar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minimum_quantity", DbType:="decimal(10,1)")>  _
	Public Property minimum_quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._minimum_quantity
		End Get
		Set
			If (Me._minimum_quantity.Equals(value) = false) Then
				Me.Onminimum_quantityChanging(value)
				Me.SendPropertyChanging
				Me._minimum_quantity = value
				Me.SendPropertyChanged("minimum_quantity")
				Me.Onminimum_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount_allowed_flag", DbType:="bit")>  _
	Public Property discount_allowed_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._discount_allowed_flag
		End Get
		Set
			If (Me._discount_allowed_flag.Equals(value) = false) Then
				Me.Ondiscount_allowed_flagChanging(value)
				Me.SendPropertyChanging
				Me._discount_allowed_flag = value
				Me.SendPropertyChanged("discount_allowed_flag")
				Me.Ondiscount_allowed_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gross_amount", DbType:="Decimal(15,2)")>  _
	Public Property gross_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._gross_amount
		End Get
		Set
			If (Me._gross_amount.Equals(value) = false) Then
				Me.Ongross_amountChanging(value)
				Me.SendPropertyChanging
				Me._gross_amount = value
				Me.SendPropertyChanged("gross_amount")
				Me.Ongross_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_add_to_group_calculation_flag", DbType:="bit")>  _
	Public Property add_to_group_calculation_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._add_to_group_calculation_flag
		End Get
		Set
			If (Me._add_to_group_calculation_flag.Equals(value) = false) Then
				Me.Onadd_to_group_calculation_flagChanging(value)
				Me.SendPropertyChanging
				Me._add_to_group_calculation_flag = value
				Me.SendPropertyChanged("add_to_group_calculation_flag")
				Me.Onadd_to_group_calculation_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_book_rec_id", DbType:="int")>  _
	Public Property price_book_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._price_book_rec_id
		End Get
		Set
			If (Me._price_book_rec_id.Equals(value) = false) Then
				Me.Onprice_book_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._price_book_rec_id = value
				Me.SendPropertyChanged("price_book_rec_id")
				Me.Onprice_book_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_unit", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property unit() As String
		Get
			Return Me._depth_unit
		End Get
		Set
			If (String.Equals(Me._depth_unit, value) = false) Then
				Me.OnunitChanging(value)
				Me.SendPropertyChanging
				Me._depth_unit = value
				Me.SendPropertyChanged("unit")
				Me.OnunitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uplift", DbType:="decimal(5, 2)")>  _
	Public Property uplift() As System.Nullable(Of Decimal)
		Get
			Return Me._uplift
		End Get
		Set
			If (Me._uplift.Equals(value) = false) Then
				Me.OnupliftChanging(value)
				Me.SendPropertyChanging
				Me._uplift = value
				Me.SendPropertyChanged("uplift")
				Me.OnupliftChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ship_datetime", DbType:="smalldatetime")>  _
	Public Property ship_datetime() As System.Nullable(Of Date)
		Get
			Return Me._ship_datetime
		End Get
		Set
			If (Me._ship_datetime.Equals(value) = false) Then
				Me.Onship_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._ship_datetime = value
				Me.SendPropertyChanged("ship_datetime")
				Me.Onship_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_return_datetime", DbType:="smalldatetime")>  _
	Public Property return_datetime() As System.Nullable(Of Date)
		Get
			Return Me._return_datetime
		End Get
		Set
			If (Me._return_datetime.Equals(value) = false) Then
				Me.Onreturn_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._return_datetime = value
				Me.SendPropertyChanged("return_datetime")
				Me.Onreturn_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle_item_flag", DbType:="bit")>  _
	Public Property bundle_summary_item_flag() As Boolean
		Get
			Return Me._bundle_item_flag
		End Get
		Set
			If ((Me._bundle_item_flag = value)  _
						= false) Then
				Me.Onbundle_summary_item_flagChanging(value)
				Me.SendPropertyChanging
				Me._bundle_item_flag = value
				Me.SendPropertyChanged("bundle_summary_item_flag")
				Me.Onbundle_summary_item_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle_item_rec_id", DbType:="int")>  _
	Public Property bundle_item_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._bundle_item_rec_id
		End Get
		Set
			If (Me._bundle_item_rec_id.Equals(value) = false) Then
				Me.Onbundle_item_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._bundle_item_rec_id = value
				Me.SendPropertyChanged("bundle_item_rec_id")
				Me.Onbundle_item_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_base_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property base_unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._base_unit_price
		End Get
		Set
			If (Me._base_unit_price.Equals(value) = false) Then
				Me.Onbase_unit_priceChanging(value)
				Me.SendPropertyChanging
				Me._base_unit_price = value
				Me.SendPropertyChanged("base_unit_price")
				Me.Onbase_unit_priceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upsell_item_flag", DbType:="bit")>  _
	Public Property upsell_item_flag() As Boolean
		Get
			Return Me._upsell_item_flag
		End Get
		Set
			If ((Me._upsell_item_flag = value)  _
						= false) Then
				Me.Onupsell_item_flagChanging(value)
				Me.SendPropertyChanging
				Me._upsell_item_flag = value
				Me.SendPropertyChanged("upsell_item_flag")
				Me.Onupsell_item_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_copied_from_contract_flag", DbType:="bit")>  _
	Public Property copied_from_contract_flag() As Boolean
		Get
			Return Me._copied_from_contract_flag
		End Get
		Set
			If ((Me._copied_from_contract_flag = value)  _
						= false) Then
				Me.Oncopied_from_contract_flagChanging(value)
				Me.SendPropertyChanging
				Me._copied_from_contract_flag = value
				Me.SendPropertyChanged("copied_from_contract_flag")
				Me.Oncopied_from_contract_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_fso_quote_comment_item")>  _
Partial Public Class quote_footnote_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _fso_rec_id As System.Nullable(Of Integer)
	
	Private _comment_rec_id As System.Nullable(Of Integer)
	
	Private _row_number As System.Nullable(Of Integer)
	
	Private _comment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onfso_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfso_rec_idChanged()
    End Sub
    Partial Private Sub Oncomment_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncomment_rec_idChanged()
    End Sub
    Partial Private Sub Onrow_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrow_numberChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_rec_id", DbType:="Int", IsPrimaryKey:=true)>  _
	Public Property fso_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._fso_rec_id
		End Get
		Set
			If (Me._fso_rec_id.Equals(value) = false) Then
				Me.Onfso_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._fso_rec_id = value
				Me.SendPropertyChanged("fso_rec_id")
				Me.Onfso_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment_rec_id", DbType:="Int", IsPrimaryKey:=true)>  _
	Public Property comment_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._comment_rec_id
		End Get
		Set
			If (Me._comment_rec_id.Equals(value) = false) Then
				Me.Oncomment_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._comment_rec_id = value
				Me.SendPropertyChanged("comment_rec_id")
				Me.Oncomment_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int")>  _
	Public Property row_number() As System.Nullable(Of Integer)
		Get
			Return Me._row_number
		End Get
		Set
			If (Me._row_number.Equals(value) = false) Then
				Me.Onrow_numberChanging(value)
				Me.SendPropertyChanging
				Me._row_number = value
				Me.SendPropertyChanged("row_number")
				Me.Onrow_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="varchar(1500)", CanBeNull:=false)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class quote_linked_to_fso_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _quote_number As String
	
	Private _quote_linked_to_fso_rec_id As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onquote_numberChanging(value As String)
    End Sub
    Partial Private Sub Onquote_numberChanged()
    End Sub
    Partial Private Sub Onquote_linked_to_fso_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onquote_linked_to_fso_rec_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property quote_number() As String
		Get
			Return Me._quote_number
		End Get
		Set
			If (String.Equals(Me._quote_number, value) = false) Then
				Me.Onquote_numberChanging(value)
				Me.SendPropertyChanging
				Me._quote_number = value
				Me.SendPropertyChanged("quote_number")
				Me.Onquote_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_linked_to_fso_rec_id", DbType:="int")>  _
	Public Property quote_linked_to_fso_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._quote_linked_to_fso_rec_id
		End Get
		Set
			If (Me._quote_linked_to_fso_rec_id.Equals(value) = false) Then
				Me.Onquote_linked_to_fso_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._quote_linked_to_fso_rec_id = value
				Me.SendPropertyChanged("quote_linked_to_fso_rec_id")
				Me.Onquote_linked_to_fso_rec_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class fso_multi_select_item
	
	Private _gpi As String
	
	Private _item As String
	
	Private _description As String
	
	Private _amount As Decimal
	
	Private _name As String
	
	Private _minimum_quantity As System.Nullable(Of Decimal)
	
	Private _discount_allowed_flag As Boolean
	
	Private _customer_description As String
	
	Private _material As String
	
	Private _rec_id As Integer
	
	Private _depth_unit As String
	
	Private _bundle_item_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property item() As String
		Get
			Return Me._item
		End Get
		Set
			If (String.Equals(Me._item, value) = false) Then
				Me._item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="varchar(150)", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount")>  _
	Public Property amount() As Decimal
		Get
			Return Me._amount
		End Get
		Set
			If ((Me._amount = value)  _
						= false) Then
				Me._amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minimum_quantity")>  _
	Public Property minimum_quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._minimum_quantity
		End Get
		Set
			If (Me._minimum_quantity.Equals(value) = false) Then
				Me._minimum_quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount_allowed_flag", DbType:="bit")>  _
	Public Property discount_allowed_flag() As Boolean
		Get
			Return Me._discount_allowed_flag
		End Get
		Set
			If ((Me._discount_allowed_flag = value)  _
						= false) Then
				Me._discount_allowed_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_description", DbType:="varchar(250)")>  _
	Public Property customer_description() As String
		Get
			Return Me._customer_description
		End Get
		Set
			If (String.Equals(Me._customer_description, value) = false) Then
				Me._customer_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="int")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_unit", DbType:="varchar(10)")>  _
	Public Property unit() As String
		Get
			Return Me._depth_unit
		End Get
		Set
			If (String.Equals(Me._depth_unit, value) = false) Then
				Me._depth_unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle_item_flag", DbType:="bit")>  _
	Public Property bundle_summary_item_flag() As Boolean
		Get
			Return Me._bundle_item_flag
		End Get
		Set
			If ((Me._bundle_item_flag = value)  _
						= false) Then
				Me._bundle_item_flag = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class dispatch_summary
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _status As Short
	
	Private _oilcomp_id As String
	
	Private _county_id As String
	
	Private _lat As System.Nullable(Of Decimal)
	
	Private _lon As System.Nullable(Of Decimal)
	
	Private _rig As String
	
	Private _truck As String
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _distdo_id As System.Nullable(Of Integer)
	
	Private _distdo_name As String
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _approx_end As System.Nullable(Of Date)
	
	Private _equipment_left_datetime As System.Nullable(Of Date)
	
	Private _crew_left_datetime As System.Nullable(Of Date)
	
	Private _equipment_on_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_on_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_started_job_datetime As System.Nullable(Of Date)
	
	Private _crew_finished_job_datetime As System.Nullable(Of Date)
	
	Private _equipment_left_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_left_loc_datetime As System.Nullable(Of Date)
	
	Private _equipment_returned_datetime As System.Nullable(Of Date)
	
	Private _crew_returned_datetime As System.Nullable(Of Date)
	
	Private _wireline_td As System.Nullable(Of Single)
	
	Private _bht As System.Nullable(Of Single)
	
	Private _dispatch_export_datetime As System.Nullable(Of Date)
	
	Private _dispatch_exported_by As String
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Private _data_read_datetime As System.Nullable(Of Date)
	
	Private _sold_to_id As System.Nullable(Of Integer)
	
	Private _sold_to_address_rec_id As System.Nullable(Of Integer)
	
	Private _assets_on_job_count As System.Nullable(Of Integer)
	
	Private _unexported_quote_count As System.Nullable(Of Integer)
	
	Private _disp_has_fso_in_finance_mode_flag As Boolean
	
	Private _max_pressure As System.Nullable(Of Single)
	
	Private _deviation As System.Nullable(Of Single)
	
	Private _fluid_type As String
	
	Private _fluid_weight As System.Nullable(Of Single)
	
	Private _wellhead_pressure As System.Nullable(Of Single)
	
	Private _true_vertical_depth As System.Nullable(Of Single)
	
	Private _comments As String
	
	Private _spec_req As String
	
	Private _operation_market_code As String
	
	Private _environment_market_code As System.Nullable(Of Short)
	
	Private _rig_type_market_code As String
	
	Private _service_type_market_code As String
	
	Private _well_type_market_code As String
	
	Private _acquisition_market_code As String
	
	Private _security_market_code As String
	
	Private _prospect_market_code As String
	
	Private _depth_measurement_unit As String
	
	Private _hole_size_measurement_unit As String
	
	Private _density_measurement_unit As String
	
	Private _temperature_measurement_unit As String
	
	Private _weight_measurement_unit As String
	
	Private _concentration_measurement_unit As String
	
	Private _currency_measurement_unit As String
	
	Private _perm_datum As String
	
	Private _driller_zero As String
	
	Private _wireline_zero As String
	
	Private _length_measurement_unit As String
	
	Private _dog_leg_severity As System.Nullable(Of Single)
	
	Private _distance_measurement_unit As String
	
	Private _aux_unit As String
	
	Private _remote_unit As String
	
	Private _rec_by As String
	
	Private _critical_job_flag As Boolean
	
	Private _job_approved_state As Byte
	
	Private _current_driller_depth As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Short)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub Onoilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onoilcomp_idChanged()
    End Sub
    Partial Private Sub Oncounty_idChanging(value As String)
    End Sub
    Partial Private Sub Oncounty_idChanged()
    End Sub
    Partial Private Sub OnlatChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlatChanged()
    End Sub
    Partial Private Sub OnlonChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlonChanged()
    End Sub
    Partial Private Sub OnrigChanging(value As String)
    End Sub
    Partial Private Sub OnrigChanged()
    End Sub
    Partial Private Sub OntruckChanging(value As String)
    End Sub
    Partial Private Sub OntruckChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub Ondistdo_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondistdo_idChanged()
    End Sub
    Partial Private Sub Ondistdo_nameChanging(value As String)
    End Sub
    Partial Private Sub Ondistdo_nameChanged()
    End Sub
    Partial Private Sub Onapprox_startChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onapprox_startChanged()
    End Sub
    Partial Private Sub Onapprox_endChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onapprox_endChanged()
    End Sub
    Partial Private Sub Onequipment_left_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_left_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_left_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_left_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_on_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_on_loc_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_on_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_on_loc_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_started_job_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_started_job_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_left_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_left_loc_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_left_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_left_loc_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_returned_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_returned_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_returned_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_returned_datetimeChanged()
    End Sub
    Partial Private Sub Onwireline_tdChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwireline_tdChanged()
    End Sub
    Partial Private Sub OnbhtChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnbhtChanged()
    End Sub
    Partial Private Sub Ondispatch_export_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondispatch_export_datetimeChanged()
    End Sub
    Partial Private Sub Ondispatch_exported_byChanging(value As String)
    End Sub
    Partial Private Sub Ondispatch_exported_byChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanging(value As String)
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanged()
    End Sub
    Partial Private Sub Ondata_read_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondata_read_datetimeChanged()
    End Sub
    Partial Private Sub Onsold_to_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_idChanged()
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanged()
    End Sub
    Partial Private Sub Onassets_on_job_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onassets_on_job_countChanged()
    End Sub
    Partial Private Sub Onunexported_quote_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onunexported_quote_countChanged()
    End Sub
    Partial Private Sub Ondisp_has_fso_in_finance_mode_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ondisp_has_fso_in_finance_mode_flagChanged()
    End Sub
    Partial Private Sub Onmax_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_pressureChanged()
    End Sub
    Partial Private Sub OndeviationChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OndeviationChanged()
    End Sub
    Partial Private Sub Onfluid_typeChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_typeChanged()
    End Sub
    Partial Private Sub Onfluid_weightChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_weightChanged()
    End Sub
    Partial Private Sub Onwellhead_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwellhead_pressureChanged()
    End Sub
    Partial Private Sub Ontrue_vertical_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontrue_vertical_depthChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    Partial Private Sub Onspec_reqChanging(value As String)
    End Sub
    Partial Private Sub Onspec_reqChanged()
    End Sub
    Partial Private Sub Onoperation_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onoperation_market_codeChanged()
    End Sub
    Partial Private Sub Onenvironment_market_codeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub Onenvironment_market_codeChanged()
    End Sub
    Partial Private Sub Onrig_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onrig_type_market_codeChanged()
    End Sub
    Partial Private Sub Onservice_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onservice_type_market_codeChanged()
    End Sub
    Partial Private Sub Onwell_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onwell_type_market_codeChanged()
    End Sub
    Partial Private Sub Onacquisition_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onacquisition_market_codeChanged()
    End Sub
    Partial Private Sub Onsecurity_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onsecurity_market_codeChanged()
    End Sub
    Partial Private Sub Onprospect_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onprospect_market_codeChanged()
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanged()
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanged()
    End Sub
    Partial Private Sub Ondensity_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondensity_measurement_unitChanged()
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanged()
    End Sub
    Partial Private Sub Onweight_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onweight_measurement_unitChanged()
    End Sub
    Partial Private Sub Onconcentration_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onconcentration_measurement_unitChanged()
    End Sub
    Partial Private Sub Oncurrency_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Oncurrency_measurement_unitChanged()
    End Sub
    Partial Private Sub Onperm_datumChanging(value As String)
    End Sub
    Partial Private Sub Onperm_datumChanged()
    End Sub
    Partial Private Sub Ondriller_zeroChanging(value As String)
    End Sub
    Partial Private Sub Ondriller_zeroChanged()
    End Sub
    Partial Private Sub Onwireline_zeroChanging(value As String)
    End Sub
    Partial Private Sub Onwireline_zeroChanged()
    End Sub
    Partial Private Sub Onlength_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onlength_measurement_unitChanged()
    End Sub
    Partial Private Sub Ondog_leg_severityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondog_leg_severityChanged()
    End Sub
    Partial Private Sub Ondistance_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondistance_measurement_unitChanged()
    End Sub
    Partial Private Sub Onaux_unitChanging(value As String)
    End Sub
    Partial Private Sub Onaux_unitChanged()
    End Sub
    Partial Private Sub Onremote_unitChanging(value As String)
    End Sub
    Partial Private Sub Onremote_unitChanged()
    End Sub
    Partial Private Sub Onrec_byChanging(value As String)
    End Sub
    Partial Private Sub Onrec_byChanged()
    End Sub
    Partial Private Sub Oncritical_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncritical_job_flagChanged()
    End Sub
    Partial Private Sub Onjob_approved_stateChanging(value As Byte)
    End Sub
    Partial Private Sub Onjob_approved_stateChanged()
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="smallint")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="char(40)", CanBeNull:=false)>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me.Onoilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._oilcomp_id = value
				Me.SendPropertyChanged("oilcomp_id")
				Me.Onoilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_id", DbType:="char(5)", CanBeNull:=false)>  _
	Public Property county_id() As String
		Get
			Return Me._county_id
		End Get
		Set
			If (String.Equals(Me._county_id, value) = false) Then
				Me.Oncounty_idChanging(value)
				Me.SendPropertyChanging
				Me._county_id = value
				Me.SendPropertyChanged("county_id")
				Me.Oncounty_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lat", DbType:="decimal(10,8)")>  _
	Public Property lat() As System.Nullable(Of Decimal)
		Get
			Return Me._lat
		End Get
		Set
			If (Me._lat.Equals(value) = false) Then
				Me.OnlatChanging(value)
				Me.SendPropertyChanging
				Me._lat = value
				Me.SendPropertyChanged("lat")
				Me.OnlatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lon", DbType:="decimal(11,8)")>  _
	Public Property lon() As System.Nullable(Of Decimal)
		Get
			Return Me._lon
		End Get
		Set
			If (Me._lon.Equals(value) = false) Then
				Me.OnlonChanging(value)
				Me.SendPropertyChanging
				Me._lon = value
				Me.SendPropertyChanged("lon")
				Me.OnlonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property rig() As String
		Get
			Return Me._rig
		End Get
		Set
			If (String.Equals(Me._rig, value) = false) Then
				Me.OnrigChanging(value)
				Me.SendPropertyChanging
				Me._rig = value
				Me.SendPropertyChanged("rig")
				Me.OnrigChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me.OntruckChanging(value)
				Me.SendPropertyChanging
				Me._truck = value
				Me.SendPropertyChanged("truck")
				Me.OntruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distdo_id", DbType:="int")>  _
	Public Property distdo_id() As System.Nullable(Of Integer)
		Get
			Return Me._distdo_id
		End Get
		Set
			If (Me._distdo_id.Equals(value) = false) Then
				Me.Ondistdo_idChanging(value)
				Me.SendPropertyChanging
				Me._distdo_id = value
				Me.SendPropertyChanged("distdo_id")
				Me.Ondistdo_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distdo_name", DbType:="char(40)", CanBeNull:=false)>  _
	Public Property distdo_name() As String
		Get
			Return Me._distdo_name
		End Get
		Set
			If (String.Equals(Me._distdo_name, value) = false) Then
				Me.Ondistdo_nameChanging(value)
				Me.SendPropertyChanging
				Me._distdo_name = value
				Me.SendPropertyChanged("distdo_name")
				Me.Ondistdo_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start", DbType:="smalldatetime")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me.Onapprox_startChanging(value)
				Me.SendPropertyChanging
				Me._approx_start = value
				Me.SendPropertyChanged("approx_start")
				Me.Onapprox_startChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_end", DbType:="datetime")>  _
	Public Property approx_end() As System.Nullable(Of Date)
		Get
			Return Me._approx_end
		End Get
		Set
			If (Me._approx_end.Equals(value) = false) Then
				Me.Onapprox_endChanging(value)
				Me.SendPropertyChanging
				Me._approx_end = value
				Me.SendPropertyChanged("approx_end")
				Me.Onapprox_endChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_left_datetime", DbType:="smalldatetime")>  _
	Public Property equipment_left_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_left_datetime
		End Get
		Set
			If (Me._equipment_left_datetime.Equals(value) = false) Then
				Me.Onequipment_left_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_left_datetime = value
				Me.SendPropertyChanged("equipment_left_datetime")
				Me.Onequipment_left_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_left_datetime", DbType:="smalldatetime")>  _
	Public Property crew_left_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_left_datetime
		End Get
		Set
			If (Me._crew_left_datetime.Equals(value) = false) Then
				Me.Oncrew_left_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_left_datetime = value
				Me.SendPropertyChanged("crew_left_datetime")
				Me.Oncrew_left_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_on_loc_datetime", DbType:="smalldatetime")>  _
	Public Property equipment_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_on_loc_datetime
		End Get
		Set
			If (Me._equipment_on_loc_datetime.Equals(value) = false) Then
				Me.Onequipment_on_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_on_loc_datetime = value
				Me.SendPropertyChanged("equipment_on_loc_datetime")
				Me.Onequipment_on_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_on_loc_datetime", DbType:="smalldatetime")>  _
	Public Property crew_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_on_loc_datetime
		End Get
		Set
			If (Me._crew_on_loc_datetime.Equals(value) = false) Then
				Me.Oncrew_on_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_on_loc_datetime = value
				Me.SendPropertyChanged("crew_on_loc_datetime")
				Me.Oncrew_on_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_started_job_datetime", DbType:="smalldatetime")>  _
	Public Property crew_started_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_started_job_datetime
		End Get
		Set
			If (Me._crew_started_job_datetime.Equals(value) = false) Then
				Me.Oncrew_started_job_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_started_job_datetime = value
				Me.SendPropertyChanged("crew_started_job_datetime")
				Me.Oncrew_started_job_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_finished_job_datetime", DbType:="smalldatetime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_finished_job_datetime
		End Get
		Set
			If (Me._crew_finished_job_datetime.Equals(value) = false) Then
				Me.Oncrew_finished_job_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_finished_job_datetime = value
				Me.SendPropertyChanged("crew_finished_job_datetime")
				Me.Oncrew_finished_job_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_left_loc_datetime", DbType:="smalldatetime")>  _
	Public Property equipment_left_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_left_loc_datetime
		End Get
		Set
			If (Me._equipment_left_loc_datetime.Equals(value) = false) Then
				Me.Onequipment_left_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_left_loc_datetime = value
				Me.SendPropertyChanged("equipment_left_loc_datetime")
				Me.Onequipment_left_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_left_loc_datetime", DbType:="smalldatetime")>  _
	Public Property crew_left_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_left_loc_datetime
		End Get
		Set
			If (Me._crew_left_loc_datetime.Equals(value) = false) Then
				Me.Oncrew_left_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_left_loc_datetime = value
				Me.SendPropertyChanged("crew_left_loc_datetime")
				Me.Oncrew_left_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_returned_datetime", DbType:="smalldatetime")>  _
	Public Property equipment_returned_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_returned_datetime
		End Get
		Set
			If (Me._equipment_returned_datetime.Equals(value) = false) Then
				Me.Onequipment_returned_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_returned_datetime = value
				Me.SendPropertyChanged("equipment_returned_datetime")
				Me.Onequipment_returned_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_returned_datetime", DbType:="smalldatetime")>  _
	Public Property crew_returned_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_returned_datetime
		End Get
		Set
			If (Me._crew_returned_datetime.Equals(value) = false) Then
				Me.Oncrew_returned_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_returned_datetime = value
				Me.SendPropertyChanged("crew_returned_datetime")
				Me.Oncrew_returned_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_td", DbType:="real")>  _
	Public Property wireline_td() As System.Nullable(Of Single)
		Get
			Return Me._wireline_td
		End Get
		Set
			If (Me._wireline_td.Equals(value) = false) Then
				Me.Onwireline_tdChanging(value)
				Me.SendPropertyChanging
				Me._wireline_td = value
				Me.SendPropertyChanged("wireline_td")
				Me.Onwireline_tdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bht", DbType:="real")>  _
	Public Property bht() As System.Nullable(Of Single)
		Get
			Return Me._bht
		End Get
		Set
			If (Me._bht.Equals(value) = false) Then
				Me.OnbhtChanging(value)
				Me.SendPropertyChanging
				Me._bht = value
				Me.SendPropertyChanged("bht")
				Me.OnbhtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_export_datetime", DbType:="smalldatetime")>  _
	Public Property dispatch_export_datetime() As System.Nullable(Of Date)
		Get
			Return Me._dispatch_export_datetime
		End Get
		Set
			If (Me._dispatch_export_datetime.Equals(value) = false) Then
				Me.Ondispatch_export_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_export_datetime = value
				Me.SendPropertyChanged("dispatch_export_datetime")
				Me.Ondispatch_export_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_exported_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property dispatch_exported_by() As String
		Get
			Return Me._dispatch_exported_by
		End Get
		Set
			If (String.Equals(Me._dispatch_exported_by, value) = false) Then
				Me.Ondispatch_exported_byChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_exported_by = value
				Me.SendPropertyChanged("dispatch_exported_by")
				Me.Ondispatch_exported_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="smalldatetime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me.Onlocked_for_edit_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_datetime = value
				Me.SendPropertyChanged("locked_for_edit_datetime")
				Me.Onlocked_for_edit_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me.Onlocked_for_edit_byChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_by = value
				Me.SendPropertyChanged("locked_for_edit_by")
				Me.Onlocked_for_edit_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_read_datetime", DbType:="smalldatetime")>  _
	Public Property data_read_datetime() As System.Nullable(Of Date)
		Get
			Return Me._data_read_datetime
		End Get
		Set
			If (Me._data_read_datetime.Equals(value) = false) Then
				Me.Ondata_read_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._data_read_datetime = value
				Me.SendPropertyChanged("data_read_datetime")
				Me.Ondata_read_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="int")>  _
	Public Property sold_to_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_id
		End Get
		Set
			If (Me._sold_to_id.Equals(value) = false) Then
				Me.Onsold_to_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_id = value
				Me.SendPropertyChanged("sold_to_id")
				Me.Onsold_to_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_address_rec_id", DbType:="int")>  _
	Public Property sold_to_address_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_address_rec_id
		End Get
		Set
			If (Me._sold_to_address_rec_id.Equals(value) = false) Then
				Me.Onsold_to_address_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_address_rec_id = value
				Me.SendPropertyChanged("sold_to_address_rec_id")
				Me.Onsold_to_address_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assets_on_job_count", DbType:="int")>  _
	Public Property assets_on_job_count() As System.Nullable(Of Integer)
		Get
			Return Me._assets_on_job_count
		End Get
		Set
			If (Me._assets_on_job_count.Equals(value) = false) Then
				Me.Onassets_on_job_countChanging(value)
				Me.SendPropertyChanging
				Me._assets_on_job_count = value
				Me.SendPropertyChanged("assets_on_job_count")
				Me.Onassets_on_job_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unexported_quote_count", DbType:="int")>  _
	Public Property unexported_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._unexported_quote_count
		End Get
		Set
			If (Me._unexported_quote_count.Equals(value) = false) Then
				Me.Onunexported_quote_countChanging(value)
				Me.SendPropertyChanging
				Me._unexported_quote_count = value
				Me.SendPropertyChanged("unexported_quote_count")
				Me.Onunexported_quote_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_has_fso_in_finance_mode_flag", DbType:="bit")>  _
	Public Property disp_has_fso_in_finance_mode_flag() As Boolean
		Get
			Return Me._disp_has_fso_in_finance_mode_flag
		End Get
		Set
			If ((Me._disp_has_fso_in_finance_mode_flag = value)  _
						= false) Then
				Me.Ondisp_has_fso_in_finance_mode_flagChanging(value)
				Me.SendPropertyChanging
				Me._disp_has_fso_in_finance_mode_flag = value
				Me.SendPropertyChanged("disp_has_fso_in_finance_mode_flag")
				Me.Ondisp_has_fso_in_finance_mode_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_pressure", DbType:="Real")>  _
	Public Property max_pressure() As System.Nullable(Of Single)
		Get
			Return Me._max_pressure
		End Get
		Set
			If (Me._max_pressure.Equals(value) = false) Then
				Me.Onmax_pressureChanging(value)
				Me.SendPropertyChanging
				Me._max_pressure = value
				Me.SendPropertyChanged("max_pressure")
				Me.Onmax_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deviation", DbType:="Real")>  _
	Public Property deviation() As System.Nullable(Of Single)
		Get
			Return Me._deviation
		End Get
		Set
			If (Me._deviation.Equals(value) = false) Then
				Me.OndeviationChanging(value)
				Me.SendPropertyChanging
				Me._deviation = value
				Me.SendPropertyChanged("deviation")
				Me.OndeviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_type", DbType:="VarChar(50)")>  _
	Public Property fluid_type() As String
		Get
			Return Me._fluid_type
		End Get
		Set
			If (String.Equals(Me._fluid_type, value) = false) Then
				Me.Onfluid_typeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_type = value
				Me.SendPropertyChanged("fluid_type")
				Me.Onfluid_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_weight", DbType:="Real")>  _
	Public Property fluid_weight() As System.Nullable(Of Single)
		Get
			Return Me._fluid_weight
		End Get
		Set
			If (Me._fluid_weight.Equals(value) = false) Then
				Me.Onfluid_weightChanging(value)
				Me.SendPropertyChanging
				Me._fluid_weight = value
				Me.SendPropertyChanged("fluid_weight")
				Me.Onfluid_weightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wellhead_pressure", DbType:="real")>  _
	Public Property wellhead_pressure() As System.Nullable(Of Single)
		Get
			Return Me._wellhead_pressure
		End Get
		Set
			If (Me._wellhead_pressure.Equals(value) = false) Then
				Me.Onwellhead_pressureChanging(value)
				Me.SendPropertyChanging
				Me._wellhead_pressure = value
				Me.SendPropertyChanged("wellhead_pressure")
				Me.Onwellhead_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_true_vertical_depth", DbType:="real")>  _
	Public Property true_vertical_depth() As System.Nullable(Of Single)
		Get
			Return Me._true_vertical_depth
		End Get
		Set
			If (Me._true_vertical_depth.Equals(value) = false) Then
				Me.Ontrue_vertical_depthChanging(value)
				Me.SendPropertyChanging
				Me._true_vertical_depth = value
				Me.SendPropertyChanged("true_vertical_depth")
				Me.Ontrue_vertical_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_spec_req", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property spec_req() As String
		Get
			Return Me._spec_req
		End Get
		Set
			If (String.Equals(Me._spec_req, value) = false) Then
				Me.Onspec_reqChanging(value)
				Me.SendPropertyChanging
				Me._spec_req = value
				Me.SendPropertyChanged("spec_req")
				Me.Onspec_reqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operation_market_code", DbType:="VarChar(50)")>  _
	Public Property operation_market_code() As String
		Get
			Return Me._operation_market_code
		End Get
		Set
			If (String.Equals(Me._operation_market_code, value) = false) Then
				Me.Onoperation_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._operation_market_code = value
				Me.SendPropertyChanged("operation_market_code")
				Me.Onoperation_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_environment_market_code", DbType:="smallint")>  _
	Public Property environment_market_code() As System.Nullable(Of Short)
		Get
			Return Me._environment_market_code
		End Get
		Set
			If (Me._environment_market_code.Equals(value) = false) Then
				Me.Onenvironment_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._environment_market_code = value
				Me.SendPropertyChanged("environment_market_code")
				Me.Onenvironment_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_type_market_code", DbType:="VarChar(50)")>  _
	Public Property rig_type_market_code() As String
		Get
			Return Me._rig_type_market_code
		End Get
		Set
			If (String.Equals(Me._rig_type_market_code, value) = false) Then
				Me.Onrig_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._rig_type_market_code = value
				Me.SendPropertyChanged("rig_type_market_code")
				Me.Onrig_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_type_market_code", DbType:="VarChar(50)")>  _
	Public Property service_type_market_code() As String
		Get
			Return Me._service_type_market_code
		End Get
		Set
			If (String.Equals(Me._service_type_market_code, value) = false) Then
				Me.Onservice_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._service_type_market_code = value
				Me.SendPropertyChanged("service_type_market_code")
				Me.Onservice_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_type_market_code", DbType:="VarChar(50)")>  _
	Public Property well_type_market_code() As String
		Get
			Return Me._well_type_market_code
		End Get
		Set
			If (String.Equals(Me._well_type_market_code, value) = false) Then
				Me.Onwell_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._well_type_market_code = value
				Me.SendPropertyChanged("well_type_market_code")
				Me.Onwell_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_market_code", DbType:="VarChar(50)")>  _
	Public Property acquisition_market_code() As String
		Get
			Return Me._acquisition_market_code
		End Get
		Set
			If (String.Equals(Me._acquisition_market_code, value) = false) Then
				Me.Onacquisition_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._acquisition_market_code = value
				Me.SendPropertyChanged("acquisition_market_code")
				Me.Onacquisition_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_security_market_code", DbType:="VarChar(50)")>  _
	Public Property security_market_code() As String
		Get
			Return Me._security_market_code
		End Get
		Set
			If (String.Equals(Me._security_market_code, value) = false) Then
				Me.Onsecurity_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._security_market_code = value
				Me.SendPropertyChanged("security_market_code")
				Me.Onsecurity_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_market_code", DbType:="VarChar(50)")>  _
	Public Property prospect_market_code() As String
		Get
			Return Me._prospect_market_code
		End Get
		Set
			If (String.Equals(Me._prospect_market_code, value) = false) Then
				Me.Onprospect_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._prospect_market_code = value
				Me.SendPropertyChanged("prospect_market_code")
				Me.Onprospect_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property depth_measurement_unit() As String
		Get
			Return Me._depth_measurement_unit
		End Get
		Set
			If (String.Equals(Me._depth_measurement_unit, value) = false) Then
				Me.Ondepth_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._depth_measurement_unit = value
				Me.SendPropertyChanged("depth_measurement_unit")
				Me.Ondepth_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hole_size_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property hole_size_measurement_unit() As String
		Get
			Return Me._hole_size_measurement_unit
		End Get
		Set
			If (String.Equals(Me._hole_size_measurement_unit, value) = false) Then
				Me.Onhole_size_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._hole_size_measurement_unit = value
				Me.SendPropertyChanged("hole_size_measurement_unit")
				Me.Onhole_size_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_density_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property density_measurement_unit() As String
		Get
			Return Me._density_measurement_unit
		End Get
		Set
			If (String.Equals(Me._density_measurement_unit, value) = false) Then
				Me.Ondensity_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._density_measurement_unit = value
				Me.SendPropertyChanged("density_measurement_unit")
				Me.Ondensity_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_temperature_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property temperature_measurement_unit() As String
		Get
			Return Me._temperature_measurement_unit
		End Get
		Set
			If (String.Equals(Me._temperature_measurement_unit, value) = false) Then
				Me.Ontemperature_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._temperature_measurement_unit = value
				Me.SendPropertyChanged("temperature_measurement_unit")
				Me.Ontemperature_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weight_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property weight_measurement_unit() As String
		Get
			Return Me._weight_measurement_unit
		End Get
		Set
			If (String.Equals(Me._weight_measurement_unit, value) = false) Then
				Me.Onweight_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._weight_measurement_unit = value
				Me.SendPropertyChanged("weight_measurement_unit")
				Me.Onweight_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_concentration_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property concentration_measurement_unit() As String
		Get
			Return Me._concentration_measurement_unit
		End Get
		Set
			If (String.Equals(Me._concentration_measurement_unit, value) = false) Then
				Me.Onconcentration_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._concentration_measurement_unit = value
				Me.SendPropertyChanged("concentration_measurement_unit")
				Me.Onconcentration_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property currency_measurement_unit() As String
		Get
			Return Me._currency_measurement_unit
		End Get
		Set
			If (String.Equals(Me._currency_measurement_unit, value) = false) Then
				Me.Oncurrency_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._currency_measurement_unit = value
				Me.SendPropertyChanged("currency_measurement_unit")
				Me.Oncurrency_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perm_datum", DbType:="VarChar(50)")>  _
	Public Property perm_datum() As String
		Get
			Return Me._perm_datum
		End Get
		Set
			If (String.Equals(Me._perm_datum, value) = false) Then
				Me.Onperm_datumChanging(value)
				Me.SendPropertyChanging
				Me._perm_datum = value
				Me.SendPropertyChanged("perm_datum")
				Me.Onperm_datumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_driller_zero", DbType:="VarChar(50)")>  _
	Public Property driller_zero() As String
		Get
			Return Me._driller_zero
		End Get
		Set
			If (String.Equals(Me._driller_zero, value) = false) Then
				Me.Ondriller_zeroChanging(value)
				Me.SendPropertyChanging
				Me._driller_zero = value
				Me.SendPropertyChanged("driller_zero")
				Me.Ondriller_zeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_zero", DbType:="VarChar(50)")>  _
	Public Property wireline_zero() As String
		Get
			Return Me._wireline_zero
		End Get
		Set
			If (String.Equals(Me._wireline_zero, value) = false) Then
				Me.Onwireline_zeroChanging(value)
				Me.SendPropertyChanging
				Me._wireline_zero = value
				Me.SendPropertyChanged("wireline_zero")
				Me.Onwireline_zeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_length_measurement_unit", DbType:="varchar(10)")>  _
	Public Property length_measurement_unit() As String
		Get
			Return Me._length_measurement_unit
		End Get
		Set
			If (String.Equals(Me._length_measurement_unit, value) = false) Then
				Me.Onlength_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._length_measurement_unit = value
				Me.SendPropertyChanged("length_measurement_unit")
				Me.Onlength_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dog_leg_severity", DbType:="real")>  _
	Public Property dog_leg_severity() As System.Nullable(Of Single)
		Get
			Return Me._dog_leg_severity
		End Get
		Set
			If (Me._dog_leg_severity.Equals(value) = false) Then
				Me.Ondog_leg_severityChanging(value)
				Me.SendPropertyChanging
				Me._dog_leg_severity = value
				Me.SendPropertyChanged("dog_leg_severity")
				Me.Ondog_leg_severityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distance_measurement_unit", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property distance_measurement_unit() As String
		Get
			Return Me._distance_measurement_unit
		End Get
		Set
			If (String.Equals(Me._distance_measurement_unit, value) = false) Then
				Me.Ondistance_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._distance_measurement_unit = value
				Me.SendPropertyChanged("distance_measurement_unit")
				Me.Ondistance_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit", CanBeNull:=false)>  _
	Public Property aux_unit() As String
		Get
			Return Me._aux_unit
		End Get
		Set
			If (String.Equals(Me._aux_unit, value) = false) Then
				Me.Onaux_unitChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit = value
				Me.SendPropertyChanged("aux_unit")
				Me.Onaux_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remote_unit", CanBeNull:=false)>  _
	Public Property remote_unit() As String
		Get
			Return Me._remote_unit
		End Get
		Set
			If (String.Equals(Me._remote_unit, value) = false) Then
				Me.Onremote_unitChanging(value)
				Me.SendPropertyChanging
				Me._remote_unit = value
				Me.SendPropertyChanged("remote_unit")
				Me.Onremote_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_by", CanBeNull:=false)>  _
	Public Property rec_by() As String
		Get
			Return Me._rec_by
		End Get
		Set
			If (String.Equals(Me._rec_by, value) = false) Then
				Me.Onrec_byChanging(value)
				Me.SendPropertyChanging
				Me._rec_by = value
				Me.SendPropertyChanged("rec_by")
				Me.Onrec_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_critical_job_flag", DbType:="bit")>  _
	Public Property critical_job_flag() As Boolean
		Get
			Return Me._critical_job_flag
		End Get
		Set
			If ((Me._critical_job_flag = value)  _
						= false) Then
				Me.Oncritical_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._critical_job_flag = value
				Me.SendPropertyChanged("critical_job_flag")
				Me.Oncritical_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_approved_state", DbType:="tinyint")>  _
	Public Property job_approved_state() As Byte
		Get
			Return Me._job_approved_state
		End Get
		Set
			If ((Me._job_approved_state = value)  _
						= false) Then
				Me.Onjob_approved_stateChanging(value)
				Me.SendPropertyChanging
				Me._job_approved_state = value
				Me.SendPropertyChanged("job_approved_state")
				Me.Onjob_approved_stateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_driller_depth", DbType:="real")>  _
	Public Property current_driller_depth() As System.Nullable(Of Single)
		Get
			Return Me._current_driller_depth
		End Get
		Set
			If (Me._current_driller_depth.Equals(value) = false) Then
				Me.Oncurrent_driller_depthChanging(value)
				Me.SendPropertyChanging
				Me._current_driller_depth = value
				Me.SendPropertyChanged("current_driller_depth")
				Me.Oncurrent_driller_depthChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.prdisp_asset_order_item")>  _
Partial Public Class disp_asset_order_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _series_id As String
	
	Private _asset_id As String
	
	Private _material_number As String
	
	Private _material_quantity As System.Nullable(Of Integer)
	
	Private _configuration As String
	
	Private _lift_asset As String
	
	Private _comments As String
	
	Private _item_row_number As Integer
	
	Private _description As String
	
	Private _material_rec_id As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onmaterial_numberChanging(value As String)
    End Sub
    Partial Private Sub Onmaterial_numberChanged()
    End Sub
    Partial Private Sub Onmaterial_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmaterial_quantityChanged()
    End Sub
    Partial Private Sub OnconfigurationChanging(value As String)
    End Sub
    Partial Private Sub OnconfigurationChanged()
    End Sub
    Partial Private Sub Onlift_assetChanging(value As String)
    End Sub
    Partial Private Sub Onlift_assetChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    Partial Private Sub Onrow_numberChanging(value As Integer)
    End Sub
    Partial Private Sub Onrow_numberChanged()
    End Sub
    Partial Private Sub Onitem_descChanging(value As String)
    End Sub
    Partial Private Sub Onitem_descChanged()
    End Sub
    Partial Private Sub Onmaterial_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmaterial_rec_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_number", DbType:="VarChar(15)")>  _
	Public Property material_number() As String
		Get
			Return Me._material_number
		End Get
		Set
			If (String.Equals(Me._material_number, value) = false) Then
				Me.Onmaterial_numberChanging(value)
				Me.SendPropertyChanging
				Me._material_number = value
				Me.SendPropertyChanged("material_number")
				Me.Onmaterial_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_quantity", DbType:="Int")>  _
	Public Property material_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._material_quantity
		End Get
		Set
			If (Me._material_quantity.Equals(value) = false) Then
				Me.Onmaterial_quantityChanging(value)
				Me.SendPropertyChanging
				Me._material_quantity = value
				Me.SendPropertyChanged("material_quantity")
				Me.Onmaterial_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_configuration", DbType:="VarChar(20)")>  _
	Public Property configuration() As String
		Get
			Return Me._configuration
		End Get
		Set
			If (String.Equals(Me._configuration, value) = false) Then
				Me.OnconfigurationChanging(value)
				Me.SendPropertyChanging
				Me._configuration = value
				Me.SendPropertyChanged("configuration")
				Me.OnconfigurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lift_asset", DbType:="VarChar(20)")>  _
	Public Property lift_asset() As String
		Get
			Return Me._lift_asset
		End Get
		Set
			If (String.Equals(Me._lift_asset, value) = false) Then
				Me.Onlift_assetChanging(value)
				Me.SendPropertyChanging
				Me._lift_asset = value
				Me.SendPropertyChanged("lift_asset")
				Me.Onlift_assetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="VarChar(500)")>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_row_number", DbType:="Int NOT NULL")>  _
	Public Property row_number() As Integer
		Get
			Return Me._item_row_number
		End Get
		Set
			If ((Me._item_row_number = value)  _
						= false) Then
				Me.Onrow_numberChanging(value)
				Me.SendPropertyChanging
				Me._item_row_number = value
				Me.SendPropertyChanged("row_number")
				Me.Onrow_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", CanBeNull:=false)>  _
	Public Property item_desc() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.Onitem_descChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("item_desc")
				Me.Onitem_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_rec_id", DbType:="int")>  _
	Public Property material_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._material_rec_id
		End Get
		Set
			If (Me._material_rec_id.Equals(value) = false) Then
				Me.Onmaterial_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._material_rec_id = value
				Me.SendPropertyChanged("material_rec_id")
				Me.Onmaterial_rec_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asset_order_material")>  _
Partial Public Class asset_order_material
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _material_number As String
	
	Private _asset_series_id As String
	
	Private _description As String
	
	Private _comments As String
	
	Private _series_desc As String
	
	Private _applicable_series_ids As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onmaterial_numberChanging(value As String)
    End Sub
    Partial Private Sub Onmaterial_numberChanged()
    End Sub
    Partial Private Sub Onmaterial_series_idChanging(value As String)
    End Sub
    Partial Private Sub Onmaterial_series_idChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    Partial Private Sub Onmaterial_series_descChanging(value As String)
    End Sub
    Partial Private Sub Onmaterial_series_descChanged()
    End Sub
    Partial Private Sub Onapplicable_series_idsChanging(value As String)
    End Sub
    Partial Private Sub Onapplicable_series_idsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_number", DbType:="VarChar(15)")>  _
	Public Property material_number() As String
		Get
			Return Me._material_number
		End Get
		Set
			If (String.Equals(Me._material_number, value) = false) Then
				Me.Onmaterial_numberChanging(value)
				Me.SendPropertyChanging
				Me._material_number = value
				Me.SendPropertyChanged("material_number")
				Me.Onmaterial_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_series_id", DbType:="VarChar(30)")>  _
	Public Property material_series_id() As String
		Get
			Return Me._asset_series_id
		End Get
		Set
			If (String.Equals(Me._asset_series_id, value) = false) Then
				Me.Onmaterial_series_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_series_id = value
				Me.SendPropertyChanged("material_series_id")
				Me.Onmaterial_series_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(50)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="VarChar(50)")>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", CanBeNull:=false)>  _
	Public Property material_series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me.Onmaterial_series_descChanging(value)
				Me.SendPropertyChanging
				Me._series_desc = value
				Me.SendPropertyChanged("material_series_desc")
				Me.Onmaterial_series_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_applicable_series_ids", CanBeNull:=false)>  _
	Public Property applicable_series_ids() As String
		Get
			Return Me._applicable_series_ids
		End Get
		Set
			If (String.Equals(Me._applicable_series_ids, value) = false) Then
				Me.Onapplicable_series_idsChanging(value)
				Me.SendPropertyChanging
				Me._applicable_series_ids = value
				Me.SendPropertyChanged("applicable_series_ids")
				Me.Onapplicable_series_idsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_asset_order")>  _
Partial Public Class disp_asset_order
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _destination As String
	
	Private _field_service_coordinator As String
	
	Private _equipment_coordinator As String
	
	Private _well_inner_diameter As String
	
	Private _well_outer_diameter As String
	
	Private _min_restriction As String
	
	Private _loadout_datetime As System.Nullable(Of Date)
	
	Private _additional_info As String
	
	Private _created_datetime As System.Nullable(Of Date)
	
	Private _well_name As String
	
	Private _wireline_td As System.Nullable(Of Single)
	
	Private _bht As System.Nullable(Of Single)
	
	Private _fluid_type As String
	
	Private _deviation As System.Nullable(Of Single)
	
	Private _wellhead_pressure As System.Nullable(Of Single)
	
	Private _max_pressure As System.Nullable(Of Single)
	
	Private _company_name As String
	
	Private _plant_id As String
	
	Private _loadout_status As System.Nullable(Of Integer)
	
	Private _asset_order_exists_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OndestinationChanging(value As String)
    End Sub
    Partial Private Sub OndestinationChanged()
    End Sub
    Partial Private Sub Onfield_service_coordinatorChanging(value As String)
    End Sub
    Partial Private Sub Onfield_service_coordinatorChanged()
    End Sub
    Partial Private Sub Onequipment_coordinatorChanging(value As String)
    End Sub
    Partial Private Sub Onequipment_coordinatorChanged()
    End Sub
    Partial Private Sub Onwell_inner_diameterChanging(value As String)
    End Sub
    Partial Private Sub Onwell_inner_diameterChanged()
    End Sub
    Partial Private Sub Onwell_outer_diameterChanging(value As String)
    End Sub
    Partial Private Sub Onwell_outer_diameterChanged()
    End Sub
    Partial Private Sub Onmin_restrictionChanging(value As String)
    End Sub
    Partial Private Sub Onmin_restrictionChanged()
    End Sub
    Partial Private Sub Onloadout_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onloadout_datetimeChanged()
    End Sub
    Partial Private Sub Onadditional_infoChanging(value As String)
    End Sub
    Partial Private Sub Onadditional_infoChanged()
    End Sub
    Partial Private Sub Oncreated_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreated_datetimeChanged()
    End Sub
    Partial Private Sub Onwell_nameChanging(value As String)
    End Sub
    Partial Private Sub Onwell_nameChanged()
    End Sub
    Partial Private Sub Onwireline_tdChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwireline_tdChanged()
    End Sub
    Partial Private Sub OnbhtChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnbhtChanged()
    End Sub
    Partial Private Sub Onfluid_typeChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_typeChanged()
    End Sub
    Partial Private Sub OndeviationChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OndeviationChanged()
    End Sub
    Partial Private Sub Onwellhead_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwellhead_pressureChanged()
    End Sub
    Partial Private Sub Onmax_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_pressureChanged()
    End Sub
    Partial Private Sub Oncompany_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncompany_nameChanged()
    End Sub
    Partial Private Sub Onplant_idChanging(value As String)
    End Sub
    Partial Private Sub Onplant_idChanged()
    End Sub
    Partial Private Sub Onloadout_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onloadout_statusChanged()
    End Sub
    Partial Private Sub Onasset_order_exists_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_order_exists_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_destination", DbType:="VarChar(100)")>  _
	Public Property destination() As String
		Get
			Return Me._destination
		End Get
		Set
			If (String.Equals(Me._destination, value) = false) Then
				Me.OndestinationChanging(value)
				Me.SendPropertyChanging
				Me._destination = value
				Me.SendPropertyChanged("destination")
				Me.OndestinationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_service_coordinator", DbType:="VarChar(20)")>  _
	Public Property field_service_coordinator() As String
		Get
			Return Me._field_service_coordinator
		End Get
		Set
			If (String.Equals(Me._field_service_coordinator, value) = false) Then
				Me.Onfield_service_coordinatorChanging(value)
				Me.SendPropertyChanging
				Me._field_service_coordinator = value
				Me.SendPropertyChanged("field_service_coordinator")
				Me.Onfield_service_coordinatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_coordinator", DbType:="VarChar(20)")>  _
	Public Property equipment_coordinator() As String
		Get
			Return Me._equipment_coordinator
		End Get
		Set
			If (String.Equals(Me._equipment_coordinator, value) = false) Then
				Me.Onequipment_coordinatorChanging(value)
				Me.SendPropertyChanging
				Me._equipment_coordinator = value
				Me.SendPropertyChanged("equipment_coordinator")
				Me.Onequipment_coordinatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_inner_diameter", DbType:="VarChar(15)")>  _
	Public Property well_inner_diameter() As String
		Get
			Return Me._well_inner_diameter
		End Get
		Set
			If (String.Equals(Me._well_inner_diameter, value) = false) Then
				Me.Onwell_inner_diameterChanging(value)
				Me.SendPropertyChanging
				Me._well_inner_diameter = value
				Me.SendPropertyChanged("well_inner_diameter")
				Me.Onwell_inner_diameterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_outer_diameter", DbType:="VarChar(15)")>  _
	Public Property well_outer_diameter() As String
		Get
			Return Me._well_outer_diameter
		End Get
		Set
			If (String.Equals(Me._well_outer_diameter, value) = false) Then
				Me.Onwell_outer_diameterChanging(value)
				Me.SendPropertyChanging
				Me._well_outer_diameter = value
				Me.SendPropertyChanged("well_outer_diameter")
				Me.Onwell_outer_diameterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_restriction", DbType:="VarChar(15)")>  _
	Public Property min_restriction() As String
		Get
			Return Me._min_restriction
		End Get
		Set
			If (String.Equals(Me._min_restriction, value) = false) Then
				Me.Onmin_restrictionChanging(value)
				Me.SendPropertyChanging
				Me._min_restriction = value
				Me.SendPropertyChanged("min_restriction")
				Me.Onmin_restrictionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_datetime", DbType:="SmallDateTime")>  _
	Public Property loadout_datetime() As System.Nullable(Of Date)
		Get
			Return Me._loadout_datetime
		End Get
		Set
			If (Me._loadout_datetime.Equals(value) = false) Then
				Me.Onloadout_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._loadout_datetime = value
				Me.SendPropertyChanged("loadout_datetime")
				Me.Onloadout_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_info", DbType:="VarChar(500)")>  _
	Public Property additional_info() As String
		Get
			Return Me._additional_info
		End Get
		Set
			If (String.Equals(Me._additional_info, value) = false) Then
				Me.Onadditional_infoChanging(value)
				Me.SendPropertyChanging
				Me._additional_info = value
				Me.SendPropertyChanged("additional_info")
				Me.Onadditional_infoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_datetime", DbType:="SmallDateTime")>  _
	Public Property created_datetime() As System.Nullable(Of Date)
		Get
			Return Me._created_datetime
		End Get
		Set
			If (Me._created_datetime.Equals(value) = false) Then
				Me.Oncreated_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._created_datetime = value
				Me.SendPropertyChanged("created_datetime")
				Me.Oncreated_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(100)", CanBeNull:=false)>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me.Onwell_nameChanging(value)
				Me.SendPropertyChanging
				Me._well_name = value
				Me.SendPropertyChanged("well_name")
				Me.Onwell_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_td")>  _
	Public Property wireline_td() As System.Nullable(Of Single)
		Get
			Return Me._wireline_td
		End Get
		Set
			If (Me._wireline_td.Equals(value) = false) Then
				Me.Onwireline_tdChanging(value)
				Me.SendPropertyChanging
				Me._wireline_td = value
				Me.SendPropertyChanged("wireline_td")
				Me.Onwireline_tdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bht")>  _
	Public Property bht() As System.Nullable(Of Single)
		Get
			Return Me._bht
		End Get
		Set
			If (Me._bht.Equals(value) = false) Then
				Me.OnbhtChanging(value)
				Me.SendPropertyChanging
				Me._bht = value
				Me.SendPropertyChanged("bht")
				Me.OnbhtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_type", DbType:="VarChar(100)", CanBeNull:=false)>  _
	Public Property fluid_type() As String
		Get
			Return Me._fluid_type
		End Get
		Set
			If (String.Equals(Me._fluid_type, value) = false) Then
				Me.Onfluid_typeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_type = value
				Me.SendPropertyChanged("fluid_type")
				Me.Onfluid_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deviation")>  _
	Public Property deviation() As System.Nullable(Of Single)
		Get
			Return Me._deviation
		End Get
		Set
			If (Me._deviation.Equals(value) = false) Then
				Me.OndeviationChanging(value)
				Me.SendPropertyChanging
				Me._deviation = value
				Me.SendPropertyChanged("deviation")
				Me.OndeviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wellhead_pressure")>  _
	Public Property wellhead_pressure() As System.Nullable(Of Single)
		Get
			Return Me._wellhead_pressure
		End Get
		Set
			If (Me._wellhead_pressure.Equals(value) = false) Then
				Me.Onwellhead_pressureChanging(value)
				Me.SendPropertyChanging
				Me._wellhead_pressure = value
				Me.SendPropertyChanged("wellhead_pressure")
				Me.Onwellhead_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_pressure")>  _
	Public Property max_pressure() As System.Nullable(Of Single)
		Get
			Return Me._max_pressure
		End Get
		Set
			If (Me._max_pressure.Equals(value) = false) Then
				Me.Onmax_pressureChanging(value)
				Me.SendPropertyChanging
				Me._max_pressure = value
				Me.SendPropertyChanged("max_pressure")
				Me.Onmax_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", DbType:="VarChar(100)", CanBeNull:=false)>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me.Oncompany_nameChanging(value)
				Me.SendPropertyChanging
				Me._company_name = value
				Me.SendPropertyChanged("company_name")
				Me.Oncompany_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="varchar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me.Onplant_idChanging(value)
				Me.SendPropertyChanging
				Me._plant_id = value
				Me.SendPropertyChanged("plant_id")
				Me.Onplant_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_status")>  _
	Public Property loadout_status() As System.Nullable(Of Integer)
		Get
			Return Me._loadout_status
		End Get
		Set
			If (Me._loadout_status.Equals(value) = false) Then
				Me.Onloadout_statusChanging(value)
				Me.SendPropertyChanging
				Me._loadout_status = value
				Me.SendPropertyChanged("loadout_status")
				Me.Onloadout_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_order_exists_flag", DbType:="bit")>  _
	Public Property asset_order_exists_flag() As Boolean
		Get
			Return Me._asset_order_exists_flag
		End Get
		Set
			If ((Me._asset_order_exists_flag = value)  _
						= false) Then
				Me.Onasset_order_exists_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_order_exists_flag = value
				Me.SendPropertyChanged("asset_order_exists_flag")
				Me.Onasset_order_exists_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class asset_order_template_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _template_id As Integer
	
	Private _series_id As String
	
	Private _material_number As String
	
	Private _material_quantity As System.Nullable(Of Integer)
	
	Private _configuration As String
	
	Private _row_number As Integer
	
	Private _item_desc As String
	
	Private _material_rec_id As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ontemplate_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontemplate_rec_idChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Onmaterial_numberChanging(value As String)
    End Sub
    Partial Private Sub Onmaterial_numberChanged()
    End Sub
    Partial Private Sub Onmaterial_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmaterial_quantityChanged()
    End Sub
    Partial Private Sub OnconfigurationChanging(value As String)
    End Sub
    Partial Private Sub OnconfigurationChanged()
    End Sub
    Partial Private Sub Onrow_numberChanging(value As Integer)
    End Sub
    Partial Private Sub Onrow_numberChanged()
    End Sub
    Partial Private Sub Onitem_descChanging(value As String)
    End Sub
    Partial Private Sub Onitem_descChanged()
    End Sub
    Partial Private Sub Onmaterial_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmaterial_rec_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_id", DbType:="int NOT NULL")>  _
	Public Property template_rec_id() As Integer
		Get
			Return Me._template_id
		End Get
		Set
			If ((Me._template_id = value)  _
						= false) Then
				Me.Ontemplate_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._template_id = value
				Me.SendPropertyChanged("template_rec_id")
				Me.Ontemplate_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30)")>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_number", DbType:="VarChar(15)")>  _
	Public Property material_number() As String
		Get
			Return Me._material_number
		End Get
		Set
			If (String.Equals(Me._material_number, value) = false) Then
				Me.Onmaterial_numberChanging(value)
				Me.SendPropertyChanging
				Me._material_number = value
				Me.SendPropertyChanged("material_number")
				Me.Onmaterial_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_quantity", DbType:="Int")>  _
	Public Property material_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._material_quantity
		End Get
		Set
			If (Me._material_quantity.Equals(value) = false) Then
				Me.Onmaterial_quantityChanging(value)
				Me.SendPropertyChanging
				Me._material_quantity = value
				Me.SendPropertyChanged("material_quantity")
				Me.Onmaterial_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_configuration", DbType:="VarChar(20)")>  _
	Public Property configuration() As String
		Get
			Return Me._configuration
		End Get
		Set
			If (String.Equals(Me._configuration, value) = false) Then
				Me.OnconfigurationChanging(value)
				Me.SendPropertyChanging
				Me._configuration = value
				Me.SendPropertyChanged("configuration")
				Me.OnconfigurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int NOT NULL")>  _
	Public Property row_number() As Integer
		Get
			Return Me._row_number
		End Get
		Set
			If ((Me._row_number = value)  _
						= false) Then
				Me.Onrow_numberChanging(value)
				Me.SendPropertyChanging
				Me._row_number = value
				Me.SendPropertyChanged("row_number")
				Me.Onrow_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_desc", CanBeNull:=false)>  _
	Public Property item_desc() As String
		Get
			Return Me._item_desc
		End Get
		Set
			If (String.Equals(Me._item_desc, value) = false) Then
				Me.Onitem_descChanging(value)
				Me.SendPropertyChanging
				Me._item_desc = value
				Me.SendPropertyChanged("item_desc")
				Me.Onitem_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_rec_id", DbType:="int")>  _
	Public Property material_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._material_rec_id
		End Get
		Set
			If (Me._material_rec_id.Equals(value) = false) Then
				Me.Onmaterial_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._material_rec_id = value
				Me.SendPropertyChanged("material_rec_id")
				Me.Onmaterial_rec_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asset_order_template")>  _
Partial Public Class asset_order_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _template_id As String
	
	Private _template_created_by As String
	
	Private _template_description As String
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Private _country_code As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontemplate_idChanging(value As String)
    End Sub
    Partial Private Sub Ontemplate_idChanged()
    End Sub
    Partial Private Sub Ontemplate_created_byChanging(value As String)
    End Sub
    Partial Private Sub Ontemplate_created_byChanged()
    End Sub
    Partial Private Sub Ontemplate_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Ontemplate_descriptionChanged()
    End Sub
    Partial Private Sub Onrec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Oncountry_codeChanging(value As String)
    End Sub
    Partial Private Sub Oncountry_codeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_id", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property template_id() As String
		Get
			Return Me._template_id
		End Get
		Set
			If (String.Equals(Me._template_id, value) = false) Then
				Me.Ontemplate_idChanging(value)
				Me.SendPropertyChanging
				Me._template_id = value
				Me.SendPropertyChanged("template_id")
				Me.Ontemplate_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_created_by", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property template_created_by() As String
		Get
			Return Me._template_created_by
		End Get
		Set
			If (String.Equals(Me._template_created_by, value) = false) Then
				Me.Ontemplate_created_byChanging(value)
				Me.SendPropertyChanging
				Me._template_created_by = value
				Me.SendPropertyChanged("template_created_by")
				Me.Ontemplate_created_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_description", DbType:="VarChar(250)")>  _
	Public Property template_description() As String
		Get
			Return Me._template_description
		End Get
		Set
			If (String.Equals(Me._template_description, value) = false) Then
				Me.Ontemplate_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._template_description = value
				Me.SendPropertyChanged("template_description")
				Me.Ontemplate_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", DbType:="char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me.Oncountry_codeChanging(value)
				Me.SendPropertyChanging
				Me._country_code = value
				Me.SendPropertyChanged("country_code")
				Me.Oncountry_codeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class quote_summary_report_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _quote_number As String
	
	Private _comment As String
	
	Private _header_comment As String
	
	Private _include_in_quote_summary_report_total_flag As Boolean
	
	Private _print_quote_flag As Boolean
	
	Private _oilcomp_id As String
	
	Private _sold_to_id As System.Nullable(Of Integer)
	
	Private _sold_to_address_rec_id As System.Nullable(Of Integer)
	
	Private _quote_print_order As Integer
	
	Private _quote_net_amount As Decimal
	
	Private _sold_to_name As String
	
	Private _price_schedule_id As String
	
	Private _currency As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onquote_numberChanging(value As String)
    End Sub
    Partial Private Sub Onquote_numberChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Onheader_commentChanging(value As String)
    End Sub
    Partial Private Sub Onheader_commentChanged()
    End Sub
    Partial Private Sub Oninclude_in_quote_summary_report_total_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninclude_in_quote_summary_report_total_flagChanged()
    End Sub
    Partial Private Sub Onprint_quote_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onprint_quote_flagChanged()
    End Sub
    Partial Private Sub Onoilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onoilcomp_idChanged()
    End Sub
    Partial Private Sub Onsold_to_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_idChanged()
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsold_to_address_rec_idChanged()
    End Sub
    Partial Private Sub Onquote_print_orderChanging(value As Integer)
    End Sub
    Partial Private Sub Onquote_print_orderChanged()
    End Sub
    Partial Private Sub Onquote_net_amountChanging(value As Decimal)
    End Sub
    Partial Private Sub Onquote_net_amountChanged()
    End Sub
    Partial Private Sub Onsold_to_nameChanging(value As String)
    End Sub
    Partial Private Sub Onsold_to_nameChanged()
    End Sub
    Partial Private Sub Onprice_schedule_idChanging(value As String)
    End Sub
    Partial Private Sub Onprice_schedule_idChanged()
    End Sub
    Partial Private Sub OncurrencyChanging(value As String)
    End Sub
    Partial Private Sub OncurrencyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property quote_number() As String
		Get
			Return Me._quote_number
		End Get
		Set
			If (String.Equals(Me._quote_number, value) = false) Then
				Me.Onquote_numberChanging(value)
				Me.SendPropertyChanging
				Me._quote_number = value
				Me.SendPropertyChanged("quote_number")
				Me.Onquote_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="varchar(2500)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_header_comment", DbType:="varchar(100)")>  _
	Public Property header_comment() As String
		Get
			Return Me._header_comment
		End Get
		Set
			If (String.Equals(Me._header_comment, value) = false) Then
				Me.Onheader_commentChanging(value)
				Me.SendPropertyChanging
				Me._header_comment = value
				Me.SendPropertyChanged("header_comment")
				Me.Onheader_commentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_include_in_quote_summary_report_total_flag", DbType:="bit")>  _
	Public Property include_in_quote_summary_report_total_flag() As Boolean
		Get
			Return Me._include_in_quote_summary_report_total_flag
		End Get
		Set
			If ((Me._include_in_quote_summary_report_total_flag = value)  _
						= false) Then
				Me.Oninclude_in_quote_summary_report_total_flagChanging(value)
				Me.SendPropertyChanging
				Me._include_in_quote_summary_report_total_flag = value
				Me.SendPropertyChanged("include_in_quote_summary_report_total_flag")
				Me.Oninclude_in_quote_summary_report_total_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_print_quote_flag", DbType:="bit")>  _
	Public Property print_quote_flag() As Boolean
		Get
			Return Me._print_quote_flag
		End Get
		Set
			If ((Me._print_quote_flag = value)  _
						= false) Then
				Me.Onprint_quote_flagChanging(value)
				Me.SendPropertyChanging
				Me._print_quote_flag = value
				Me.SendPropertyChanged("print_quote_flag")
				Me.Onprint_quote_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="char(40)", CanBeNull:=false)>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me.Onoilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._oilcomp_id = value
				Me.SendPropertyChanged("oilcomp_id")
				Me.Onoilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="int")>  _
	Public Property sold_to_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_id
		End Get
		Set
			If (Me._sold_to_id.Equals(value) = false) Then
				Me.Onsold_to_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_id = value
				Me.SendPropertyChanged("sold_to_id")
				Me.Onsold_to_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_address_rec_id", DbType:="int")>  _
	Public Property sold_to_address_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_address_rec_id
		End Get
		Set
			If (Me._sold_to_address_rec_id.Equals(value) = false) Then
				Me.Onsold_to_address_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_address_rec_id = value
				Me.SendPropertyChanged("sold_to_address_rec_id")
				Me.Onsold_to_address_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_print_order", DbType:="int")>  _
	Public Property quote_print_order() As Integer
		Get
			Return Me._quote_print_order
		End Get
		Set
			If ((Me._quote_print_order = value)  _
						= false) Then
				Me.Onquote_print_orderChanging(value)
				Me.SendPropertyChanging
				Me._quote_print_order = value
				Me.SendPropertyChanged("quote_print_order")
				Me.Onquote_print_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_net_amount", DbType:="decimal(10,2)")>  _
	Public Property quote_net_amount() As Decimal
		Get
			Return Me._quote_net_amount
		End Get
		Set
			If ((Me._quote_net_amount = value)  _
						= false) Then
				Me.Onquote_net_amountChanging(value)
				Me.SendPropertyChanging
				Me._quote_net_amount = value
				Me.SendPropertyChanged("quote_net_amount")
				Me.Onquote_net_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_name", DbType:="varchar(80)")>  _
	Public Property sold_to_name() As String
		Get
			Return Me._sold_to_name
		End Get
		Set
			If (String.Equals(Me._sold_to_name, value) = false) Then
				Me.Onsold_to_nameChanging(value)
				Me.SendPropertyChanging
				Me._sold_to_name = value
				Me.SendPropertyChanged("sold_to_name")
				Me.Onsold_to_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_schedule_id", CanBeNull:=false)>  _
	Public Property price_schedule_id() As String
		Get
			Return Me._price_schedule_id
		End Get
		Set
			If (String.Equals(Me._price_schedule_id, value) = false) Then
				Me.Onprice_schedule_idChanging(value)
				Me.SendPropertyChanging
				Me._price_schedule_id = value
				Me.SendPropertyChanged("price_schedule_id")
				Me.Onprice_schedule_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property currency() As String
		Get
			Return Me._currency
		End Get
		Set
			If (String.Equals(Me._currency, value) = false) Then
				Me.OncurrencyChanging(value)
				Me.SendPropertyChanging
				Me._currency = value
				Me.SendPropertyChanged("currency")
				Me.OncurrencyChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_standby_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _charge_type As String
	
	Private _standby_type_rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _standby_amount As System.Nullable(Of Decimal)
	
	Private _standby_unit As String
	
	Private _standby_type_desc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncharge_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncharge_typeChanged()
    End Sub
    Partial Private Sub Onstandby_type_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onstandby_type_rec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onstandby_amountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onstandby_amountChanged()
    End Sub
    Partial Private Sub Onstandby_unitChanging(value As String)
    End Sub
    Partial Private Sub Onstandby_unitChanged()
    End Sub
    Partial Private Sub Onstandby_type_descChanging(value As String)
    End Sub
    Partial Private Sub Onstandby_type_descChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_charge_type", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property charge_type() As String
		Get
			Return Me._charge_type
		End Get
		Set
			If (String.Equals(Me._charge_type, value) = false) Then
				Me.Oncharge_typeChanging(value)
				Me.SendPropertyChanging
				Me._charge_type = value
				Me.SendPropertyChanged("charge_type")
				Me.Oncharge_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_standby_type_rec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property standby_type_rec_id() As Integer
		Get
			Return Me._standby_type_rec_id
		End Get
		Set
			If ((Me._standby_type_rec_id = value)  _
						= false) Then
				Me.Onstandby_type_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._standby_type_rec_id = value
				Me.SendPropertyChanged("standby_type_rec_id")
				Me.Onstandby_type_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_standby_amount")>  _
	Public Property standby_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._standby_amount
		End Get
		Set
			If (Me._standby_amount.Equals(value) = false) Then
				Me.Onstandby_amountChanging(value)
				Me.SendPropertyChanging
				Me._standby_amount = value
				Me.SendPropertyChanged("standby_amount")
				Me.Onstandby_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_standby_unit", DbType:="VarChar(10)")>  _
	Public Property standby_unit() As String
		Get
			Return Me._standby_unit
		End Get
		Set
			If (String.Equals(Me._standby_unit, value) = false) Then
				Me.Onstandby_unitChanging(value)
				Me.SendPropertyChanging
				Me._standby_unit = value
				Me.SendPropertyChanged("standby_unit")
				Me.Onstandby_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_standby_type_desc", DbType:="varchar(30)")>  _
	Public Property standby_type_desc() As String
		Get
			Return Me._standby_type_desc
		End Get
		Set
			If (String.Equals(Me._standby_type_desc, value) = false) Then
				Me.Onstandby_type_descChanging(value)
				Me.SendPropertyChanging
				Me._standby_type_desc = value
				Me.SendPropertyChanged("standby_type_desc")
				Me.Onstandby_type_descChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_rcor")>  _
Partial Public Class disp_rcor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _core_requests As System.Nullable(Of Integer)
	
	Private _core_attempts As System.Nullable(Of Integer)
	
	Private _cores_recovered As System.Nullable(Of Integer)
	
	Private _recovery_efficiency As System.Nullable(Of Single)
	
	Private _average_drill_time As System.Nullable(Of Single)
	
	Private _average_core_length As System.Nullable(Of Single)
	
	Private _bit_number_trip1 As String
	
	Private _bit_number_trip2 As String
	
	Private _bit_number_trip3 As String
	
	Private _bit_number_trip4 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Oncore_requestsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncore_requestsChanged()
    End Sub
    Partial Private Sub Oncore_attemptsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncore_attemptsChanged()
    End Sub
    Partial Private Sub Oncores_recoveredChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncores_recoveredChanged()
    End Sub
    Partial Private Sub Onrecovery_efficiencyChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onrecovery_efficiencyChanged()
    End Sub
    Partial Private Sub Onaverage_drill_timeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaverage_drill_timeChanged()
    End Sub
    Partial Private Sub Onaverage_core_lengthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaverage_core_lengthChanged()
    End Sub
    Partial Private Sub Onbit_number_trip1Changing(value As String)
    End Sub
    Partial Private Sub Onbit_number_trip1Changed()
    End Sub
    Partial Private Sub Onbit_number_trip2Changing(value As String)
    End Sub
    Partial Private Sub Onbit_number_trip2Changed()
    End Sub
    Partial Private Sub Onbit_number_trip3Changing(value As String)
    End Sub
    Partial Private Sub Onbit_number_trip3Changed()
    End Sub
    Partial Private Sub Onbit_number_trip4Changing(value As String)
    End Sub
    Partial Private Sub Onbit_number_trip4Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_core_requests", DbType:="Int")>  _
	Public Property core_requests() As System.Nullable(Of Integer)
		Get
			Return Me._core_requests
		End Get
		Set
			If (Me._core_requests.Equals(value) = false) Then
				Me.Oncore_requestsChanging(value)
				Me.SendPropertyChanging
				Me._core_requests = value
				Me.SendPropertyChanged("core_requests")
				Me.Oncore_requestsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_core_attempts", DbType:="Int")>  _
	Public Property core_attempts() As System.Nullable(Of Integer)
		Get
			Return Me._core_attempts
		End Get
		Set
			If (Me._core_attempts.Equals(value) = false) Then
				Me.Oncore_attemptsChanging(value)
				Me.SendPropertyChanging
				Me._core_attempts = value
				Me.SendPropertyChanged("core_attempts")
				Me.Oncore_attemptsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cores_recovered", DbType:="Int")>  _
	Public Property cores_recovered() As System.Nullable(Of Integer)
		Get
			Return Me._cores_recovered
		End Get
		Set
			If (Me._cores_recovered.Equals(value) = false) Then
				Me.Oncores_recoveredChanging(value)
				Me.SendPropertyChanging
				Me._cores_recovered = value
				Me.SendPropertyChanged("cores_recovered")
				Me.Oncores_recoveredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recovery_efficiency", DbType:="Real")>  _
	Public Property recovery_efficiency() As System.Nullable(Of Single)
		Get
			Return Me._recovery_efficiency
		End Get
		Set
			If (Me._recovery_efficiency.Equals(value) = false) Then
				Me.Onrecovery_efficiencyChanging(value)
				Me.SendPropertyChanging
				Me._recovery_efficiency = value
				Me.SendPropertyChanged("recovery_efficiency")
				Me.Onrecovery_efficiencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_average_drill_time", DbType:="Real")>  _
	Public Property average_drill_time() As System.Nullable(Of Single)
		Get
			Return Me._average_drill_time
		End Get
		Set
			If (Me._average_drill_time.Equals(value) = false) Then
				Me.Onaverage_drill_timeChanging(value)
				Me.SendPropertyChanging
				Me._average_drill_time = value
				Me.SendPropertyChanged("average_drill_time")
				Me.Onaverage_drill_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_average_core_length", DbType:="Real")>  _
	Public Property average_core_length() As System.Nullable(Of Single)
		Get
			Return Me._average_core_length
		End Get
		Set
			If (Me._average_core_length.Equals(value) = false) Then
				Me.Onaverage_core_lengthChanging(value)
				Me.SendPropertyChanging
				Me._average_core_length = value
				Me.SendPropertyChanged("average_core_length")
				Me.Onaverage_core_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_number_trip1", DbType:="VarChar(10)")>  _
	Public Property bit_number_trip1() As String
		Get
			Return Me._bit_number_trip1
		End Get
		Set
			If (String.Equals(Me._bit_number_trip1, value) = false) Then
				Me.Onbit_number_trip1Changing(value)
				Me.SendPropertyChanging
				Me._bit_number_trip1 = value
				Me.SendPropertyChanged("bit_number_trip1")
				Me.Onbit_number_trip1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_number_trip2", DbType:="VarChar(10)")>  _
	Public Property bit_number_trip2() As String
		Get
			Return Me._bit_number_trip2
		End Get
		Set
			If (String.Equals(Me._bit_number_trip2, value) = false) Then
				Me.Onbit_number_trip2Changing(value)
				Me.SendPropertyChanging
				Me._bit_number_trip2 = value
				Me.SendPropertyChanged("bit_number_trip2")
				Me.Onbit_number_trip2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_number_trip3", DbType:="VarChar(10)")>  _
	Public Property bit_number_trip3() As String
		Get
			Return Me._bit_number_trip3
		End Get
		Set
			If (String.Equals(Me._bit_number_trip3, value) = false) Then
				Me.Onbit_number_trip3Changing(value)
				Me.SendPropertyChanging
				Me._bit_number_trip3 = value
				Me.SendPropertyChanged("bit_number_trip3")
				Me.Onbit_number_trip3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bit_number_trip4", DbType:="VarChar(10)")>  _
	Public Property bit_number_trip4() As String
		Get
			Return Me._bit_number_trip4
		End Get
		Set
			If (String.Equals(Me._bit_number_trip4, value) = false) Then
				Me.Onbit_number_trip4Changing(value)
				Me.SendPropertyChanging
				Me._bit_number_trip4 = value
				Me.SendPropertyChanged("bit_number_trip4")
				Me.Onbit_number_trip4Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_rcor_attempt")>  _
Partial Public Class disp_rcor_attempt
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _attempt_id As Integer
	
	Private _core_sold As String
	
	Private _depth As System.Nullable(Of Single)
	
	Private _start_time As System.Nullable(Of Date)
	
	Private _washout_extent As System.Nullable(Of Single)
	
	Private _drill_time As System.Nullable(Of Single)
	
	Private _length_cut As System.Nullable(Of Single)
	
	Private _estimated_length_recovered As System.Nullable(Of Single)
	
	Private _actual_length_recovered As System.Nullable(Of Single)
	
	Private _file_name As String
	
	Private _expected_lithology As String
	
	Private _unconfined_comp_strength As System.Nullable(Of Single)
	
	Private _over_balance As System.Nullable(Of Single)
	
	Private _comment As String
	
	Private _include_in_report_flag As Boolean
	
	Private _req_num As String
	
	Private _absolute_pressure_before As System.Nullable(Of Single)
	
	Private _absolute_pressure_after As System.Nullable(Of Single)
	
	Private _electronics_temperature_before As System.Nullable(Of Single)
	
	Private _electronics_temperature_after As System.Nullable(Of Single)
	
	Private _voltage_regulator_temperature_before As System.Nullable(Of Single)
	
	Private _voltage_regulator_temperature_after As System.Nullable(Of Single)
	
	Private _motor_controller_temperature_before As System.Nullable(Of Single)
	
	Private _motor_controller_temperature_after As System.Nullable(Of Single)
	
	Private _qa_electronics_temperature_before As System.Nullable(Of Single)
	
	Private _qa_electronics_temperature_after As System.Nullable(Of Single)
	
	Private _motor_temperature_before As System.Nullable(Of Single)
	
	Private _motor_temperature_after As System.Nullable(Of Single)
	
	Private _total_drill_seconds As System.Nullable(Of Single)
	
	Private _aux_pressure_low_seconds As System.Nullable(Of Single)
	
	Private _aux_pressure_medium1_seconds As System.Nullable(Of Single)
	
	Private _aux_pressure_medium2_seconds As System.Nullable(Of Single)
	
	Private _aux_pressure_high_seconds As System.Nullable(Of Single)
	
	Private _aux_pressure_max_seconds As System.Nullable(Of Single)
	
	Private _pulse_command_count As System.Nullable(Of Integer)
	
	Private _surge_command_count As System.Nullable(Of Integer)
	
	Private _retract_command_count As System.Nullable(Of Integer)
	
	Private _advance_command_count As System.Nullable(Of Integer)
	
	Private _break_command_count As System.Nullable(Of Integer)
	
	Private _break_value_max As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onattempt_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onattempt_idChanged()
    End Sub
    Partial Private Sub Oncore_soldChanging(value As String)
    End Sub
    Partial Private Sub Oncore_soldChanged()
    End Sub
    Partial Private Sub OndepthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OndepthChanged()
    End Sub
    Partial Private Sub Onstart_timeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onstart_timeChanged()
    End Sub
    Partial Private Sub Onwashout_extentChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwashout_extentChanged()
    End Sub
    Partial Private Sub Ondrill_timeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondrill_timeChanged()
    End Sub
    Partial Private Sub Onlength_cutChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onlength_cutChanged()
    End Sub
    Partial Private Sub Onestimated_length_recoveredChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onestimated_length_recoveredChanged()
    End Sub
    Partial Private Sub Onactual_length_recoveredChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onactual_length_recoveredChanged()
    End Sub
    Partial Private Sub Onfile_nameChanging(value As String)
    End Sub
    Partial Private Sub Onfile_nameChanged()
    End Sub
    Partial Private Sub Onexpected_lithologyChanging(value As String)
    End Sub
    Partial Private Sub Onexpected_lithologyChanged()
    End Sub
    Partial Private Sub Onunconfined_comp_strengthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onunconfined_comp_strengthChanged()
    End Sub
    Partial Private Sub Onover_balanceChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onover_balanceChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Oninclude_in_report_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninclude_in_report_flagChanged()
    End Sub
    Partial Private Sub Onreq_numChanging(value As String)
    End Sub
    Partial Private Sub Onreq_numChanged()
    End Sub
    Partial Private Sub Onabsolute_pressure_beforeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onabsolute_pressure_beforeChanged()
    End Sub
    Partial Private Sub Onabsolute_pressure_afterChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onabsolute_pressure_afterChanged()
    End Sub
    Partial Private Sub Onelectronics_temperature_beforeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onelectronics_temperature_beforeChanged()
    End Sub
    Partial Private Sub Onelectronics_temperature_afterChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onelectronics_temperature_afterChanged()
    End Sub
    Partial Private Sub Onvoltage_regulator_temperature_beforeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onvoltage_regulator_temperature_beforeChanged()
    End Sub
    Partial Private Sub Onvoltage_regulator_temperature_afterChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onvoltage_regulator_temperature_afterChanged()
    End Sub
    Partial Private Sub Onmotor_controller_temperature_beforeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmotor_controller_temperature_beforeChanged()
    End Sub
    Partial Private Sub Onmotor_controller_temperature_afterChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmotor_controller_temperature_afterChanged()
    End Sub
    Partial Private Sub Onqa_electronics_temperature_beforeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onqa_electronics_temperature_beforeChanged()
    End Sub
    Partial Private Sub Onqa_electronics_temperature_afterChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onqa_electronics_temperature_afterChanged()
    End Sub
    Partial Private Sub Onmotor_temperature_beforeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmotor_temperature_beforeChanged()
    End Sub
    Partial Private Sub Onmotor_temperature_afterChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmotor_temperature_afterChanged()
    End Sub
    Partial Private Sub Ontotal_drill_secondsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontotal_drill_secondsChanged()
    End Sub
    Partial Private Sub Onaux_pressure_low_secondsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaux_pressure_low_secondsChanged()
    End Sub
    Partial Private Sub Onaux_pressure_medium1_secondsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaux_pressure_medium1_secondsChanged()
    End Sub
    Partial Private Sub Onaux_pressure_medium2_secondsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaux_pressure_medium2_secondsChanged()
    End Sub
    Partial Private Sub Onaux_pressure_high_secondsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaux_pressure_high_secondsChanged()
    End Sub
    Partial Private Sub Onaux_pressure_max_secondsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onaux_pressure_max_secondsChanged()
    End Sub
    Partial Private Sub Onpulse_command_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpulse_command_countChanged()
    End Sub
    Partial Private Sub Onsurge_command_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsurge_command_countChanged()
    End Sub
    Partial Private Sub Onretract_command_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onretract_command_countChanged()
    End Sub
    Partial Private Sub Onadvance_command_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onadvance_command_countChanged()
    End Sub
    Partial Private Sub Onbreak_command_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onbreak_command_countChanged()
    End Sub
    Partial Private Sub Onbreak_value_maxChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onbreak_value_maxChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attempt_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property attempt_id() As Integer
		Get
			Return Me._attempt_id
		End Get
		Set
			If ((Me._attempt_id = value)  _
						= false) Then
				Me.Onattempt_idChanging(value)
				Me.SendPropertyChanging
				Me._attempt_id = value
				Me.SendPropertyChanged("attempt_id")
				Me.Onattempt_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_core_sold", DbType:="VarChar(5)")>  _
	Public Property core_sold() As String
		Get
			Return Me._core_sold
		End Get
		Set
			If (String.Equals(Me._core_sold, value) = false) Then
				Me.Oncore_soldChanging(value)
				Me.SendPropertyChanging
				Me._core_sold = value
				Me.SendPropertyChanged("core_sold")
				Me.Oncore_soldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth", DbType:="Real")>  _
	Public Property depth() As System.Nullable(Of Single)
		Get
			Return Me._depth
		End Get
		Set
			If (Me._depth.Equals(value) = false) Then
				Me.OndepthChanging(value)
				Me.SendPropertyChanging
				Me._depth = value
				Me.SendPropertyChanged("depth")
				Me.OndepthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_start_time", DbType:="SmallDateTime")>  _
	Public Property start_time() As System.Nullable(Of Date)
		Get
			Return Me._start_time
		End Get
		Set
			If (Me._start_time.Equals(value) = false) Then
				Me.Onstart_timeChanging(value)
				Me.SendPropertyChanging
				Me._start_time = value
				Me.SendPropertyChanged("start_time")
				Me.Onstart_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_washout_extent", DbType:="Real")>  _
	Public Property washout_extent() As System.Nullable(Of Single)
		Get
			Return Me._washout_extent
		End Get
		Set
			If (Me._washout_extent.Equals(value) = false) Then
				Me.Onwashout_extentChanging(value)
				Me.SendPropertyChanging
				Me._washout_extent = value
				Me.SendPropertyChanged("washout_extent")
				Me.Onwashout_extentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_drill_time", DbType:="Real")>  _
	Public Property drill_time() As System.Nullable(Of Single)
		Get
			Return Me._drill_time
		End Get
		Set
			If (Me._drill_time.Equals(value) = false) Then
				Me.Ondrill_timeChanging(value)
				Me.SendPropertyChanging
				Me._drill_time = value
				Me.SendPropertyChanged("drill_time")
				Me.Ondrill_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_length_cut", DbType:="Real")>  _
	Public Property length_cut() As System.Nullable(Of Single)
		Get
			Return Me._length_cut
		End Get
		Set
			If (Me._length_cut.Equals(value) = false) Then
				Me.Onlength_cutChanging(value)
				Me.SendPropertyChanging
				Me._length_cut = value
				Me.SendPropertyChanged("length_cut")
				Me.Onlength_cutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estimated_length_recovered", DbType:="Real")>  _
	Public Property estimated_length_recovered() As System.Nullable(Of Single)
		Get
			Return Me._estimated_length_recovered
		End Get
		Set
			If (Me._estimated_length_recovered.Equals(value) = false) Then
				Me.Onestimated_length_recoveredChanging(value)
				Me.SendPropertyChanging
				Me._estimated_length_recovered = value
				Me.SendPropertyChanged("estimated_length_recovered")
				Me.Onestimated_length_recoveredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actual_length_recovered", DbType:="Real")>  _
	Public Property actual_length_recovered() As System.Nullable(Of Single)
		Get
			Return Me._actual_length_recovered
		End Get
		Set
			If (Me._actual_length_recovered.Equals(value) = false) Then
				Me.Onactual_length_recoveredChanging(value)
				Me.SendPropertyChanging
				Me._actual_length_recovered = value
				Me.SendPropertyChanged("actual_length_recovered")
				Me.Onactual_length_recoveredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_name", DbType:="VarChar(10)")>  _
	Public Property file_name() As String
		Get
			Return Me._file_name
		End Get
		Set
			If (String.Equals(Me._file_name, value) = false) Then
				Me.Onfile_nameChanging(value)
				Me.SendPropertyChanging
				Me._file_name = value
				Me.SendPropertyChanged("file_name")
				Me.Onfile_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expected_lithology", DbType:="VarChar(50)")>  _
	Public Property expected_lithology() As String
		Get
			Return Me._expected_lithology
		End Get
		Set
			If (String.Equals(Me._expected_lithology, value) = false) Then
				Me.Onexpected_lithologyChanging(value)
				Me.SendPropertyChanging
				Me._expected_lithology = value
				Me.SendPropertyChanged("expected_lithology")
				Me.Onexpected_lithologyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unconfined_comp_strength", DbType:="Real")>  _
	Public Property unconfined_comp_strength() As System.Nullable(Of Single)
		Get
			Return Me._unconfined_comp_strength
		End Get
		Set
			If (Me._unconfined_comp_strength.Equals(value) = false) Then
				Me.Onunconfined_comp_strengthChanging(value)
				Me.SendPropertyChanging
				Me._unconfined_comp_strength = value
				Me.SendPropertyChanged("unconfined_comp_strength")
				Me.Onunconfined_comp_strengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_over_balance", DbType:="Real")>  _
	Public Property over_balance() As System.Nullable(Of Single)
		Get
			Return Me._over_balance
		End Get
		Set
			If (Me._over_balance.Equals(value) = false) Then
				Me.Onover_balanceChanging(value)
				Me.SendPropertyChanging
				Me._over_balance = value
				Me.SendPropertyChanged("over_balance")
				Me.Onover_balanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(100)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_include_in_report_flag", DbType:="Bit NOT NULL")>  _
	Public Property include_in_report_flag() As Boolean
		Get
			Return Me._include_in_report_flag
		End Get
		Set
			If ((Me._include_in_report_flag = value)  _
						= false) Then
				Me.Oninclude_in_report_flagChanging(value)
				Me.SendPropertyChanging
				Me._include_in_report_flag = value
				Me.SendPropertyChanged("include_in_report_flag")
				Me.Oninclude_in_report_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_req_num", DbType:="VarChar(5)")>  _
	Public Property req_num() As String
		Get
			Return Me._req_num
		End Get
		Set
			If (String.Equals(Me._req_num, value) = false) Then
				Me.Onreq_numChanging(value)
				Me.SendPropertyChanging
				Me._req_num = value
				Me.SendPropertyChanged("req_num")
				Me.Onreq_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_absolute_pressure_before", DbType:="Real")>  _
	Public Property absolute_pressure_before() As System.Nullable(Of Single)
		Get
			Return Me._absolute_pressure_before
		End Get
		Set
			If (Me._absolute_pressure_before.Equals(value) = false) Then
				Me.Onabsolute_pressure_beforeChanging(value)
				Me.SendPropertyChanging
				Me._absolute_pressure_before = value
				Me.SendPropertyChanged("absolute_pressure_before")
				Me.Onabsolute_pressure_beforeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_absolute_pressure_after", DbType:="Real")>  _
	Public Property absolute_pressure_after() As System.Nullable(Of Single)
		Get
			Return Me._absolute_pressure_after
		End Get
		Set
			If (Me._absolute_pressure_after.Equals(value) = false) Then
				Me.Onabsolute_pressure_afterChanging(value)
				Me.SendPropertyChanging
				Me._absolute_pressure_after = value
				Me.SendPropertyChanged("absolute_pressure_after")
				Me.Onabsolute_pressure_afterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_electronics_temperature_before", DbType:="Real")>  _
	Public Property electronics_temperature_before() As System.Nullable(Of Single)
		Get
			Return Me._electronics_temperature_before
		End Get
		Set
			If (Me._electronics_temperature_before.Equals(value) = false) Then
				Me.Onelectronics_temperature_beforeChanging(value)
				Me.SendPropertyChanging
				Me._electronics_temperature_before = value
				Me.SendPropertyChanged("electronics_temperature_before")
				Me.Onelectronics_temperature_beforeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_electronics_temperature_after", DbType:="Real")>  _
	Public Property electronics_temperature_after() As System.Nullable(Of Single)
		Get
			Return Me._electronics_temperature_after
		End Get
		Set
			If (Me._electronics_temperature_after.Equals(value) = false) Then
				Me.Onelectronics_temperature_afterChanging(value)
				Me.SendPropertyChanging
				Me._electronics_temperature_after = value
				Me.SendPropertyChanged("electronics_temperature_after")
				Me.Onelectronics_temperature_afterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_voltage_regulator_temperature_before", DbType:="Real")>  _
	Public Property voltage_regulator_temperature_before() As System.Nullable(Of Single)
		Get
			Return Me._voltage_regulator_temperature_before
		End Get
		Set
			If (Me._voltage_regulator_temperature_before.Equals(value) = false) Then
				Me.Onvoltage_regulator_temperature_beforeChanging(value)
				Me.SendPropertyChanging
				Me._voltage_regulator_temperature_before = value
				Me.SendPropertyChanged("voltage_regulator_temperature_before")
				Me.Onvoltage_regulator_temperature_beforeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_voltage_regulator_temperature_after", DbType:="Real")>  _
	Public Property voltage_regulator_temperature_after() As System.Nullable(Of Single)
		Get
			Return Me._voltage_regulator_temperature_after
		End Get
		Set
			If (Me._voltage_regulator_temperature_after.Equals(value) = false) Then
				Me.Onvoltage_regulator_temperature_afterChanging(value)
				Me.SendPropertyChanging
				Me._voltage_regulator_temperature_after = value
				Me.SendPropertyChanged("voltage_regulator_temperature_after")
				Me.Onvoltage_regulator_temperature_afterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_motor_controller_temperature_before", DbType:="Real")>  _
	Public Property motor_controller_temperature_before() As System.Nullable(Of Single)
		Get
			Return Me._motor_controller_temperature_before
		End Get
		Set
			If (Me._motor_controller_temperature_before.Equals(value) = false) Then
				Me.Onmotor_controller_temperature_beforeChanging(value)
				Me.SendPropertyChanging
				Me._motor_controller_temperature_before = value
				Me.SendPropertyChanged("motor_controller_temperature_before")
				Me.Onmotor_controller_temperature_beforeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_motor_controller_temperature_after", DbType:="Real")>  _
	Public Property motor_controller_temperature_after() As System.Nullable(Of Single)
		Get
			Return Me._motor_controller_temperature_after
		End Get
		Set
			If (Me._motor_controller_temperature_after.Equals(value) = false) Then
				Me.Onmotor_controller_temperature_afterChanging(value)
				Me.SendPropertyChanging
				Me._motor_controller_temperature_after = value
				Me.SendPropertyChanged("motor_controller_temperature_after")
				Me.Onmotor_controller_temperature_afterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qa_electronics_temperature_before", DbType:="Real")>  _
	Public Property qa_electronics_temperature_before() As System.Nullable(Of Single)
		Get
			Return Me._qa_electronics_temperature_before
		End Get
		Set
			If (Me._qa_electronics_temperature_before.Equals(value) = false) Then
				Me.Onqa_electronics_temperature_beforeChanging(value)
				Me.SendPropertyChanging
				Me._qa_electronics_temperature_before = value
				Me.SendPropertyChanged("qa_electronics_temperature_before")
				Me.Onqa_electronics_temperature_beforeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qa_electronics_temperature_after", DbType:="Real")>  _
	Public Property qa_electronics_temperature_after() As System.Nullable(Of Single)
		Get
			Return Me._qa_electronics_temperature_after
		End Get
		Set
			If (Me._qa_electronics_temperature_after.Equals(value) = false) Then
				Me.Onqa_electronics_temperature_afterChanging(value)
				Me.SendPropertyChanging
				Me._qa_electronics_temperature_after = value
				Me.SendPropertyChanged("qa_electronics_temperature_after")
				Me.Onqa_electronics_temperature_afterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_motor_temperature_before", DbType:="Real")>  _
	Public Property motor_temperature_before() As System.Nullable(Of Single)
		Get
			Return Me._motor_temperature_before
		End Get
		Set
			If (Me._motor_temperature_before.Equals(value) = false) Then
				Me.Onmotor_temperature_beforeChanging(value)
				Me.SendPropertyChanging
				Me._motor_temperature_before = value
				Me.SendPropertyChanged("motor_temperature_before")
				Me.Onmotor_temperature_beforeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_motor_temperature_after", DbType:="Real")>  _
	Public Property motor_temperature_after() As System.Nullable(Of Single)
		Get
			Return Me._motor_temperature_after
		End Get
		Set
			If (Me._motor_temperature_after.Equals(value) = false) Then
				Me.Onmotor_temperature_afterChanging(value)
				Me.SendPropertyChanging
				Me._motor_temperature_after = value
				Me.SendPropertyChanged("motor_temperature_after")
				Me.Onmotor_temperature_afterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_drill_seconds", DbType:="Real")>  _
	Public Property total_drill_seconds() As System.Nullable(Of Single)
		Get
			Return Me._total_drill_seconds
		End Get
		Set
			If (Me._total_drill_seconds.Equals(value) = false) Then
				Me.Ontotal_drill_secondsChanging(value)
				Me.SendPropertyChanging
				Me._total_drill_seconds = value
				Me.SendPropertyChanged("total_drill_seconds")
				Me.Ontotal_drill_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_pressure_low_seconds", DbType:="Real")>  _
	Public Property aux_pressure_low_seconds() As System.Nullable(Of Single)
		Get
			Return Me._aux_pressure_low_seconds
		End Get
		Set
			If (Me._aux_pressure_low_seconds.Equals(value) = false) Then
				Me.Onaux_pressure_low_secondsChanging(value)
				Me.SendPropertyChanging
				Me._aux_pressure_low_seconds = value
				Me.SendPropertyChanged("aux_pressure_low_seconds")
				Me.Onaux_pressure_low_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_pressure_medium1_seconds", DbType:="Real")>  _
	Public Property aux_pressure_medium1_seconds() As System.Nullable(Of Single)
		Get
			Return Me._aux_pressure_medium1_seconds
		End Get
		Set
			If (Me._aux_pressure_medium1_seconds.Equals(value) = false) Then
				Me.Onaux_pressure_medium1_secondsChanging(value)
				Me.SendPropertyChanging
				Me._aux_pressure_medium1_seconds = value
				Me.SendPropertyChanged("aux_pressure_medium1_seconds")
				Me.Onaux_pressure_medium1_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_pressure_medium2_seconds", DbType:="Real")>  _
	Public Property aux_pressure_medium2_seconds() As System.Nullable(Of Single)
		Get
			Return Me._aux_pressure_medium2_seconds
		End Get
		Set
			If (Me._aux_pressure_medium2_seconds.Equals(value) = false) Then
				Me.Onaux_pressure_medium2_secondsChanging(value)
				Me.SendPropertyChanging
				Me._aux_pressure_medium2_seconds = value
				Me.SendPropertyChanged("aux_pressure_medium2_seconds")
				Me.Onaux_pressure_medium2_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_pressure_high_seconds", DbType:="Real")>  _
	Public Property aux_pressure_high_seconds() As System.Nullable(Of Single)
		Get
			Return Me._aux_pressure_high_seconds
		End Get
		Set
			If (Me._aux_pressure_high_seconds.Equals(value) = false) Then
				Me.Onaux_pressure_high_secondsChanging(value)
				Me.SendPropertyChanging
				Me._aux_pressure_high_seconds = value
				Me.SendPropertyChanged("aux_pressure_high_seconds")
				Me.Onaux_pressure_high_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_pressure_max_seconds", DbType:="Real")>  _
	Public Property aux_pressure_max_seconds() As System.Nullable(Of Single)
		Get
			Return Me._aux_pressure_max_seconds
		End Get
		Set
			If (Me._aux_pressure_max_seconds.Equals(value) = false) Then
				Me.Onaux_pressure_max_secondsChanging(value)
				Me.SendPropertyChanging
				Me._aux_pressure_max_seconds = value
				Me.SendPropertyChanged("aux_pressure_max_seconds")
				Me.Onaux_pressure_max_secondsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pulse_command_count", DbType:="Int")>  _
	Public Property pulse_command_count() As System.Nullable(Of Integer)
		Get
			Return Me._pulse_command_count
		End Get
		Set
			If (Me._pulse_command_count.Equals(value) = false) Then
				Me.Onpulse_command_countChanging(value)
				Me.SendPropertyChanging
				Me._pulse_command_count = value
				Me.SendPropertyChanged("pulse_command_count")
				Me.Onpulse_command_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_surge_command_count", DbType:="Int")>  _
	Public Property surge_command_count() As System.Nullable(Of Integer)
		Get
			Return Me._surge_command_count
		End Get
		Set
			If (Me._surge_command_count.Equals(value) = false) Then
				Me.Onsurge_command_countChanging(value)
				Me.SendPropertyChanging
				Me._surge_command_count = value
				Me.SendPropertyChanged("surge_command_count")
				Me.Onsurge_command_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retract_command_count", DbType:="Int")>  _
	Public Property retract_command_count() As System.Nullable(Of Integer)
		Get
			Return Me._retract_command_count
		End Get
		Set
			If (Me._retract_command_count.Equals(value) = false) Then
				Me.Onretract_command_countChanging(value)
				Me.SendPropertyChanging
				Me._retract_command_count = value
				Me.SendPropertyChanged("retract_command_count")
				Me.Onretract_command_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_advance_command_count", DbType:="Int")>  _
	Public Property advance_command_count() As System.Nullable(Of Integer)
		Get
			Return Me._advance_command_count
		End Get
		Set
			If (Me._advance_command_count.Equals(value) = false) Then
				Me.Onadvance_command_countChanging(value)
				Me.SendPropertyChanging
				Me._advance_command_count = value
				Me.SendPropertyChanged("advance_command_count")
				Me.Onadvance_command_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_break_command_count", DbType:="Int")>  _
	Public Property break_command_count() As System.Nullable(Of Integer)
		Get
			Return Me._break_command_count
		End Get
		Set
			If (Me._break_command_count.Equals(value) = false) Then
				Me.Onbreak_command_countChanging(value)
				Me.SendPropertyChanging
				Me._break_command_count = value
				Me.SendPropertyChanged("break_command_count")
				Me.Onbreak_command_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_break_value_max", DbType:="real")>  _
	Public Property break_value_max() As System.Nullable(Of Single)
		Get
			Return Me._break_value_max
		End Get
		Set
			If (Me._break_value_max.Equals(value) = false) Then
				Me.Onbreak_value_maxChanging(value)
				Me.SendPropertyChanging
				Me._break_value_max = value
				Me.SendPropertyChanged("break_value_max")
				Me.Onbreak_value_maxChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_asset_order_asset_selection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _pm_point_threshold_level As String
	
	Private _selected As Boolean
	
	Private _status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_idChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanged()
    End Sub
    Partial Private Sub Onavail_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onavail_idChanged()
    End Sub
    Partial Private Sub Onpm_pointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpm_pointsChanged()
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanging(value As String)
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanged()
    End Sub
    Partial Private Sub OnselectedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnselectedChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="varchar(15)", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me.Oncurrent_plant_idChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_id = value
				Me.SendPropertyChanged("current_plant_id")
				Me.Oncurrent_plant_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me.Oncurrent_plant_nameChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_name = value
				Me.SendPropertyChanged("current_plant_name")
				Me.Oncurrent_plant_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me.Onavail_idChanging(value)
				Me.SendPropertyChanging
				Me._avail_id = value
				Me.SendPropertyChanged("avail_id")
				Me.Onavail_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me.Onpm_pointsChanging(value)
				Me.SendPropertyChanging
				Me._pm_points = value
				Me.SendPropertyChanged("pm_points")
				Me.Onpm_pointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", CanBeNull:=false)>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me.Onpm_point_threshold_levelChanging(value)
				Me.SendPropertyChanging
				Me._pm_point_threshold_level = value
				Me.SendPropertyChanged("pm_point_threshold_level")
				Me.Onpm_point_threshold_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected", DbType:="bit")>  _
	Public Property selected() As Boolean
		Get
			Return Me._selected
		End Get
		Set
			If ((Me._selected = value)  _
						= false) Then
				Me.OnselectedChanging(value)
				Me.SendPropertyChanging
				Me._selected = value
				Me.SendPropertyChanged("selected")
				Me.OnselectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class v_asset_forecast
	
	Private _disp_id As Integer
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _approx_end As System.Nullable(Of Date)
	
	Private _oilcomp_id As String
	
	Private _well_name As String
	
	Private _field As String
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _plant_id As String
	
	Private _rig_name As String
	
	Private _loadout_status As System.Nullable(Of Integer)
	
	Private _asset_order_exists_flag As System.Nullable(Of Boolean)
	
	Private _loadout_start_datetime As System.Nullable(Of Date)
	
	Private _loadout_end_datetime As System.Nullable(Of Date)
	
	Private _service_list As String
	
	Private _asset_order_required_flag As Boolean
	
	Private _psl As String
	
	Private _plant_name As String
	
	Private _dist_name As String
	
	Private _company_name As String
	
	Private _job_start_datetime As Date
	
	Private _company_short_name As String
	
	Private _formatted_disp_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start", DbType:="SmallDateTime")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me._approx_start = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_end", DbType:="DateTime")>  _
	Public Property approx_end() As System.Nullable(Of Date)
		Get
			Return Me._approx_end
		End Get
		Set
			If (Me._approx_end.Equals(value) = false) Then
				Me._approx_end = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field", DbType:="VarChar(30)")>  _
	Public Property field() As String
		Get
			Return Me._field
		End Get
		Set
			If (String.Equals(Me._field, value) = false) Then
				Me._field = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="VarChar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_name", DbType:="VarChar(100)")>  _
	Public Property rig_name() As String
		Get
			Return Me._rig_name
		End Get
		Set
			If (String.Equals(Me._rig_name, value) = false) Then
				Me._rig_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_status", DbType:="Int")>  _
	Public Property loadout_status() As System.Nullable(Of Integer)
		Get
			Return Me._loadout_status
		End Get
		Set
			If (Me._loadout_status.Equals(value) = false) Then
				Me._loadout_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_order_exists_flag", DbType:="Bit")>  _
	Public Property asset_order_exists_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_order_exists_flag
		End Get
		Set
			If (Me._asset_order_exists_flag.Equals(value) = false) Then
				Me._asset_order_exists_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_start_datetime", DbType:="SmallDateTime")>  _
	Public Property loadout_start_datetime() As System.Nullable(Of Date)
		Get
			Return Me._loadout_start_datetime
		End Get
		Set
			If (Me._loadout_start_datetime.Equals(value) = false) Then
				Me._loadout_start_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_end_datetime", DbType:="SmallDateTime")>  _
	Public Property loadout_end_datetime() As System.Nullable(Of Date)
		Get
			Return Me._loadout_end_datetime
		End Get
		Set
			If (Me._loadout_end_datetime.Equals(value) = false) Then
				Me._loadout_end_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list")>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me._service_list = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_order_required_flag", DbType:="Bit NOT NULL")>  _
	Public Property asset_order_required_flag() As Boolean
		Get
			Return Me._asset_order_required_flag
		End Get
		Set
			If ((Me._asset_order_required_flag = value)  _
						= false) Then
				Me._asset_order_required_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_name", CanBeNull:=false)>  _
	Public Property plant_name() As String
		Get
			Return Me._plant_name
		End Get
		Set
			If (String.Equals(Me._plant_name, value) = false) Then
				Me._plant_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_name", CanBeNull:=false)>  _
	Public Property dist_name() As String
		Get
			Return Me._dist_name
		End Get
		Set
			If (String.Equals(Me._dist_name, value) = false) Then
				Me._dist_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", CanBeNull:=false)>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me._company_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_start_datetime", DbType:="SmallDateTime")>  _
	Public Property job_start_datetime() As Date
		Get
			Return Me._job_start_datetime
		End Get
		Set
			If ((Me._job_start_datetime = value)  _
						= false) Then
				Me._job_start_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_short_name", CanBeNull:=false)>  _
	Public Property company_short_name() As String
		Get
			Return Me._company_short_name
		End Get
		Set
			If (String.Equals(Me._company_short_name, value) = false) Then
				Me._company_short_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", CanBeNull:=false)>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class asset_forecast_summary
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _approx_end As System.Nullable(Of Date)
	
	Private _formatted_disp_id As String
	
	Private _asset_order_exists_flag As Boolean
	
	Private _loadout_status As System.Nullable(Of Integer)
	
	Private _asset_forecast_exists_flag As Boolean
	
	Private _loadout_start_datetime As System.Nullable(Of Date)
	
	Private _loadout_end_datetime As System.Nullable(Of Date)
	
	Private _service_list As String
	
	Private _asset_order_required_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onapprox_startChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onapprox_startChanged()
    End Sub
    Partial Private Sub Onapprox_endChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onapprox_endChanged()
    End Sub
    Partial Private Sub Onformatted_disp_idChanging(value As String)
    End Sub
    Partial Private Sub Onformatted_disp_idChanged()
    End Sub
    Partial Private Sub Onasset_order_exists_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_order_exists_flagChanged()
    End Sub
    Partial Private Sub Onloadout_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onloadout_statusChanged()
    End Sub
    Partial Private Sub Onasset_forecast_exists_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_forecast_exists_flagChanged()
    End Sub
    Partial Private Sub Onloadout_start_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onloadout_start_datetimeChanged()
    End Sub
    Partial Private Sub Onloadout_end_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onloadout_end_datetimeChanged()
    End Sub
    Partial Private Sub Onservice_listChanging(value As String)
    End Sub
    Partial Private Sub Onservice_listChanged()
    End Sub
    Partial Private Sub Onasset_order_required_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_order_required_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me.Onapprox_startChanging(value)
				Me.SendPropertyChanging
				Me._approx_start = value
				Me.SendPropertyChanged("approx_start")
				Me.Onapprox_startChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_end")>  _
	Public Property approx_end() As System.Nullable(Of Date)
		Get
			Return Me._approx_end
		End Get
		Set
			If (Me._approx_end.Equals(value) = false) Then
				Me.Onapprox_endChanging(value)
				Me.SendPropertyChanging
				Me._approx_end = value
				Me.SendPropertyChanged("approx_end")
				Me.Onapprox_endChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me.Onformatted_disp_idChanging(value)
				Me.SendPropertyChanging
				Me._formatted_disp_id = value
				Me.SendPropertyChanged("formatted_disp_id")
				Me.Onformatted_disp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_order_exists_flag")>  _
	Public Property asset_order_exists_flag() As Boolean
		Get
			Return Me._asset_order_exists_flag
		End Get
		Set
			If ((Me._asset_order_exists_flag = value)  _
						= false) Then
				Me.Onasset_order_exists_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_order_exists_flag = value
				Me.SendPropertyChanged("asset_order_exists_flag")
				Me.Onasset_order_exists_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_status")>  _
	Public Property loadout_status() As System.Nullable(Of Integer)
		Get
			Return Me._loadout_status
		End Get
		Set
			If (Me._loadout_status.Equals(value) = false) Then
				Me.Onloadout_statusChanging(value)
				Me.SendPropertyChanging
				Me._loadout_status = value
				Me.SendPropertyChanged("loadout_status")
				Me.Onloadout_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_forecast_exists_flag")>  _
	Public Property asset_forecast_exists_flag() As Boolean
		Get
			Return Me._asset_forecast_exists_flag
		End Get
		Set
			If ((Me._asset_forecast_exists_flag = value)  _
						= false) Then
				Me.Onasset_forecast_exists_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_forecast_exists_flag = value
				Me.SendPropertyChanged("asset_forecast_exists_flag")
				Me.Onasset_forecast_exists_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_start_datetime")>  _
	Public Property loadout_start_datetime() As System.Nullable(Of Date)
		Get
			Return Me._loadout_start_datetime
		End Get
		Set
			If (Me._loadout_start_datetime.Equals(value) = false) Then
				Me.Onloadout_start_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._loadout_start_datetime = value
				Me.SendPropertyChanged("loadout_start_datetime")
				Me.Onloadout_start_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_end_datetime")>  _
	Public Property loadout_end_datetime() As System.Nullable(Of Date)
		Get
			Return Me._loadout_end_datetime
		End Get
		Set
			If (Me._loadout_end_datetime.Equals(value) = false) Then
				Me.Onloadout_end_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._loadout_end_datetime = value
				Me.SendPropertyChanged("loadout_end_datetime")
				Me.Onloadout_end_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list")>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me.Onservice_listChanging(value)
				Me.SendPropertyChanging
				Me._service_list = value
				Me.SendPropertyChanged("service_list")
				Me.Onservice_listChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_order_required_flag")>  _
	Public Property asset_order_required_flag() As Boolean
		Get
			Return Me._asset_order_required_flag
		End Get
		Set
			If ((Me._asset_order_required_flag = value)  _
						= false) Then
				Me.Onasset_order_required_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_order_required_flag = value
				Me.SendPropertyChanged("asset_order_required_flag")
				Me.Onasset_order_required_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.app_user")>  _
Partial Public Class app_user
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As String
	
	Private _name As String
	
	Private _original_user_id As String
	
	Private _dist_ids As String
	
	Private _dist_names As String
	
	Private _bonus_meal_role As String
	
	Private _bonus_meal_profit_center_ids As String
	
	Private _bonus_meal_profit_center_names As String
	
	Private _tight_hole_default_owner_flag As Boolean
	
	Private _tight_hole_default_profit_center_ids As String
	
	Private _tight_hole_default_profit_center_names As String
	
	Private _lqa_reviewer_profit_center_ids As String
	
	Private _lqa_reviewer_profit_center_names As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As String)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onoriginal_user_idChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_user_idChanged()
    End Sub
    Partial Private Sub Oncountry_codesChanging(value As String)
    End Sub
    Partial Private Sub Oncountry_codesChanged()
    End Sub
    Partial Private Sub Oncountry_namesChanging(value As String)
    End Sub
    Partial Private Sub Oncountry_namesChanged()
    End Sub
    Partial Private Sub Onbonus_meal_roleChanging(value As String)
    End Sub
    Partial Private Sub Onbonus_meal_roleChanged()
    End Sub
    Partial Private Sub Onbonus_meal_profit_center_idsChanging(value As String)
    End Sub
    Partial Private Sub Onbonus_meal_profit_center_idsChanged()
    End Sub
    Partial Private Sub Onbonus_meal_profit_center_namesChanging(value As String)
    End Sub
    Partial Private Sub Onbonus_meal_profit_center_namesChanged()
    End Sub
    Partial Private Sub Ontight_hole_default_owner_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ontight_hole_default_owner_flagChanged()
    End Sub
    Partial Private Sub Ontight_hole_default_profit_center_idsChanging(value As String)
    End Sub
    Partial Private Sub Ontight_hole_default_profit_center_idsChanged()
    End Sub
    Partial Private Sub Ontight_hole_default_profit_center_namesChanging(value As String)
    End Sub
    Partial Private Sub Ontight_hole_default_profit_center_namesChanged()
    End Sub
    Partial Private Sub Onlqa_reviewer_profit_center_idsChanging(value As String)
    End Sub
    Partial Private Sub Onlqa_reviewer_profit_center_idsChanged()
    End Sub
    Partial Private Sub Onlqa_reviewer_profit_center_namesChanging(value As String)
    End Sub
    Partial Private Sub Onlqa_reviewer_profit_center_namesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_original_user_id", CanBeNull:=false)>  _
	Public Property original_user_id() As String
		Get
			Return Me._original_user_id
		End Get
		Set
			If (String.Equals(Me._original_user_id, value) = false) Then
				Me.Onoriginal_user_idChanging(value)
				Me.SendPropertyChanging
				Me._original_user_id = value
				Me.SendPropertyChanged("original_user_id")
				Me.Onoriginal_user_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_ids", CanBeNull:=false)>  _
	Public Property country_codes() As String
		Get
			Return Me._dist_ids
		End Get
		Set
			If (String.Equals(Me._dist_ids, value) = false) Then
				Me.Oncountry_codesChanging(value)
				Me.SendPropertyChanging
				Me._dist_ids = value
				Me.SendPropertyChanged("country_codes")
				Me.Oncountry_codesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_names", CanBeNull:=false)>  _
	Public Property country_names() As String
		Get
			Return Me._dist_names
		End Get
		Set
			If (String.Equals(Me._dist_names, value) = false) Then
				Me.Oncountry_namesChanging(value)
				Me.SendPropertyChanging
				Me._dist_names = value
				Me.SendPropertyChanged("country_names")
				Me.Oncountry_namesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus_meal_role", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property bonus_meal_role() As String
		Get
			Return Me._bonus_meal_role
		End Get
		Set
			If (String.Equals(Me._bonus_meal_role, value) = false) Then
				Me.Onbonus_meal_roleChanging(value)
				Me.SendPropertyChanging
				Me._bonus_meal_role = value
				Me.SendPropertyChanged("bonus_meal_role")
				Me.Onbonus_meal_roleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus_meal_profit_center_ids", CanBeNull:=false)>  _
	Public Property bonus_meal_profit_center_ids() As String
		Get
			Return Me._bonus_meal_profit_center_ids
		End Get
		Set
			If (String.Equals(Me._bonus_meal_profit_center_ids, value) = false) Then
				Me.Onbonus_meal_profit_center_idsChanging(value)
				Me.SendPropertyChanging
				Me._bonus_meal_profit_center_ids = value
				Me.SendPropertyChanged("bonus_meal_profit_center_ids")
				Me.Onbonus_meal_profit_center_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus_meal_profit_center_names", CanBeNull:=false)>  _
	Public Property bonus_meal_profit_center_names() As String
		Get
			Return Me._bonus_meal_profit_center_names
		End Get
		Set
			If (String.Equals(Me._bonus_meal_profit_center_names, value) = false) Then
				Me.Onbonus_meal_profit_center_namesChanging(value)
				Me.SendPropertyChanging
				Me._bonus_meal_profit_center_names = value
				Me.SendPropertyChanged("bonus_meal_profit_center_names")
				Me.Onbonus_meal_profit_center_namesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tight_hole_default_owner_flag", DbType:="bit")>  _
	Public Property tight_hole_default_owner_flag() As Boolean
		Get
			Return Me._tight_hole_default_owner_flag
		End Get
		Set
			If ((Me._tight_hole_default_owner_flag = value)  _
						= false) Then
				Me.Ontight_hole_default_owner_flagChanging(value)
				Me.SendPropertyChanging
				Me._tight_hole_default_owner_flag = value
				Me.SendPropertyChanged("tight_hole_default_owner_flag")
				Me.Ontight_hole_default_owner_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tight_hole_default_profit_center_ids", CanBeNull:=false)>  _
	Public Property tight_hole_default_profit_center_ids() As String
		Get
			Return Me._tight_hole_default_profit_center_ids
		End Get
		Set
			If (String.Equals(Me._tight_hole_default_profit_center_ids, value) = false) Then
				Me.Ontight_hole_default_profit_center_idsChanging(value)
				Me.SendPropertyChanging
				Me._tight_hole_default_profit_center_ids = value
				Me.SendPropertyChanged("tight_hole_default_profit_center_ids")
				Me.Ontight_hole_default_profit_center_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tight_hole_default_profit_center_names", CanBeNull:=false)>  _
	Public Property tight_hole_default_profit_center_names() As String
		Get
			Return Me._tight_hole_default_profit_center_names
		End Get
		Set
			If (String.Equals(Me._tight_hole_default_profit_center_names, value) = false) Then
				Me.Ontight_hole_default_profit_center_namesChanging(value)
				Me.SendPropertyChanging
				Me._tight_hole_default_profit_center_names = value
				Me.SendPropertyChanged("tight_hole_default_profit_center_names")
				Me.Ontight_hole_default_profit_center_namesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_reviewer_profit_center_ids", CanBeNull:=false)>  _
	Public Property lqa_reviewer_profit_center_ids() As String
		Get
			Return Me._lqa_reviewer_profit_center_ids
		End Get
		Set
			If (String.Equals(Me._lqa_reviewer_profit_center_ids, value) = false) Then
				Me.Onlqa_reviewer_profit_center_idsChanging(value)
				Me.SendPropertyChanging
				Me._lqa_reviewer_profit_center_ids = value
				Me.SendPropertyChanged("lqa_reviewer_profit_center_ids")
				Me.Onlqa_reviewer_profit_center_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_reviewer_profit_center_names", CanBeNull:=false)>  _
	Public Property lqa_reviewer_profit_center_names() As String
		Get
			Return Me._lqa_reviewer_profit_center_names
		End Get
		Set
			If (String.Equals(Me._lqa_reviewer_profit_center_names, value) = false) Then
				Me.Onlqa_reviewer_profit_center_namesChanging(value)
				Me.SendPropertyChanging
				Me._lqa_reviewer_profit_center_names = value
				Me.SendPropertyChanged("lqa_reviewer_profit_center_names")
				Me.Onlqa_reviewer_profit_center_namesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vmap_geo_layer_item")>  _
Partial Public Class map_base_icon
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _x As System.Nullable(Of Single)
	
	Private _y As System.Nullable(Of Single)
	
	Private _id As String
	
	Private _text As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub OnxChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnxChanged()
    End Sub
    Partial Private Sub OnyChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnyChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntextChanging(value As String)
    End Sub
    Partial Private Sub OntextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_x", DbType:="Real ")>  _
	Public Property x() As System.Nullable(Of Single)
		Get
			Return Me._x
		End Get
		Set
			If (Me._x.Equals(value) = false) Then
				Me.OnxChanging(value)
				Me.SendPropertyChanging
				Me._x = value
				Me.SendPropertyChanged("x")
				Me.OnxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_y", DbType:="Real ")>  _
	Public Property y() As System.Nullable(Of Single)
		Get
			Return Me._y
		End Get
		Set
			If (Me._y.Equals(value) = false) Then
				Me.OnyChanging(value)
				Me.SendPropertyChanging
				Me._y = value
				Me.SendPropertyChanged("y")
				Me.OnyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="VarChar(50)")>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_text", DbType:="VarChar(255)")>  _
	Public Property text() As String
		Get
			Return Me._text
		End Get
		Set
			If (String.Equals(Me._text, value) = false) Then
				Me.OntextChanging(value)
				Me.SendPropertyChanging
				Me._text = value
				Me.SendPropertyChanged("text")
				Me.OntextChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_asset_utilization")>  _
Partial Public Class disp_asset_utilization
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _asset_id As String
	
	Private _column_order As Integer
	
	Private _op As System.Nullable(Of Integer)
	
	Private _trip As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Oncolumn_orderChanging(value As Integer)
    End Sub
    Partial Private Sub Oncolumn_orderChanged()
    End Sub
    Partial Private Sub OnopChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnopChanged()
    End Sub
    Partial Private Sub OntripChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntripChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_column_order", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property column_order() As Integer
		Get
			Return Me._column_order
		End Get
		Set
			If ((Me._column_order = value)  _
						= false) Then
				Me.Oncolumn_orderChanging(value)
				Me.SendPropertyChanging
				Me._column_order = value
				Me.SendPropertyChanged("column_order")
				Me.Oncolumn_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op", DbType:="Int")>  _
	Public Property op() As System.Nullable(Of Integer)
		Get
			Return Me._op
		End Get
		Set
			If (Me._op.Equals(value) = false) Then
				Me.OnopChanging(value)
				Me.SendPropertyChanging
				Me._op = value
				Me.SendPropertyChanged("op")
				Me.OnopChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trip", DbType:="Int")>  _
	Public Property trip() As System.Nullable(Of Integer)
		Get
			Return Me._trip
		End Get
		Set
			If (Me._trip.Equals(value) = false) Then
				Me.OntripChanging(value)
				Me.SendPropertyChanging
				Me._trip = value
				Me.SendPropertyChanged("trip")
				Me.OntripChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.impact_incident")>  _
Partial Public Class impact_incident
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _impact_level As Char
	
	Private _impact_criteria As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onimpact_levelChanging(value As Char)
    End Sub
    Partial Private Sub Onimpact_levelChanged()
    End Sub
    Partial Private Sub Onimpact_criteriaChanging(value As String)
    End Sub
    Partial Private Sub Onimpact_criteriaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_impact_level", DbType:="Char(1) NOT NULL")>  _
	Public Property impact_level() As Char
		Get
			Return Me._impact_level
		End Get
		Set
			If ((Me._impact_level = value)  _
						= false) Then
				Me.Onimpact_levelChanging(value)
				Me.SendPropertyChanging
				Me._impact_level = value
				Me.SendPropertyChanged("impact_level")
				Me.Onimpact_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_impact_criteria", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property impact_criteria() As String
		Get
			Return Me._impact_criteria
		End Get
		Set
			If (String.Equals(Me._impact_criteria, value) = false) Then
				Me.Onimpact_criteriaChanging(value)
				Me.SendPropertyChanging
				Me._impact_criteria = value
				Me.SendPropertyChanged("impact_criteria")
				Me.Onimpact_criteriaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_impact_incident")>  _
Partial Public Class disp_impact_incident
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _selected As Boolean
	
	Private _was_selected As Boolean
	
	Private _impact_level As Char
	
	Private _impact_criteria As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub OnselectedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnselectedChanged()
    End Sub
    Partial Private Sub Onwas_selectedChanging(value As Boolean)
    End Sub
    Partial Private Sub Onwas_selectedChanged()
    End Sub
    Partial Private Sub Onimpact_levelChanging(value As Char)
    End Sub
    Partial Private Sub Onimpact_levelChanged()
    End Sub
    Partial Private Sub Onimpact_criteriaChanging(value As String)
    End Sub
    Partial Private Sub Onimpact_criteriaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected", DbType:="bit")>  _
	Public Property selected() As Boolean
		Get
			Return Me._selected
		End Get
		Set
			If ((Me._selected = value)  _
						= false) Then
				Me.OnselectedChanging(value)
				Me.SendPropertyChanging
				Me._selected = value
				Me.SendPropertyChanged("selected")
				Me.OnselectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_was_selected", DbType:="bit")>  _
	Public Property was_selected() As Boolean
		Get
			Return Me._was_selected
		End Get
		Set
			If ((Me._was_selected = value)  _
						= false) Then
				Me.Onwas_selectedChanging(value)
				Me.SendPropertyChanging
				Me._was_selected = value
				Me.SendPropertyChanged("was_selected")
				Me.Onwas_selectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_impact_level", DbType:="char(1)")>  _
	Public Property impact_level() As Char
		Get
			Return Me._impact_level
		End Get
		Set
			If ((Me._impact_level = value)  _
						= false) Then
				Me.Onimpact_levelChanging(value)
				Me.SendPropertyChanging
				Me._impact_level = value
				Me.SendPropertyChanged("impact_level")
				Me.Onimpact_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_impact_criteria", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property impact_criteria() As String
		Get
			Return Me._impact_criteria
		End Get
		Set
			If (String.Equals(Me._impact_criteria, value) = false) Then
				Me.Onimpact_criteriaChanging(value)
				Me.SendPropertyChanging
				Me._impact_criteria = value
				Me.SendPropertyChanged("impact_criteria")
				Me.Onimpact_criteriaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.third_party_contact")>  _
Partial Public Class third_party_contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _country_code As String
	
	Private _name As String
	
	Private _phone_type1 As String
	
	Private _phone1 As String
	
	Private _phone_type2 As String
	
	Private _phone2 As String
	
	Private _email As String
	
	Private _company As String
	
	Private _vdis_oilcomp_id As String
	
	Private _company_name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Oncountry_codeChanging(value As String)
    End Sub
    Partial Private Sub Oncountry_codeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onphone_type1Changing(value As String)
    End Sub
    Partial Private Sub Onphone_type1Changed()
    End Sub
    Partial Private Sub Onphone1Changing(value As String)
    End Sub
    Partial Private Sub Onphone1Changed()
    End Sub
    Partial Private Sub Onphone_type2Changing(value As String)
    End Sub
    Partial Private Sub Onphone_type2Changed()
    End Sub
    Partial Private Sub Onphone2Changing(value As String)
    End Sub
    Partial Private Sub Onphone2Changed()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Onnon_vdis_company_nameChanging(value As String)
    End Sub
    Partial Private Sub Onnon_vdis_company_nameChanged()
    End Sub
    Partial Private Sub Onvdis_oilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onvdis_oilcomp_idChanged()
    End Sub
    Partial Private Sub Oncompany_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncompany_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me.Oncountry_codeChanging(value)
				Me.SendPropertyChanging
				Me._country_code = value
				Me.SendPropertyChanged("country_code")
				Me.Oncountry_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(30)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone_type1", DbType:="VarChar(10)")>  _
	Public Property phone_type1() As String
		Get
			Return Me._phone_type1
		End Get
		Set
			If (String.Equals(Me._phone_type1, value) = false) Then
				Me.Onphone_type1Changing(value)
				Me.SendPropertyChanging
				Me._phone_type1 = value
				Me.SendPropertyChanged("phone_type1")
				Me.Onphone_type1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone1", DbType:="VarChar(30)")>  _
	Public Property phone1() As String
		Get
			Return Me._phone1
		End Get
		Set
			If (String.Equals(Me._phone1, value) = false) Then
				Me.Onphone1Changing(value)
				Me.SendPropertyChanging
				Me._phone1 = value
				Me.SendPropertyChanged("phone1")
				Me.Onphone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone_type2", DbType:="VarChar(10)")>  _
	Public Property phone_type2() As String
		Get
			Return Me._phone_type2
		End Get
		Set
			If (String.Equals(Me._phone_type2, value) = false) Then
				Me.Onphone_type2Changing(value)
				Me.SendPropertyChanging
				Me._phone_type2 = value
				Me.SendPropertyChanged("phone_type2")
				Me.Onphone_type2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone2", DbType:="VarChar(30)")>  _
	Public Property phone2() As String
		Get
			Return Me._phone2
		End Get
		Set
			If (String.Equals(Me._phone2, value) = false) Then
				Me.Onphone2Changing(value)
				Me.SendPropertyChanging
				Me._phone2 = value
				Me.SendPropertyChanged("phone2")
				Me.Onphone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company", DbType:="varchar(80)", CanBeNull:=false)>  _
	Public Property non_vdis_company_name() As String
		Get
			Return Me._company
		End Get
		Set
			If (String.Equals(Me._company, value) = false) Then
				Me.Onnon_vdis_company_nameChanging(value)
				Me.SendPropertyChanging
				Me._company = value
				Me.SendPropertyChanged("non_vdis_company_name")
				Me.Onnon_vdis_company_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vdis_oilcomp_id", DbType:="char(40)", CanBeNull:=false)>  _
	Public Property vdis_oilcomp_id() As String
		Get
			Return Me._vdis_oilcomp_id
		End Get
		Set
			If (String.Equals(Me._vdis_oilcomp_id, value) = false) Then
				Me.Onvdis_oilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._vdis_oilcomp_id = value
				Me.SendPropertyChanged("vdis_oilcomp_id")
				Me.Onvdis_oilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", DbType:="varchar(80)", CanBeNull:=false)>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me.Oncompany_nameChanging(value)
				Me.SendPropertyChanging
				Me._company_name = value
				Me.SendPropertyChanged("company_name")
				Me.Oncompany_nameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.disp_document_type")>  _
Partial Public Class disp_document_type
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _document_type_id As String
	
	Private _document_type_code As String
	
	Private _original_document_type_id As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondocument_type_idChanging(value As String)
    End Sub
    Partial Private Sub Ondocument_type_idChanged()
    End Sub
    Partial Private Sub Ondocument_type_codeChanging(value As String)
    End Sub
    Partial Private Sub Ondocument_type_codeChanged()
    End Sub
    Partial Private Sub Onoriginal_document_type_idChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_document_type_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property document_type_id() As String
		Get
			Return Me._document_type_id
		End Get
		Set
			If (String.Equals(Me._document_type_id, value) = false) Then
				Me.Ondocument_type_idChanging(value)
				Me.SendPropertyChanging
				Me._document_type_id = value
				Me.SendPropertyChanged("document_type_id")
				Me.Ondocument_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type_code", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property document_type_code() As String
		Get
			Return Me._document_type_code
		End Get
		Set
			If (String.Equals(Me._document_type_code, value) = false) Then
				Me.Ondocument_type_codeChanging(value)
				Me.SendPropertyChanging
				Me._document_type_code = value
				Me.SendPropertyChanged("document_type_code")
				Me.Ondocument_type_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_document_type_id", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property original_document_type_id() As String
		Get
			Return Me._original_document_type_id
		End Get
		Set
			If (String.Equals(Me._original_document_type_id, value) = false) Then
				Me.Onoriginal_document_type_idChanging(value)
				Me.SendPropertyChanging
				Me._original_document_type_id = value
				Me.SendPropertyChanged("original_document_type_id")
				Me.Onoriginal_document_type_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_geoscience")>  _
Partial Public Class disp_geoscience
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _well_link_url As String
	
	Private _approved_flag As Boolean
	
	Private _comments As String
	
	Private _black_white_prints_required As System.Nullable(Of Short)
	
	Private _color_prints_required As System.Nullable(Of Short)
	
	Private _compact_discs_required As System.Nullable(Of Short)
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Private _data_read_datetime As Date
	
	Private _rush_processing_required_flag As Boolean
	
	Private _processing_type_required As String
	
	Private _processing_complete_flag As Boolean
	
	Private _geoscience_revenue As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onwell_link_urlChanging(value As String)
    End Sub
    Partial Private Sub Onwell_link_urlChanged()
    End Sub
    Partial Private Sub Onapproved_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onapproved_flagChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    Partial Private Sub Onblack_white_prints_requiredChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub Onblack_white_prints_requiredChanged()
    End Sub
    Partial Private Sub Oncolor_prints_requiredChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub Oncolor_prints_requiredChanged()
    End Sub
    Partial Private Sub Oncompact_discs_requiredChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub Oncompact_discs_requiredChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlocked_for_edit_datetimeChanged()
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanging(value As String)
    End Sub
    Partial Private Sub Onlocked_for_edit_byChanged()
    End Sub
    Partial Private Sub Ondata_read_datetimeChanging(value As Date)
    End Sub
    Partial Private Sub Ondata_read_datetimeChanged()
    End Sub
    Partial Private Sub Onrush_processing_required_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onrush_processing_required_flagChanged()
    End Sub
    Partial Private Sub Onprocessing_type_requiredChanging(value As String)
    End Sub
    Partial Private Sub Onprocessing_type_requiredChanged()
    End Sub
    Partial Private Sub Onprocessing_complete_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onprocessing_complete_flagChanged()
    End Sub
    Partial Private Sub Ongeoscience_revenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ongeoscience_revenueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_link_url", DbType:="VarChar(500)")>  _
	Public Property well_link_url() As String
		Get
			Return Me._well_link_url
		End Get
		Set
			If (String.Equals(Me._well_link_url, value) = false) Then
				Me.Onwell_link_urlChanging(value)
				Me.SendPropertyChanging
				Me._well_link_url = value
				Me.SendPropertyChanged("well_link_url")
				Me.Onwell_link_urlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approved_flag", DbType:="Bit")>  _
	Public Property approved_flag() As Boolean
		Get
			Return Me._approved_flag
		End Get
		Set
			If ((Me._approved_flag = value)  _
						= false) Then
				Me.Onapproved_flagChanging(value)
				Me.SendPropertyChanging
				Me._approved_flag = value
				Me.SendPropertyChanged("approved_flag")
				Me.Onapproved_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="VarChar(1000)")>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_black_white_prints_required", DbType:="SmallInt")>  _
	Public Property black_white_prints_required() As System.Nullable(Of Short)
		Get
			Return Me._black_white_prints_required
		End Get
		Set
			If (Me._black_white_prints_required.Equals(value) = false) Then
				Me.Onblack_white_prints_requiredChanging(value)
				Me.SendPropertyChanging
				Me._black_white_prints_required = value
				Me.SendPropertyChanged("black_white_prints_required")
				Me.Onblack_white_prints_requiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_color_prints_required", DbType:="SmallInt")>  _
	Public Property color_prints_required() As System.Nullable(Of Short)
		Get
			Return Me._color_prints_required
		End Get
		Set
			If (Me._color_prints_required.Equals(value) = false) Then
				Me.Oncolor_prints_requiredChanging(value)
				Me.SendPropertyChanging
				Me._color_prints_required = value
				Me.SendPropertyChanged("color_prints_required")
				Me.Oncolor_prints_requiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_compact_discs_required", DbType:="SmallInt")>  _
	Public Property compact_discs_required() As System.Nullable(Of Short)
		Get
			Return Me._compact_discs_required
		End Get
		Set
			If (Me._compact_discs_required.Equals(value) = false) Then
				Me.Oncompact_discs_requiredChanging(value)
				Me.SendPropertyChanging
				Me._compact_discs_required = value
				Me.SendPropertyChanged("compact_discs_required")
				Me.Oncompact_discs_requiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me.Onlocked_for_edit_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_datetime = value
				Me.SendPropertyChanged("locked_for_edit_datetime")
				Me.Onlocked_for_edit_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="VarChar(20)")>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me.Onlocked_for_edit_byChanging(value)
				Me.SendPropertyChanging
				Me._locked_for_edit_by = value
				Me.SendPropertyChanged("locked_for_edit_by")
				Me.Onlocked_for_edit_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_read_datetime", DbType:="datetime")>  _
	Public Property data_read_datetime() As Date
		Get
			Return Me._data_read_datetime
		End Get
		Set
			If ((Me._data_read_datetime = value)  _
						= false) Then
				Me.Ondata_read_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._data_read_datetime = value
				Me.SendPropertyChanged("data_read_datetime")
				Me.Ondata_read_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rush_processing_required_flag", DbType:="bit")>  _
	Public Property rush_processing_required_flag() As Boolean
		Get
			Return Me._rush_processing_required_flag
		End Get
		Set
			If ((Me._rush_processing_required_flag = value)  _
						= false) Then
				Me.Onrush_processing_required_flagChanging(value)
				Me.SendPropertyChanging
				Me._rush_processing_required_flag = value
				Me.SendPropertyChanged("rush_processing_required_flag")
				Me.Onrush_processing_required_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processing_type_required", DbType:="varchar(5)")>  _
	Public Property processing_type_required() As String
		Get
			Return Me._processing_type_required
		End Get
		Set
			If (String.Equals(Me._processing_type_required, value) = false) Then
				Me.Onprocessing_type_requiredChanging(value)
				Me.SendPropertyChanging
				Me._processing_type_required = value
				Me.SendPropertyChanged("processing_type_required")
				Me.Onprocessing_type_requiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processing_complete_flag", DbType:="bit")>  _
	Public Property processing_complete_flag() As Boolean
		Get
			Return Me._processing_complete_flag
		End Get
		Set
			If ((Me._processing_complete_flag = value)  _
						= false) Then
				Me.Onprocessing_complete_flagChanging(value)
				Me.SendPropertyChanging
				Me._processing_complete_flag = value
				Me.SendPropertyChanged("processing_complete_flag")
				Me.Onprocessing_complete_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_geoscience_revenue")>  _
	Public Property geoscience_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._geoscience_revenue
		End Get
		Set
			If (Me._geoscience_revenue.Equals(value) = false) Then
				Me.Ongeoscience_revenueChanging(value)
				Me.SendPropertyChanging
				Me._geoscience_revenue = value
				Me.SendPropertyChanged("geoscience_revenue")
				Me.Ongeoscience_revenueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.esdisp_geoscience_service")>  _
Partial Public Class disp_geoscience_service
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _gpi As String
	
	Private _requirements As String
	
	Private _instructions As String
	
	Private _data_received_date As System.Nullable(Of Date)
	
	Private _processing_start_date As System.Nullable(Of Date)
	
	Private _estimated_delivery_date As System.Nullable(Of Date)
	
	Private _processing_complete_date As System.Nullable(Of Date)
	
	Private _preliminary_data_complete_date As System.Nullable(Of Date)
	
	Private _final_data_complete_date As System.Nullable(Of Date)
	
	Private _assigned_to As String
	
	Private _selected As Boolean
	
	Private _description As String
	
	Private _prerequisite_gpis As String
	
	Private _discipline As String
	
	Private _exclude_from_quote_flag As Boolean
	
	Private _manually_selected_flag As Boolean
	
	Private _primary_sort_order As Integer
	
	Private _rush_processing_flag As Boolean
	
	Private _job_type As String
	
	Private _processed_quantity As System.Nullable(Of Single)
	
	Private _archive_number As String
	
	Private _assigned_to_names As String
	
	Private _competency_issues_flag As Boolean
	
	Private _data_qc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub OnrequirementChanging(value As String)
    End Sub
    Partial Private Sub OnrequirementChanged()
    End Sub
    Partial Private Sub OninstructionsChanging(value As String)
    End Sub
    Partial Private Sub OninstructionsChanged()
    End Sub
    Partial Private Sub Ondata_received_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondata_received_dateChanged()
    End Sub
    Partial Private Sub Onprocessing_start_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onprocessing_start_dateChanged()
    End Sub
    Partial Private Sub Onestimated_delivery_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onestimated_delivery_dateChanged()
    End Sub
    Partial Private Sub Onprocessing_complete_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onprocessing_complete_dateChanged()
    End Sub
    Partial Private Sub Onpreliminary_data_complete_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onpreliminary_data_complete_dateChanged()
    End Sub
    Partial Private Sub Onfinal_data_complete_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfinal_data_complete_dateChanged()
    End Sub
    Partial Private Sub Onassigned_toChanging(value As String)
    End Sub
    Partial Private Sub Onassigned_toChanged()
    End Sub
    Partial Private Sub OnselectedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnselectedChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onprerequisite_gpisChanging(value As String)
    End Sub
    Partial Private Sub Onprerequisite_gpisChanged()
    End Sub
    Partial Private Sub OndisciplineChanging(value As String)
    End Sub
    Partial Private Sub OndisciplineChanged()
    End Sub
    Partial Private Sub Oninclude_on_quote_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninclude_on_quote_flagChanged()
    End Sub
    Partial Private Sub Onmanually_selected_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onmanually_selected_flagChanged()
    End Sub
    Partial Private Sub Onprimary_sort_orderChanging(value As Integer)
    End Sub
    Partial Private Sub Onprimary_sort_orderChanged()
    End Sub
    Partial Private Sub Onrush_processing_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onrush_processing_flagChanged()
    End Sub
    Partial Private Sub Onjob_typeChanging(value As String)
    End Sub
    Partial Private Sub Onjob_typeChanged()
    End Sub
    Partial Private Sub Onprocessed_quantityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onprocessed_quantityChanged()
    End Sub
    Partial Private Sub Onarchive_numberChanging(value As String)
    End Sub
    Partial Private Sub Onarchive_numberChanged()
    End Sub
    Partial Private Sub Onassigned_to_namesChanging(value As String)
    End Sub
    Partial Private Sub Onassigned_to_namesChanged()
    End Sub
    Partial Private Sub Oncompetency_issues_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncompetency_issues_flagChanged()
    End Sub
    Partial Private Sub Ondata_qcChanging(value As String)
    End Sub
    Partial Private Sub Ondata_qcChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40)")>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirements", DbType:="VarChar(50)")>  _
	Public Property requirement() As String
		Get
			Return Me._requirements
		End Get
		Set
			If (String.Equals(Me._requirements, value) = false) Then
				Me.OnrequirementChanging(value)
				Me.SendPropertyChanging
				Me._requirements = value
				Me.SendPropertyChanged("requirement")
				Me.OnrequirementChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_instructions", DbType:="VarChar(250)")>  _
	Public Property instructions() As String
		Get
			Return Me._instructions
		End Get
		Set
			If (String.Equals(Me._instructions, value) = false) Then
				Me.OninstructionsChanging(value)
				Me.SendPropertyChanging
				Me._instructions = value
				Me.SendPropertyChanged("instructions")
				Me.OninstructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_received_date", DbType:="Date")>  _
	Public Property data_received_date() As System.Nullable(Of Date)
		Get
			Return Me._data_received_date
		End Get
		Set
			If (Me._data_received_date.Equals(value) = false) Then
				Me.Ondata_received_dateChanging(value)
				Me.SendPropertyChanging
				Me._data_received_date = value
				Me.SendPropertyChanged("data_received_date")
				Me.Ondata_received_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processing_start_date", DbType:="Date")>  _
	Public Property processing_start_date() As System.Nullable(Of Date)
		Get
			Return Me._processing_start_date
		End Get
		Set
			If (Me._processing_start_date.Equals(value) = false) Then
				Me.Onprocessing_start_dateChanging(value)
				Me.SendPropertyChanging
				Me._processing_start_date = value
				Me.SendPropertyChanged("processing_start_date")
				Me.Onprocessing_start_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estimated_delivery_date", DbType:="Date")>  _
	Public Property estimated_delivery_date() As System.Nullable(Of Date)
		Get
			Return Me._estimated_delivery_date
		End Get
		Set
			If (Me._estimated_delivery_date.Equals(value) = false) Then
				Me.Onestimated_delivery_dateChanging(value)
				Me.SendPropertyChanging
				Me._estimated_delivery_date = value
				Me.SendPropertyChanged("estimated_delivery_date")
				Me.Onestimated_delivery_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processing_complete_date", DbType:="Date")>  _
	Public Property processing_complete_date() As System.Nullable(Of Date)
		Get
			Return Me._processing_complete_date
		End Get
		Set
			If (Me._processing_complete_date.Equals(value) = false) Then
				Me.Onprocessing_complete_dateChanging(value)
				Me.SendPropertyChanging
				Me._processing_complete_date = value
				Me.SendPropertyChanged("processing_complete_date")
				Me.Onprocessing_complete_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_preliminary_data_complete_date", DbType:="Date")>  _
	Public Property preliminary_data_complete_date() As System.Nullable(Of Date)
		Get
			Return Me._preliminary_data_complete_date
		End Get
		Set
			If (Me._preliminary_data_complete_date.Equals(value) = false) Then
				Me.Onpreliminary_data_complete_dateChanging(value)
				Me.SendPropertyChanging
				Me._preliminary_data_complete_date = value
				Me.SendPropertyChanged("preliminary_data_complete_date")
				Me.Onpreliminary_data_complete_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_final_data_complete_date", DbType:="Date")>  _
	Public Property final_data_complete_date() As System.Nullable(Of Date)
		Get
			Return Me._final_data_complete_date
		End Get
		Set
			If (Me._final_data_complete_date.Equals(value) = false) Then
				Me.Onfinal_data_complete_dateChanging(value)
				Me.SendPropertyChanging
				Me._final_data_complete_date = value
				Me.SendPropertyChanged("final_data_complete_date")
				Me.Onfinal_data_complete_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned_to", DbType:="VarChar(200)")>  _
	Public Property assigned_to() As String
		Get
			Return Me._assigned_to
		End Get
		Set
			If (String.Equals(Me._assigned_to, value) = false) Then
				Me.Onassigned_toChanging(value)
				Me.SendPropertyChanging
				Me._assigned_to = value
				Me.SendPropertyChanged("assigned_to")
				Me.Onassigned_toChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected", DbType:="bit")>  _
	Public Property selected() As Boolean
		Get
			Return Me._selected
		End Get
		Set
			If ((Me._selected = value)  _
						= false) Then
				Me.OnselectedChanging(value)
				Me.SendPropertyChanging
				Me._selected = value
				Me.SendPropertyChanged("selected")
				Me.OnselectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="varchar(150)", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite_gpis", CanBeNull:=false)>  _
	Public Property prerequisite_gpis() As String
		Get
			Return Me._prerequisite_gpis
		End Get
		Set
			If (String.Equals(Me._prerequisite_gpis, value) = false) Then
				Me.Onprerequisite_gpisChanging(value)
				Me.SendPropertyChanging
				Me._prerequisite_gpis = value
				Me.SendPropertyChanged("prerequisite_gpis")
				Me.Onprerequisite_gpisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discipline", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property discipline() As String
		Get
			Return Me._discipline
		End Get
		Set
			If (String.Equals(Me._discipline, value) = false) Then
				Me.OndisciplineChanging(value)
				Me.SendPropertyChanging
				Me._discipline = value
				Me.SendPropertyChanged("discipline")
				Me.OndisciplineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exclude_from_quote_flag", DbType:="bit")>  _
	Public Property include_on_quote_flag() As Boolean
		Get
			Return Me._exclude_from_quote_flag
		End Get
		Set
			If ((Me._exclude_from_quote_flag = value)  _
						= false) Then
				Me.Oninclude_on_quote_flagChanging(value)
				Me.SendPropertyChanging
				Me._exclude_from_quote_flag = value
				Me.SendPropertyChanged("include_on_quote_flag")
				Me.Oninclude_on_quote_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manually_selected_flag", DbType:="bit")>  _
	Public Property manually_selected_flag() As Boolean
		Get
			Return Me._manually_selected_flag
		End Get
		Set
			If ((Me._manually_selected_flag = value)  _
						= false) Then
				Me.Onmanually_selected_flagChanging(value)
				Me.SendPropertyChanging
				Me._manually_selected_flag = value
				Me.SendPropertyChanged("manually_selected_flag")
				Me.Onmanually_selected_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_primary_sort_order", DbType:="int")>  _
	Public Property primary_sort_order() As Integer
		Get
			Return Me._primary_sort_order
		End Get
		Set
			If ((Me._primary_sort_order = value)  _
						= false) Then
				Me.Onprimary_sort_orderChanging(value)
				Me.SendPropertyChanging
				Me._primary_sort_order = value
				Me.SendPropertyChanged("primary_sort_order")
				Me.Onprimary_sort_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rush_processing_flag", DbType:="bit")>  _
	Public Property rush_processing_flag() As Boolean
		Get
			Return Me._rush_processing_flag
		End Get
		Set
			If ((Me._rush_processing_flag = value)  _
						= false) Then
				Me.Onrush_processing_flagChanging(value)
				Me.SendPropertyChanging
				Me._rush_processing_flag = value
				Me.SendPropertyChanged("rush_processing_flag")
				Me.Onrush_processing_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_type", DbType:="varchar(20)")>  _
	Public Property job_type() As String
		Get
			Return Me._job_type
		End Get
		Set
			If (String.Equals(Me._job_type, value) = false) Then
				Me.Onjob_typeChanging(value)
				Me.SendPropertyChanging
				Me._job_type = value
				Me.SendPropertyChanged("job_type")
				Me.Onjob_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processed_quantity", DbType:="real")>  _
	Public Property processed_quantity() As System.Nullable(Of Single)
		Get
			Return Me._processed_quantity
		End Get
		Set
			If (Me._processed_quantity.Equals(value) = false) Then
				Me.Onprocessed_quantityChanging(value)
				Me.SendPropertyChanging
				Me._processed_quantity = value
				Me.SendPropertyChanged("processed_quantity")
				Me.Onprocessed_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_archive_number")>  _
	Public Property archive_number() As String
		Get
			Return Me._archive_number
		End Get
		Set
			If (String.Equals(Me._archive_number, value) = false) Then
				Me.Onarchive_numberChanging(value)
				Me.SendPropertyChanging
				Me._archive_number = value
				Me.SendPropertyChanged("archive_number")
				Me.Onarchive_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned_to_names", CanBeNull:=false)>  _
	Public Property assigned_to_names() As String
		Get
			Return Me._assigned_to_names
		End Get
		Set
			If (String.Equals(Me._assigned_to_names, value) = false) Then
				Me.Onassigned_to_namesChanging(value)
				Me.SendPropertyChanging
				Me._assigned_to_names = value
				Me.SendPropertyChanged("assigned_to_names")
				Me.Onassigned_to_namesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_issues_flag", DbType:="bit")>  _
	Public Property competency_issues_flag() As Boolean
		Get
			Return Me._competency_issues_flag
		End Get
		Set
			If ((Me._competency_issues_flag = value)  _
						= false) Then
				Me.Oncompetency_issues_flagChanging(value)
				Me.SendPropertyChanging
				Me._competency_issues_flag = value
				Me.SendPropertyChanged("competency_issues_flag")
				Me.Oncompetency_issues_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_qc", CanBeNull:=false)>  _
	Public Property data_qc() As String
		Get
			Return Me._data_qc
		End Get
		Set
			If (String.Equals(Me._data_qc, value) = false) Then
				Me.Ondata_qcChanging(value)
				Me.SendPropertyChanging
				Me._data_qc = value
				Me.SendPropertyChanged("data_qc")
				Me.Ondata_qcChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.geoscience_prerequisite_gpi")>  _
Partial Public Class geoscience_prerequisite_gpi
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gpi As String
	
	Private _prerequisite_gpi_list As String
	
	Private _original_gpi As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub Onprerequisite_gpi_listChanging(value As String)
    End Sub
    Partial Private Sub Onprerequisite_gpi_listChanged()
    End Sub
    Partial Private Sub Onoriginal_gpiChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_gpiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite_gpi_list", DbType:="VarChar(500)", CanBeNull:=false)>  _
	Public Property prerequisite_gpi_list() As String
		Get
			Return Me._prerequisite_gpi_list
		End Get
		Set
			If (String.Equals(Me._prerequisite_gpi_list, value) = false) Then
				Me.Onprerequisite_gpi_listChanging(value)
				Me.SendPropertyChanging
				Me._prerequisite_gpi_list = value
				Me.SendPropertyChanged("prerequisite_gpi_list")
				Me.Onprerequisite_gpi_listChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_gpi", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property original_gpi() As String
		Get
			Return Me._original_gpi
		End Get
		Set
			If (String.Equals(Me._original_gpi, value) = false) Then
				Me.Onoriginal_gpiChanging(value)
				Me.SendPropertyChanging
				Me._original_gpi = value
				Me.SendPropertyChanged("original_gpi")
				Me.Onoriginal_gpiChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.geoscience_gpi_requirement")>  _
Partial Public Class geoscience_gpi_requirement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gpi As String
	
	Private _requirement As String
	
	Private _original_gpi As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub OnrequirementChanging(value As String)
    End Sub
    Partial Private Sub OnrequirementChanged()
    End Sub
    Partial Private Sub Onoriginal_gpiChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_gpiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirement", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property requirement() As String
		Get
			Return Me._requirement
		End Get
		Set
			If (String.Equals(Me._requirement, value) = false) Then
				Me.OnrequirementChanging(value)
				Me.SendPropertyChanging
				Me._requirement = value
				Me.SendPropertyChanged("requirement")
				Me.OnrequirementChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_gpi", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property original_gpi() As String
		Get
			Return Me._original_gpi
		End Get
		Set
			If (String.Equals(Me._original_gpi, value) = false) Then
				Me.Onoriginal_gpiChanging(value)
				Me.SendPropertyChanging
				Me._original_gpi = value
				Me.SendPropertyChanged("original_gpi")
				Me.Onoriginal_gpiChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class geoscience_gpi_competency
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gpi As String
	
	Private _requirement As String
	
	Private _original_gpi As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub Oncompetency_descChanging(value As String)
    End Sub
    Partial Private Sub Oncompetency_descChanged()
    End Sub
    Partial Private Sub Onoriginal_gpiChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_gpiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirement", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_desc() As String
		Get
			Return Me._requirement
		End Get
		Set
			If (String.Equals(Me._requirement, value) = false) Then
				Me.Oncompetency_descChanging(value)
				Me.SendPropertyChanging
				Me._requirement = value
				Me.SendPropertyChanged("competency_desc")
				Me.Oncompetency_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_gpi", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property original_gpi() As String
		Get
			Return Me._original_gpi
		End Get
		Set
			If (String.Equals(Me._original_gpi, value) = false) Then
				Me.Onoriginal_gpiChanging(value)
				Me.SendPropertyChanging
				Me._original_gpi = value
				Me.SendPropertyChanged("original_gpi")
				Me.Onoriginal_gpiChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asset_pm_point_calculation_config")>  _
Partial Public Class asset_pm_point_calculation_config
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _series_id As String
	
	Private _trigger_rec_id As Byte
	
	Private _function_rec_id As Byte
	
	Private _multiplicative As System.Nullable(Of Single)
	
	Private _exponent As System.Nullable(Of Single)
	
	Private _additive As System.Nullable(Of Single)
	
	Private _value_range_low As System.Nullable(Of Single)
	
	Private _value_range_high As System.Nullable(Of Single)
	
	Private _additional_criteria As String
	
	Private _original_series_id As String
	
	Private _original_trigger_rec_id As Byte
	
	Private _value_origin As String
	
	Private _value_range_is_exclusive_flag As Boolean
	
	Private _value_additional_criteria_flag As Boolean
	
	Private _trigger_name As String
	
	Private _series_type As String
	
	Private _original_series_type As String
	
	Private _inactive_flag As Boolean
	
	Private _required_function_rec_id As System.Nullable(Of Byte)
	
	Private _code_type_rec_id As System.Nullable(Of Integer)
	
	Private _apply_op_time_modifier_flag As Boolean
	
	Private _spec_value As System.Nullable(Of Single)
	
	Private _over_spec_points As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Ontrigger_rec_idChanging(value As Byte)
    End Sub
    Partial Private Sub Ontrigger_rec_idChanged()
    End Sub
    Partial Private Sub Onfunction_rec_idChanging(value As Byte)
    End Sub
    Partial Private Sub Onfunction_rec_idChanged()
    End Sub
    Partial Private Sub OnmultiplicativeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnmultiplicativeChanged()
    End Sub
    Partial Private Sub OnexponentChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnexponentChanged()
    End Sub
    Partial Private Sub OnadditiveChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnadditiveChanged()
    End Sub
    Partial Private Sub Onvalue_range_lowChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onvalue_range_lowChanged()
    End Sub
    Partial Private Sub Onvalue_range_highChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onvalue_range_highChanged()
    End Sub
    Partial Private Sub Onadditional_criteriaChanging(value As String)
    End Sub
    Partial Private Sub Onadditional_criteriaChanged()
    End Sub
    Partial Private Sub Onoriginal_series_idChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_series_idChanged()
    End Sub
    Partial Private Sub Onoriginal_trigger_rec_idChanging(value As Byte)
    End Sub
    Partial Private Sub Onoriginal_trigger_rec_idChanged()
    End Sub
    Partial Private Sub Onvalue_originChanging(value As String)
    End Sub
    Partial Private Sub Onvalue_originChanged()
    End Sub
    Partial Private Sub Onvalue_range_is_exclusive_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onvalue_range_is_exclusive_flagChanged()
    End Sub
    Partial Private Sub Onvalue_additional_criteria_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onvalue_additional_criteria_flagChanged()
    End Sub
    Partial Private Sub Ontrigger_nameChanging(value As String)
    End Sub
    Partial Private Sub Ontrigger_nameChanged()
    End Sub
    Partial Private Sub OnattributeChanging(value As String)
    End Sub
    Partial Private Sub OnattributeChanged()
    End Sub
    Partial Private Sub Onoriginal_attributeChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_attributeChanged()
    End Sub
    Partial Private Sub Oninactive_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninactive_flagChanged()
    End Sub
    Partial Private Sub Onrequired_function_rec_idChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Onrequired_function_rec_idChanged()
    End Sub
    Partial Private Sub Oncode_type_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncode_type_rec_idChanged()
    End Sub
    Partial Private Sub Onapply_op_time_modifier_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onapply_op_time_modifier_flagChanged()
    End Sub
    Partial Private Sub Onspec_valueChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onspec_valueChanged()
    End Sub
    Partial Private Sub Onover_spec_pointsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onover_spec_pointsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trigger_rec_id", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property trigger_rec_id() As Byte
		Get
			Return Me._trigger_rec_id
		End Get
		Set
			If ((Me._trigger_rec_id = value)  _
						= false) Then
				Me.Ontrigger_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._trigger_rec_id = value
				Me.SendPropertyChanged("trigger_rec_id")
				Me.Ontrigger_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_function_rec_id", DbType:="TinyInt NOT NULL")>  _
	Public Property function_rec_id() As Byte
		Get
			Return Me._function_rec_id
		End Get
		Set
			If ((Me._function_rec_id = value)  _
						= false) Then
				Me.Onfunction_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._function_rec_id = value
				Me.SendPropertyChanged("function_rec_id")
				Me.Onfunction_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_multiplicative", DbType:="Real")>  _
	Public Property multiplicative() As System.Nullable(Of Single)
		Get
			Return Me._multiplicative
		End Get
		Set
			If (Me._multiplicative.Equals(value) = false) Then
				Me.OnmultiplicativeChanging(value)
				Me.SendPropertyChanging
				Me._multiplicative = value
				Me.SendPropertyChanged("multiplicative")
				Me.OnmultiplicativeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exponent", DbType:="Real")>  _
	Public Property exponent() As System.Nullable(Of Single)
		Get
			Return Me._exponent
		End Get
		Set
			If (Me._exponent.Equals(value) = false) Then
				Me.OnexponentChanging(value)
				Me.SendPropertyChanging
				Me._exponent = value
				Me.SendPropertyChanged("exponent")
				Me.OnexponentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additive", DbType:="Real")>  _
	Public Property additive() As System.Nullable(Of Single)
		Get
			Return Me._additive
		End Get
		Set
			If (Me._additive.Equals(value) = false) Then
				Me.OnadditiveChanging(value)
				Me.SendPropertyChanging
				Me._additive = value
				Me.SendPropertyChanged("additive")
				Me.OnadditiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_range_low", DbType:="Real")>  _
	Public Property value_range_low() As System.Nullable(Of Single)
		Get
			Return Me._value_range_low
		End Get
		Set
			If (Me._value_range_low.Equals(value) = false) Then
				Me.Onvalue_range_lowChanging(value)
				Me.SendPropertyChanging
				Me._value_range_low = value
				Me.SendPropertyChanged("value_range_low")
				Me.Onvalue_range_lowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_range_high", DbType:="Real")>  _
	Public Property value_range_high() As System.Nullable(Of Single)
		Get
			Return Me._value_range_high
		End Get
		Set
			If (Me._value_range_high.Equals(value) = false) Then
				Me.Onvalue_range_highChanging(value)
				Me.SendPropertyChanging
				Me._value_range_high = value
				Me.SendPropertyChanged("value_range_high")
				Me.Onvalue_range_highChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_criteria", DbType:="VarChar(2000)")>  _
	Public Property additional_criteria() As String
		Get
			Return Me._additional_criteria
		End Get
		Set
			If (String.Equals(Me._additional_criteria, value) = false) Then
				Me.Onadditional_criteriaChanging(value)
				Me.SendPropertyChanging
				Me._additional_criteria = value
				Me.SendPropertyChanged("additional_criteria")
				Me.Onadditional_criteriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_series_id", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property original_series_id() As String
		Get
			Return Me._original_series_id
		End Get
		Set
			If (String.Equals(Me._original_series_id, value) = false) Then
				Me.Onoriginal_series_idChanging(value)
				Me.SendPropertyChanging
				Me._original_series_id = value
				Me.SendPropertyChanged("original_series_id")
				Me.Onoriginal_series_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_trigger_rec_id", DbType:="tinyint")>  _
	Public Property original_trigger_rec_id() As Byte
		Get
			Return Me._original_trigger_rec_id
		End Get
		Set
			If ((Me._original_trigger_rec_id = value)  _
						= false) Then
				Me.Onoriginal_trigger_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._original_trigger_rec_id = value
				Me.SendPropertyChanged("original_trigger_rec_id")
				Me.Onoriginal_trigger_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_origin", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property value_origin() As String
		Get
			Return Me._value_origin
		End Get
		Set
			If (String.Equals(Me._value_origin, value) = false) Then
				Me.Onvalue_originChanging(value)
				Me.SendPropertyChanging
				Me._value_origin = value
				Me.SendPropertyChanged("value_origin")
				Me.Onvalue_originChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_range_is_exclusive_flag", DbType:="bit")>  _
	Public Property value_range_is_exclusive_flag() As Boolean
		Get
			Return Me._value_range_is_exclusive_flag
		End Get
		Set
			If ((Me._value_range_is_exclusive_flag = value)  _
						= false) Then
				Me.Onvalue_range_is_exclusive_flagChanging(value)
				Me.SendPropertyChanging
				Me._value_range_is_exclusive_flag = value
				Me.SendPropertyChanged("value_range_is_exclusive_flag")
				Me.Onvalue_range_is_exclusive_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_additional_criteria_flag", DbType:="bit")>  _
	Public Property value_additional_criteria_flag() As Boolean
		Get
			Return Me._value_additional_criteria_flag
		End Get
		Set
			If ((Me._value_additional_criteria_flag = value)  _
						= false) Then
				Me.Onvalue_additional_criteria_flagChanging(value)
				Me.SendPropertyChanging
				Me._value_additional_criteria_flag = value
				Me.SendPropertyChanged("value_additional_criteria_flag")
				Me.Onvalue_additional_criteria_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trigger_name", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property trigger_name() As String
		Get
			Return Me._trigger_name
		End Get
		Set
			If (String.Equals(Me._trigger_name, value) = false) Then
				Me.Ontrigger_nameChanging(value)
				Me.SendPropertyChanging
				Me._trigger_name = value
				Me.SendPropertyChanged("trigger_name")
				Me.Ontrigger_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_type", DbType:="varchar(50)", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property attribute() As String
		Get
			Return Me._series_type
		End Get
		Set
			If (String.Equals(Me._series_type, value) = false) Then
				Me.OnattributeChanging(value)
				Me.SendPropertyChanging
				Me._series_type = value
				Me.SendPropertyChanged("attribute")
				Me.OnattributeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_series_type", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property original_attribute() As String
		Get
			Return Me._original_series_type
		End Get
		Set
			If (String.Equals(Me._original_series_type, value) = false) Then
				Me.Onoriginal_attributeChanging(value)
				Me.SendPropertyChanging
				Me._original_series_type = value
				Me.SendPropertyChanged("original_attribute")
				Me.Onoriginal_attributeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="bit")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me.Oninactive_flagChanging(value)
				Me.SendPropertyChanging
				Me._inactive_flag = value
				Me.SendPropertyChanged("inactive_flag")
				Me.Oninactive_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required_function_rec_id", DbType:="tinyint")>  _
	Public Property required_function_rec_id() As System.Nullable(Of Byte)
		Get
			Return Me._required_function_rec_id
		End Get
		Set
			If (Me._required_function_rec_id.Equals(value) = false) Then
				Me.Onrequired_function_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._required_function_rec_id = value
				Me.SendPropertyChanged("required_function_rec_id")
				Me.Onrequired_function_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_type_rec_id", DbType:="int")>  _
	Public Property code_type_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._code_type_rec_id
		End Get
		Set
			If (Me._code_type_rec_id.Equals(value) = false) Then
				Me.Oncode_type_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._code_type_rec_id = value
				Me.SendPropertyChanged("code_type_rec_id")
				Me.Oncode_type_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apply_op_time_modifier_flag", DbType:="bit")>  _
	Public Property apply_op_time_modifier_flag() As Boolean
		Get
			Return Me._apply_op_time_modifier_flag
		End Get
		Set
			If ((Me._apply_op_time_modifier_flag = value)  _
						= false) Then
				Me.Onapply_op_time_modifier_flagChanging(value)
				Me.SendPropertyChanging
				Me._apply_op_time_modifier_flag = value
				Me.SendPropertyChanged("apply_op_time_modifier_flag")
				Me.Onapply_op_time_modifier_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_spec_value", DbType:="real")>  _
	Public Property spec_value() As System.Nullable(Of Single)
		Get
			Return Me._spec_value
		End Get
		Set
			If (Me._spec_value.Equals(value) = false) Then
				Me.Onspec_valueChanging(value)
				Me.SendPropertyChanging
				Me._spec_value = value
				Me.SendPropertyChanged("spec_value")
				Me.Onspec_valueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_over_spec_points", DbType:="real")>  _
	Public Property over_spec_points() As System.Nullable(Of Single)
		Get
			Return Me._over_spec_points
		End Get
		Set
			If (Me._over_spec_points.Equals(value) = false) Then
				Me.Onover_spec_pointsChanging(value)
				Me.SendPropertyChanging
				Me._over_spec_points = value
				Me.SendPropertyChanged("over_spec_points")
				Me.Onover_spec_pointsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_hist_asset_pm_point_calculation_config")>  _
Partial Public Class v_hist_asset_pm_point_calculation_config
	
	Private _hist_rec_id As Integer
	
	Private _trxn_type As String
	
	Private _update_user As String
	
	Private _update_workstation As String
	
	Private _update_time As Date
	
	Private _series_id As String
	
	Private _trigger_rec_id As Byte
	
	Private _function_rec_id As Byte
	
	Private _multiplicative As System.Nullable(Of Single)
	
	Private _exponent As System.Nullable(Of Single)
	
	Private _additive As System.Nullable(Of Single)
	
	Private _value_range_low As System.Nullable(Of Single)
	
	Private _value_range_high As System.Nullable(Of Single)
	
	Private _additional_criteria As String
	
	Private _trigger_name As String
	
	Private _function_name As String
	
	Private _series_type As String
	
	Private _inactive_flag As System.Nullable(Of Boolean)
	
	Private _code_type_rec_id As System.Nullable(Of Integer)
	
	Private _spec_value As System.Nullable(Of Single)
	
	Private _over_spec_points As System.Nullable(Of Single)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hist_rec_id", DbType:="Int NOT NULL")>  _
	Public Property hist_rec_id() As Integer
		Get
			Return Me._hist_rec_id
		End Get
		Set
			If ((Me._hist_rec_id = value)  _
						= false) Then
				Me._hist_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trxn_type", CanBeNull:=false)>  _
	Public Property trxn_type() As String
		Get
			Return Me._trxn_type
		End Get
		Set
			If (String.Equals(Me._trxn_type, value) = false) Then
				Me._trxn_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_user", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property update_user() As String
		Get
			Return Me._update_user
		End Get
		Set
			If (String.Equals(Me._update_user, value) = false) Then
				Me._update_user = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_workstation", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property update_workstation() As String
		Get
			Return Me._update_workstation
		End Get
		Set
			If (String.Equals(Me._update_workstation, value) = false) Then
				Me._update_workstation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_time", DbType:="DateTime NOT NULL")>  _
	Public Property update_time() As Date
		Get
			Return Me._update_time
		End Get
		Set
			If ((Me._update_time = value)  _
						= false) Then
				Me._update_time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trigger_rec_id", DbType:="TinyInt NOT NULL")>  _
	Public Property trigger_rec_id() As Byte
		Get
			Return Me._trigger_rec_id
		End Get
		Set
			If ((Me._trigger_rec_id = value)  _
						= false) Then
				Me._trigger_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_function_rec_id", DbType:="TinyInt NOT NULL")>  _
	Public Property function_rec_id() As Byte
		Get
			Return Me._function_rec_id
		End Get
		Set
			If ((Me._function_rec_id = value)  _
						= false) Then
				Me._function_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_multiplicative", DbType:="Real")>  _
	Public Property multiplicative() As System.Nullable(Of Single)
		Get
			Return Me._multiplicative
		End Get
		Set
			If (Me._multiplicative.Equals(value) = false) Then
				Me._multiplicative = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exponent", DbType:="Real")>  _
	Public Property exponent() As System.Nullable(Of Single)
		Get
			Return Me._exponent
		End Get
		Set
			If (Me._exponent.Equals(value) = false) Then
				Me._exponent = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additive", DbType:="Real")>  _
	Public Property additive() As System.Nullable(Of Single)
		Get
			Return Me._additive
		End Get
		Set
			If (Me._additive.Equals(value) = false) Then
				Me._additive = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_range_low", DbType:="Real")>  _
	Public Property value_range_low() As System.Nullable(Of Single)
		Get
			Return Me._value_range_low
		End Get
		Set
			If (Me._value_range_low.Equals(value) = false) Then
				Me._value_range_low = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_range_high", DbType:="Real")>  _
	Public Property value_range_high() As System.Nullable(Of Single)
		Get
			Return Me._value_range_high
		End Get
		Set
			If (Me._value_range_high.Equals(value) = false) Then
				Me._value_range_high = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_criteria", DbType:="VarChar(2000)")>  _
	Public Property additional_criteria() As String
		Get
			Return Me._additional_criteria
		End Get
		Set
			If (String.Equals(Me._additional_criteria, value) = false) Then
				Me._additional_criteria = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trigger_name", DbType:="VarChar(30)")>  _
	Public Property trigger_name() As String
		Get
			Return Me._trigger_name
		End Get
		Set
			If (String.Equals(Me._trigger_name, value) = false) Then
				Me._trigger_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_function_name", DbType:="VarChar(30)")>  _
	Public Property function_name() As String
		Get
			Return Me._function_name
		End Get
		Set
			If (String.Equals(Me._function_name, value) = false) Then
				Me._function_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_type", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property attribute() As String
		Get
			Return Me._series_type
		End Get
		Set
			If (String.Equals(Me._series_type, value) = false) Then
				Me._series_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="bit")>  _
	Public Property inactive_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._inactive_flag
		End Get
		Set
			If (Me._inactive_flag.Equals(value) = false) Then
				Me._inactive_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_type_rec_id", DbType:="int")>  _
	Public Property code_type_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._code_type_rec_id
		End Get
		Set
			If (Me._code_type_rec_id.Equals(value) = false) Then
				Me._code_type_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_spec_value", DbType:="real")>  _
	Public Property spec_value() As System.Nullable(Of Single)
		Get
			Return Me._spec_value
		End Get
		Set
			If (Me._spec_value.Equals(value) = false) Then
				Me._spec_value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_over_spec_points", DbType:="real")>  _
	Public Property over_spec_points() As System.Nullable(Of Single)
		Get
			Return Me._over_spec_points
		End Get
		Set
			If (Me._over_spec_points.Equals(value) = false) Then
				Me._over_spec_points = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.geoscience_gpi")>  _
Partial Public Class geoscience_gpi
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gpi As String
	
	Private _qc_flag As Boolean
	
	Private _original_gpi As String
	
	Private _discipline_id As System.Nullable(Of Short)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub Onqc_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onqc_flagChanged()
    End Sub
    Partial Private Sub Onoriginal_gpiChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_gpiChanged()
    End Sub
    Partial Private Sub Ondiscipline_idChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub Ondiscipline_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qc_flag", DbType:="Bit NOT NULL")>  _
	Public Property qc_flag() As Boolean
		Get
			Return Me._qc_flag
		End Get
		Set
			If ((Me._qc_flag = value)  _
						= false) Then
				Me.Onqc_flagChanging(value)
				Me.SendPropertyChanging
				Me._qc_flag = value
				Me.SendPropertyChanged("qc_flag")
				Me.Onqc_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_gpi", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property original_gpi() As String
		Get
			Return Me._original_gpi
		End Get
		Set
			If (String.Equals(Me._original_gpi, value) = false) Then
				Me.Onoriginal_gpiChanging(value)
				Me.SendPropertyChanging
				Me._original_gpi = value
				Me.SendPropertyChanged("original_gpi")
				Me.Onoriginal_gpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discipline_id", DbType:="smallint")>  _
	Public Property discipline_id() As System.Nullable(Of Short)
		Get
			Return Me._discipline_id
		End Get
		Set
			If (Me._discipline_id.Equals(value) = false) Then
				Me.Ondiscipline_idChanging(value)
				Me.SendPropertyChanging
				Me._discipline_id = value
				Me.SendPropertyChanged("discipline_id")
				Me.Ondiscipline_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.bonus_meal_territory_profit_center")>  _
Partial Public Class bonus_meal_territory_profit_center
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _territory_id As Integer
	
	Private _profit_center_ids As String
	
	Private _original_territory_id As Integer
	
	Private _profit_center_names As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onterritory_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onterritory_idChanged()
    End Sub
    Partial Private Sub Onprofit_center_idsChanging(value As String)
    End Sub
    Partial Private Sub Onprofit_center_idsChanged()
    End Sub
    Partial Private Sub Onoriginal_territory_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onoriginal_territory_idChanged()
    End Sub
    Partial Private Sub Onprofit_center_namesChanging(value As String)
    End Sub
    Partial Private Sub Onprofit_center_namesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property territory_id() As Integer
		Get
			Return Me._territory_id
		End Get
		Set
			If ((Me._territory_id = value)  _
						= false) Then
				Me.Onterritory_idChanging(value)
				Me.SendPropertyChanging
				Me._territory_id = value
				Me.SendPropertyChanged("territory_id")
				Me.Onterritory_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profit_center_ids", DbType:="varchar(2000)", CanBeNull:=false)>  _
	Public Property profit_center_ids() As String
		Get
			Return Me._profit_center_ids
		End Get
		Set
			If (String.Equals(Me._profit_center_ids, value) = false) Then
				Me.Onprofit_center_idsChanging(value)
				Me.SendPropertyChanging
				Me._profit_center_ids = value
				Me.SendPropertyChanged("profit_center_ids")
				Me.Onprofit_center_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_territory_id", DbType:="int")>  _
	Public Property original_territory_id() As Integer
		Get
			Return Me._original_territory_id
		End Get
		Set
			If ((Me._original_territory_id = value)  _
						= false) Then
				Me.Onoriginal_territory_idChanging(value)
				Me.SendPropertyChanging
				Me._original_territory_id = value
				Me.SendPropertyChanged("original_territory_id")
				Me.Onoriginal_territory_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profit_center_names", CanBeNull:=false)>  _
	Public Property profit_center_names() As String
		Get
			Return Me._profit_center_names
		End Get
		Set
			If (String.Equals(Me._profit_center_names, value) = false) Then
				Me.Onprofit_center_namesChanging(value)
				Me.SendPropertyChanging
				Me._profit_center_names = value
				Me.SendPropertyChanged("profit_center_names")
				Me.Onprofit_center_namesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.bonus_meal_territory")>  _
Partial Public Class bonus_meal_territory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _territory_id As Integer
	
	Private _territory_desc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onterritory_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onterritory_idChanged()
    End Sub
    Partial Private Sub Onterritory_descChanging(value As String)
    End Sub
    Partial Private Sub Onterritory_descChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property territory_id() As Integer
		Get
			Return Me._territory_id
		End Get
		Set
			If ((Me._territory_id = value)  _
						= false) Then
				Me.Onterritory_idChanging(value)
				Me.SendPropertyChanging
				Me._territory_id = value
				Me.SendPropertyChanged("territory_id")
				Me.Onterritory_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property territory_desc() As String
		Get
			Return Me._territory_desc
		End Get
		Set
			If (String.Equals(Me._territory_desc, value) = false) Then
				Me.Onterritory_descChanging(value)
				Me.SendPropertyChanging
				Me._territory_desc = value
				Me.SendPropertyChanged("territory_desc")
				Me.Onterritory_descChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.field_job_bonus_max_percent")>  _
Partial Public Class field_job_bonus_max_percent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _territory_id As Integer
	
	Private _member_title_id As String
	
	Private _max_percent As Single
	
	Private _original_territory_id As Integer
	
	Private _original_member_title_id As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onterritory_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onterritory_idChanged()
    End Sub
    Partial Private Sub Onmember_title_idChanging(value As String)
    End Sub
    Partial Private Sub Onmember_title_idChanged()
    End Sub
    Partial Private Sub Onmax_percentChanging(value As Single)
    End Sub
    Partial Private Sub Onmax_percentChanged()
    End Sub
    Partial Private Sub Onoriginal_territory_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onoriginal_territory_idChanged()
    End Sub
    Partial Private Sub Onoriginal_member_title_idChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_member_title_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property territory_id() As Integer
		Get
			Return Me._territory_id
		End Get
		Set
			If ((Me._territory_id = value)  _
						= false) Then
				Me.Onterritory_idChanging(value)
				Me.SendPropertyChanging
				Me._territory_id = value
				Me.SendPropertyChanged("territory_id")
				Me.Onterritory_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me.Onmember_title_idChanging(value)
				Me.SendPropertyChanging
				Me._member_title_id = value
				Me.SendPropertyChanged("member_title_id")
				Me.Onmember_title_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_percent", DbType:="Real NOT NULL")>  _
	Public Property max_percent() As Single
		Get
			Return Me._max_percent
		End Get
		Set
			If ((Me._max_percent = value)  _
						= false) Then
				Me.Onmax_percentChanging(value)
				Me.SendPropertyChanging
				Me._max_percent = value
				Me.SendPropertyChanged("max_percent")
				Me.Onmax_percentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_territory_id", DbType:="Int")>  _
	Public Property original_territory_id() As Integer
		Get
			Return Me._original_territory_id
		End Get
		Set
			If ((Me._original_territory_id = value)  _
						= false) Then
				Me.Onoriginal_territory_idChanging(value)
				Me.SendPropertyChanging
				Me._original_territory_id = value
				Me.SendPropertyChanged("original_territory_id")
				Me.Onoriginal_territory_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_member_title_id", DbType:="VarChar(10)", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property original_member_title_id() As String
		Get
			Return Me._original_member_title_id
		End Get
		Set
			If (String.Equals(Me._original_member_title_id, value) = false) Then
				Me.Onoriginal_member_title_idChanging(value)
				Me.SendPropertyChanging
				Me._original_member_title_id = value
				Me.SendPropertyChanged("original_member_title_id")
				Me.Onoriginal_member_title_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.geoscience_discipline")>  _
Partial Public Class geoscience_discipline
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Short
	
	Private _discipline As String
	
	Private _short_name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Short)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub OndisciplineChanging(value As String)
    End Sub
    Partial Private Sub OndisciplineChanged()
    End Sub
    Partial Private Sub Onshort_nameChanging(value As String)
    End Sub
    Partial Private Sub Onshort_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Short
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discipline", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property discipline() As String
		Get
			Return Me._discipline
		End Get
		Set
			If (String.Equals(Me._discipline, value) = false) Then
				Me.OndisciplineChanging(value)
				Me.SendPropertyChanging
				Me._discipline = value
				Me.SendPropertyChanged("discipline")
				Me.OndisciplineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_short_name", DbType:="VarChar(20)")>  _
	Public Property short_name() As String
		Get
			Return Me._short_name
		End Get
		Set
			If (String.Equals(Me._short_name, value) = false) Then
				Me.Onshort_nameChanging(value)
				Me.SendPropertyChanging
				Me._short_name = value
				Me.SendPropertyChanged("short_name")
				Me.Onshort_nameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.lost_detail")>  _
Partial Public Class lost_detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _lost_detail_desc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onlost_detail_descChanging(value As String)
    End Sub
    Partial Private Sub Onlost_detail_descChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_detail_desc", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property lost_detail_desc() As String
		Get
			Return Me._lost_detail_desc
		End Get
		Set
			If (String.Equals(Me._lost_detail_desc, value) = false) Then
				Me.Onlost_detail_descChanging(value)
				Me.SendPropertyChanging
				Me._lost_detail_desc = value
				Me.SendPropertyChanged("lost_detail_desc")
				Me.Onlost_detail_descChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asset_series_code_type")>  _
Partial Public Class asset_series_code_type
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _code_desc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Oncode_descChanging(value As String)
    End Sub
    Partial Private Sub Oncode_descChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property code_desc() As String
		Get
			Return Me._code_desc
		End Get
		Set
			If (String.Equals(Me._code_desc, value) = false) Then
				Me.Oncode_descChanging(value)
				Me.SendPropertyChanging
				Me._code_desc = value
				Me.SendPropertyChanged("code_desc")
				Me.Oncode_descChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.truck_config")>  _
Partial Public Class truck_config
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _truck As String
	
	Private _comms_system As String
	
	Private _comms_system_upload_speed As System.Nullable(Of Single)
	
	Private _comms_system_download_speed As System.Nullable(Of Single)
	
	Private _comms_system_latency As System.Nullable(Of Single)
	
	Private _acquisition_system_type As String
	
	Private _acquisition_system_version As String
	
	Private _acquisition_system_patch_date As System.Nullable(Of Date)
	
	Private _acquisition_system_update_date As System.Nullable(Of Date)
	
	Private _comms_provider As String
	
	Private _new_rec_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntruckChanging(value As String)
    End Sub
    Partial Private Sub OntruckChanged()
    End Sub
    Partial Private Sub Oncomms_systemChanging(value As String)
    End Sub
    Partial Private Sub Oncomms_systemChanged()
    End Sub
    Partial Private Sub Oncomms_system_upload_speedChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncomms_system_upload_speedChanged()
    End Sub
    Partial Private Sub Oncomms_system_download_speedChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncomms_system_download_speedChanged()
    End Sub
    Partial Private Sub Oncomms_system_latencyChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncomms_system_latencyChanged()
    End Sub
    Partial Private Sub Onacquisition_system_typeChanging(value As String)
    End Sub
    Partial Private Sub Onacquisition_system_typeChanged()
    End Sub
    Partial Private Sub Onacquisition_system_versionChanging(value As String)
    End Sub
    Partial Private Sub Onacquisition_system_versionChanged()
    End Sub
    Partial Private Sub Onacquisition_system_patch_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onacquisition_system_patch_dateChanged()
    End Sub
    Partial Private Sub Onacquisition_system_update_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onacquisition_system_update_dateChanged()
    End Sub
    Partial Private Sub Oncomms_providerChanging(value As String)
    End Sub
    Partial Private Sub Oncomms_providerChanged()
    End Sub
    Partial Private Sub Onnew_rec_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onnew_rec_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me.OntruckChanging(value)
				Me.SendPropertyChanging
				Me._truck = value
				Me.SendPropertyChanged("truck")
				Me.OntruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comms_system", DbType:="VarChar(50)")>  _
	Public Property comms_system() As String
		Get
			Return Me._comms_system
		End Get
		Set
			If (String.Equals(Me._comms_system, value) = false) Then
				Me.Oncomms_systemChanging(value)
				Me.SendPropertyChanging
				Me._comms_system = value
				Me.SendPropertyChanged("comms_system")
				Me.Oncomms_systemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comms_system_upload_speed", DbType:="Real")>  _
	Public Property comms_system_upload_speed() As System.Nullable(Of Single)
		Get
			Return Me._comms_system_upload_speed
		End Get
		Set
			If (Me._comms_system_upload_speed.Equals(value) = false) Then
				Me.Oncomms_system_upload_speedChanging(value)
				Me.SendPropertyChanging
				Me._comms_system_upload_speed = value
				Me.SendPropertyChanged("comms_system_upload_speed")
				Me.Oncomms_system_upload_speedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comms_system_download_speed", DbType:="Real")>  _
	Public Property comms_system_download_speed() As System.Nullable(Of Single)
		Get
			Return Me._comms_system_download_speed
		End Get
		Set
			If (Me._comms_system_download_speed.Equals(value) = false) Then
				Me.Oncomms_system_download_speedChanging(value)
				Me.SendPropertyChanging
				Me._comms_system_download_speed = value
				Me.SendPropertyChanged("comms_system_download_speed")
				Me.Oncomms_system_download_speedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comms_system_latency", DbType:="Real")>  _
	Public Property comms_system_latency() As System.Nullable(Of Single)
		Get
			Return Me._comms_system_latency
		End Get
		Set
			If (Me._comms_system_latency.Equals(value) = false) Then
				Me.Oncomms_system_latencyChanging(value)
				Me.SendPropertyChanging
				Me._comms_system_latency = value
				Me.SendPropertyChanged("comms_system_latency")
				Me.Oncomms_system_latencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_system_type", DbType:="VarChar(20)")>  _
	Public Property acquisition_system_type() As String
		Get
			Return Me._acquisition_system_type
		End Get
		Set
			If (String.Equals(Me._acquisition_system_type, value) = false) Then
				Me.Onacquisition_system_typeChanging(value)
				Me.SendPropertyChanging
				Me._acquisition_system_type = value
				Me.SendPropertyChanged("acquisition_system_type")
				Me.Onacquisition_system_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_system_version", DbType:="VarChar(10)")>  _
	Public Property acquisition_system_version() As String
		Get
			Return Me._acquisition_system_version
		End Get
		Set
			If (String.Equals(Me._acquisition_system_version, value) = false) Then
				Me.Onacquisition_system_versionChanging(value)
				Me.SendPropertyChanging
				Me._acquisition_system_version = value
				Me.SendPropertyChanged("acquisition_system_version")
				Me.Onacquisition_system_versionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_system_patch_date", DbType:="Date")>  _
	Public Property acquisition_system_patch_date() As System.Nullable(Of Date)
		Get
			Return Me._acquisition_system_patch_date
		End Get
		Set
			If (Me._acquisition_system_patch_date.Equals(value) = false) Then
				Me.Onacquisition_system_patch_dateChanging(value)
				Me.SendPropertyChanging
				Me._acquisition_system_patch_date = value
				Me.SendPropertyChanged("acquisition_system_patch_date")
				Me.Onacquisition_system_patch_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_system_update_date", DbType:="Date")>  _
	Public Property acquisition_system_update_date() As System.Nullable(Of Date)
		Get
			Return Me._acquisition_system_update_date
		End Get
		Set
			If (Me._acquisition_system_update_date.Equals(value) = false) Then
				Me.Onacquisition_system_update_dateChanging(value)
				Me.SendPropertyChanging
				Me._acquisition_system_update_date = value
				Me.SendPropertyChanged("acquisition_system_update_date")
				Me.Onacquisition_system_update_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comms_provider", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property comms_provider() As String
		Get
			Return Me._comms_provider
		End Get
		Set
			If (String.Equals(Me._comms_provider, value) = false) Then
				Me.Oncomms_providerChanging(value)
				Me.SendPropertyChanging
				Me._comms_provider = value
				Me.SendPropertyChanged("comms_provider")
				Me.Oncomms_providerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_rec_flag")>  _
	Public Property new_rec_flag() As Boolean
		Get
			Return Me._new_rec_flag
		End Get
		Set
			If ((Me._new_rec_flag = value)  _
						= false) Then
				Me.Onnew_rec_flagChanging(value)
				Me.SendPropertyChanging
				Me._new_rec_flag = value
				Me.SendPropertyChanged("new_rec_flag")
				Me.Onnew_rec_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.truck_config_ip")>  _
Partial Public Class truck_config_ip
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _truck As String
	
	Private _component As String
	
	Private _ip_address As String
	
	Private _original_component As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntruckChanging(value As String)
    End Sub
    Partial Private Sub OntruckChanged()
    End Sub
    Partial Private Sub OncomponentChanging(value As String)
    End Sub
    Partial Private Sub OncomponentChanged()
    End Sub
    Partial Private Sub Onip_addressChanging(value As String)
    End Sub
    Partial Private Sub Onip_addressChanged()
    End Sub
    Partial Private Sub Onoriginal_componentChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_componentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me.OntruckChanging(value)
				Me.SendPropertyChanging
				Me._truck = value
				Me.SendPropertyChanged("truck")
				Me.OntruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_component", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property component() As String
		Get
			Return Me._component
		End Get
		Set
			If (String.Equals(Me._component, value) = false) Then
				Me.OncomponentChanging(value)
				Me.SendPropertyChanging
				Me._component = value
				Me.SendPropertyChanged("component")
				Me.OncomponentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ip_address", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ip_address() As String
		Get
			Return Me._ip_address
		End Get
		Set
			If (String.Equals(Me._ip_address, value) = false) Then
				Me.Onip_addressChanging(value)
				Me.SendPropertyChanging
				Me._ip_address = value
				Me.SendPropertyChanged("ip_address")
				Me.Onip_addressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_component", CanBeNull:=false)>  _
	Public Property original_component() As String
		Get
			Return Me._original_component
		End Get
		Set
			If (String.Equals(Me._original_component, value) = false) Then
				Me.Onoriginal_componentChanging(value)
				Me.SendPropertyChanging
				Me._original_component = value
				Me.SendPropertyChanged("original_component")
				Me.Onoriginal_componentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.meal_count_threshold")>  _
Partial Public Class meal_count_threshold
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _territory_id As Integer
	
	Private _hours_worked As Integer
	
	Private _meal_count As Integer
	
	Private _original_territory_id As Integer
	
	Private _original_hours_worked As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onterritory_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onterritory_idChanged()
    End Sub
    Partial Private Sub Onhours_workedChanging(value As Integer)
    End Sub
    Partial Private Sub Onhours_workedChanged()
    End Sub
    Partial Private Sub Onmeal_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onmeal_countChanged()
    End Sub
    Partial Private Sub Onoriginal_territory_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onoriginal_territory_idChanged()
    End Sub
    Partial Private Sub Onoriginal_hours_workedChanging(value As Integer)
    End Sub
    Partial Private Sub Onoriginal_hours_workedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property territory_id() As Integer
		Get
			Return Me._territory_id
		End Get
		Set
			If ((Me._territory_id = value)  _
						= false) Then
				Me.Onterritory_idChanging(value)
				Me.SendPropertyChanging
				Me._territory_id = value
				Me.SendPropertyChanged("territory_id")
				Me.Onterritory_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hours_worked", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property hours_worked() As Integer
		Get
			Return Me._hours_worked
		End Get
		Set
			If ((Me._hours_worked = value)  _
						= false) Then
				Me.Onhours_workedChanging(value)
				Me.SendPropertyChanging
				Me._hours_worked = value
				Me.SendPropertyChanged("hours_worked")
				Me.Onhours_workedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_meal_count", DbType:="Int NOT NULL")>  _
	Public Property meal_count() As Integer
		Get
			Return Me._meal_count
		End Get
		Set
			If ((Me._meal_count = value)  _
						= false) Then
				Me.Onmeal_countChanging(value)
				Me.SendPropertyChanging
				Me._meal_count = value
				Me.SendPropertyChanged("meal_count")
				Me.Onmeal_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_territory_id", DbType:="int")>  _
	Public Property original_territory_id() As Integer
		Get
			Return Me._original_territory_id
		End Get
		Set
			If ((Me._original_territory_id = value)  _
						= false) Then
				Me.Onoriginal_territory_idChanging(value)
				Me.SendPropertyChanging
				Me._original_territory_id = value
				Me.SendPropertyChanged("original_territory_id")
				Me.Onoriginal_territory_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_hours_worked", DbType:="int")>  _
	Public Property original_hours_worked() As Integer
		Get
			Return Me._original_hours_worked
		End Get
		Set
			If ((Me._original_hours_worked = value)  _
						= false) Then
				Me.Onoriginal_hours_workedChanging(value)
				Me.SendPropertyChanging
				Me._original_hours_worked = value
				Me.SendPropertyChanged("original_hours_worked")
				Me.Onoriginal_hours_workedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class truck_config_asset
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _truck As String
	
	Private _asset_id As String
	
	Private _series_id As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntruckChanging(value As String)
    End Sub
    Partial Private Sub OntruckChanged()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50) ", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me.OntruckChanging(value)
				Me.SendPropertyChanging
				Me._truck = value
				Me.SendPropertyChanged("truck")
				Me.OntruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) ", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asset_subassembly")>  _
Partial Public Class asset_subassembly
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _parent_asset_id As String
	
	Private _asset_id As String
	
	Private _install_date As System.Nullable(Of Date)
	
	Private _series_id As String
	
	Private _remove_date As System.Nullable(Of Date)
	
	Private _remove_reason As String
	
	Private _original_install_date As System.Nullable(Of Date)
	
	Private _is_new_rec_flag As Boolean
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _install_reason As String
	
	Private _original_install_reason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onparent_asset_idChanging(value As String)
    End Sub
    Partial Private Sub Onparent_asset_idChanged()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Oninstall_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oninstall_dateChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Onremove_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onremove_dateChanged()
    End Sub
    Partial Private Sub Onremove_reasonChanging(value As String)
    End Sub
    Partial Private Sub Onremove_reasonChanged()
    End Sub
    Partial Private Sub Onoriginal_install_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onoriginal_install_dateChanged()
    End Sub
    Partial Private Sub Onis_new_rec_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onis_new_rec_flagChanged()
    End Sub
    Partial Private Sub Onpm_pointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpm_pointsChanged()
    End Sub
    Partial Private Sub Oninstall_reasonChanging(value As String)
    End Sub
    Partial Private Sub Oninstall_reasonChanged()
    End Sub
    Partial Private Sub Onoriginal_install_reasonChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_install_reasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property parent_asset_id() As String
		Get
			Return Me._parent_asset_id
		End Get
		Set
			If (String.Equals(Me._parent_asset_id, value) = false) Then
				Me.Onparent_asset_idChanging(value)
				Me.SendPropertyChanging
				Me._parent_asset_id = value
				Me.SendPropertyChanged("parent_asset_id")
				Me.Onparent_asset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_install_date", DbType:="Date")>  _
	Public Property install_date() As System.Nullable(Of Date)
		Get
			Return Me._install_date
		End Get
		Set
			If (Me._install_date.Equals(value) = false) Then
				Me.Oninstall_dateChanging(value)
				Me.SendPropertyChanging
				Me._install_date = value
				Me.SendPropertyChanged("install_date")
				Me.Oninstall_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remove_date", DbType:="date")>  _
	Public Property remove_date() As System.Nullable(Of Date)
		Get
			Return Me._remove_date
		End Get
		Set
			If (Me._remove_date.Equals(value) = false) Then
				Me.Onremove_dateChanging(value)
				Me.SendPropertyChanging
				Me._remove_date = value
				Me.SendPropertyChanged("remove_date")
				Me.Onremove_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remove_reason", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property remove_reason() As String
		Get
			Return Me._remove_reason
		End Get
		Set
			If (String.Equals(Me._remove_reason, value) = false) Then
				Me.Onremove_reasonChanging(value)
				Me.SendPropertyChanging
				Me._remove_reason = value
				Me.SendPropertyChanged("remove_reason")
				Me.Onremove_reasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_install_date", DbType:="date")>  _
	Public Property original_install_date() As System.Nullable(Of Date)
		Get
			Return Me._original_install_date
		End Get
		Set
			If (Me._original_install_date.Equals(value) = false) Then
				Me.Onoriginal_install_dateChanging(value)
				Me.SendPropertyChanging
				Me._original_install_date = value
				Me.SendPropertyChanged("original_install_date")
				Me.Onoriginal_install_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_is_new_rec_flag", DbType:="bit")>  _
	Public Property is_new_rec_flag() As Boolean
		Get
			Return Me._is_new_rec_flag
		End Get
		Set
			If ((Me._is_new_rec_flag = value)  _
						= false) Then
				Me.Onis_new_rec_flagChanging(value)
				Me.SendPropertyChanging
				Me._is_new_rec_flag = value
				Me.SendPropertyChanged("is_new_rec_flag")
				Me.Onis_new_rec_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me.Onpm_pointsChanging(value)
				Me.SendPropertyChanging
				Me._pm_points = value
				Me.SendPropertyChanged("pm_points")
				Me.Onpm_pointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_install_reason", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property install_reason() As String
		Get
			Return Me._install_reason
		End Get
		Set
			If (String.Equals(Me._install_reason, value) = false) Then
				Me.Oninstall_reasonChanging(value)
				Me.SendPropertyChanging
				Me._install_reason = value
				Me.SendPropertyChanged("install_reason")
				Me.Oninstall_reasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_install_reason", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property original_install_reason() As String
		Get
			Return Me._original_install_reason
		End Get
		Set
			If (String.Equals(Me._original_install_reason, value) = false) Then
				Me.Onoriginal_install_reasonChanging(value)
				Me.SendPropertyChanging
				Me._original_install_reason = value
				Me.SendPropertyChanged("original_install_reason")
				Me.Onoriginal_install_reasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asset_subassembly_history")>  _
Partial Public Class asset_subassembly_history
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _parent_asset_id As String
	
	Private _asset_id As String
	
	Private _action_date As System.Nullable(Of Date)
	
	Private _action_type As String
	
	Private _action_reason As String
	
	Private _original_action_date As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onparent_asset_idChanging(value As String)
    End Sub
    Partial Private Sub Onparent_asset_idChanged()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onaction_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onaction_dateChanged()
    End Sub
    Partial Private Sub Onaction_typeChanging(value As String)
    End Sub
    Partial Private Sub Onaction_typeChanged()
    End Sub
    Partial Private Sub Onaction_reasonChanging(value As String)
    End Sub
    Partial Private Sub Onaction_reasonChanged()
    End Sub
    Partial Private Sub Onoriginal_action_dateChanging(value As Date)
    End Sub
    Partial Private Sub Onoriginal_action_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property parent_asset_id() As String
		Get
			Return Me._parent_asset_id
		End Get
		Set
			If (String.Equals(Me._parent_asset_id, value) = false) Then
				Me.Onparent_asset_idChanging(value)
				Me.SendPropertyChanging
				Me._parent_asset_id = value
				Me.SendPropertyChanged("parent_asset_id")
				Me.Onparent_asset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_action_date", DbType:="Date NOT NULL", IsPrimaryKey:=true)>  _
	Public Property action_date() As System.Nullable(Of Date)
		Get
			Return Me._action_date
		End Get
		Set
			If (Me._action_date.Equals(value) = false) Then
				Me.Onaction_dateChanging(value)
				Me.SendPropertyChanging
				Me._action_date = value
				Me.SendPropertyChanged("action_date")
				Me.Onaction_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_action_type", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property action_type() As String
		Get
			Return Me._action_type
		End Get
		Set
			If (String.Equals(Me._action_type, value) = false) Then
				Me.Onaction_typeChanging(value)
				Me.SendPropertyChanging
				Me._action_type = value
				Me.SendPropertyChanged("action_type")
				Me.Onaction_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_action_reason", DbType:="VarChar(50)")>  _
	Public Property action_reason() As String
		Get
			Return Me._action_reason
		End Get
		Set
			If (String.Equals(Me._action_reason, value) = false) Then
				Me.Onaction_reasonChanging(value)
				Me.SendPropertyChanging
				Me._action_reason = value
				Me.SendPropertyChanged("action_reason")
				Me.Onaction_reasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_action_date", DbType:="date")>  _
	Public Property original_action_date() As Date
		Get
			Return Me._original_action_date
		End Get
		Set
			If ((Me._original_action_date = value)  _
						= false) Then
				Me.Onoriginal_action_dateChanging(value)
				Me.SendPropertyChanging
				Me._original_action_date = value
				Me.SendPropertyChanged("original_action_date")
				Me.Onoriginal_action_dateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class asset_id_selection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _asset_id As String
	
	Private _current_plant_id As String
	
	Private _selected As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_idChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_idChanged()
    End Sub
    Partial Private Sub OnselectedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnselectedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", CanBeNull:=false)>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me.Oncurrent_plant_idChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_id = value
				Me.SendPropertyChanged("current_plant_id")
				Me.Oncurrent_plant_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected")>  _
	Public Property selected() As Boolean
		Get
			Return Me._selected
		End Get
		Set
			If ((Me._selected = value)  _
						= false) Then
				Me.OnselectedChanging(value)
				Me.SendPropertyChanging
				Me._selected = value
				Me.SendPropertyChanged("selected")
				Me.OnselectedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.remote_service_email")>  _
Partial Public Class remote_service_email
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _email As String
	
	Private _recipient_description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Onrecipient_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Onrecipient_descriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recipient_description", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property recipient_description() As String
		Get
			Return Me._recipient_description
		End Get
		Set
			If (String.Equals(Me._recipient_description, value) = false) Then
				Me.Onrecipient_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._recipient_description = value
				Me.SendPropertyChanged("recipient_description")
				Me.Onrecipient_descriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.run_parameter")>  _
Partial Public Class run_parameter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _parameter_text As String
	
	Private _response_type_id As String
	
	Private _original_parameter_text As String
	
	Private _used_on_job_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onparameter_textChanging(value As String)
    End Sub
    Partial Private Sub Onparameter_textChanged()
    End Sub
    Partial Private Sub Onresponse_type_idChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_type_idChanged()
    End Sub
    Partial Private Sub Onoriginal_parameter_textChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_parameter_textChanged()
    End Sub
    Partial Private Sub Onused_on_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onused_on_job_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parameter_text", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property parameter_text() As String
		Get
			Return Me._parameter_text
		End Get
		Set
			If (String.Equals(Me._parameter_text, value) = false) Then
				Me.Onparameter_textChanging(value)
				Me.SendPropertyChanging
				Me._parameter_text = value
				Me.SendPropertyChanged("parameter_text")
				Me.Onparameter_textChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me.Onresponse_type_idChanging(value)
				Me.SendPropertyChanging
				Me._response_type_id = value
				Me.SendPropertyChanged("response_type_id")
				Me.Onresponse_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_parameter_text", CanBeNull:=false)>  _
	Public Property original_parameter_text() As String
		Get
			Return Me._original_parameter_text
		End Get
		Set
			If (String.Equals(Me._original_parameter_text, value) = false) Then
				Me.Onoriginal_parameter_textChanging(value)
				Me.SendPropertyChanging
				Me._original_parameter_text = value
				Me.SendPropertyChanged("original_parameter_text")
				Me.Onoriginal_parameter_textChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_used_on_job_flag", DbType:="bit")>  _
	Public Property used_on_job_flag() As Boolean
		Get
			Return Me._used_on_job_flag
		End Get
		Set
			If ((Me._used_on_job_flag = value)  _
						= false) Then
				Me.Onused_on_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._used_on_job_flag = value
				Me.SendPropertyChanged("used_on_job_flag")
				Me.Onused_on_job_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.x_tool_run_parameter")>  _
Partial Public Class tool_run_param_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _series_id As String
	
	Private _parameter_rec_id As Integer
	
	Private _response_meta_data As String
	
	Private _inactive_flag As Boolean
	
	Private _sequence_number As System.Nullable(Of Integer)
	
	Private _used_on_job_flag As Boolean
	
	Private _version_number As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onservice_idChanging(value As String)
    End Sub
    Partial Private Sub Onservice_idChanged()
    End Sub
    Partial Private Sub Onparameter_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onparameter_rec_idChanged()
    End Sub
    Partial Private Sub Onresponse_meta_dataChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_meta_dataChanged()
    End Sub
    Partial Private Sub Oninactive_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninactive_flagChanged()
    End Sub
    Partial Private Sub Onsequence_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsequence_numberChanged()
    End Sub
    Partial Private Sub Onused_on_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onused_on_job_flagChanged()
    End Sub
    Partial Private Sub Onversion_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onversion_numberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(15)", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property service_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onservice_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("service_id")
				Me.Onservice_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parameter_rec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property parameter_rec_id() As Integer
		Get
			Return Me._parameter_rec_id
		End Get
		Set
			If ((Me._parameter_rec_id = value)  _
						= false) Then
				Me.Onparameter_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._parameter_rec_id = value
				Me.SendPropertyChanged("parameter_rec_id")
				Me.Onparameter_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_meta_data", DbType:="VarChar(2000)")>  _
	Public Property response_meta_data() As String
		Get
			Return Me._response_meta_data
		End Get
		Set
			If (String.Equals(Me._response_meta_data, value) = false) Then
				Me.Onresponse_meta_dataChanging(value)
				Me.SendPropertyChanging
				Me._response_meta_data = value
				Me.SendPropertyChanged("response_meta_data")
				Me.Onresponse_meta_dataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="bit")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me.Oninactive_flagChanging(value)
				Me.SendPropertyChanging
				Me._inactive_flag = value
				Me.SendPropertyChanged("inactive_flag")
				Me.Oninactive_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="int")>  _
	Public Property sequence_number() As System.Nullable(Of Integer)
		Get
			Return Me._sequence_number
		End Get
		Set
			If (Me._sequence_number.Equals(value) = false) Then
				Me.Onsequence_numberChanging(value)
				Me.SendPropertyChanging
				Me._sequence_number = value
				Me.SendPropertyChanged("sequence_number")
				Me.Onsequence_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_used_on_job_flag", DbType:="bit")>  _
	Public Property used_on_job_flag() As Boolean
		Get
			Return Me._used_on_job_flag
		End Get
		Set
			If ((Me._used_on_job_flag = value)  _
						= false) Then
				Me.Onused_on_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._used_on_job_flag = value
				Me.SendPropertyChanged("used_on_job_flag")
				Me.Onused_on_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_version_number", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property version_number() As System.Nullable(Of Integer)
		Get
			Return Me._version_number
		End Get
		Set
			If (Me._version_number.Equals(value) = false) Then
				Me.Onversion_numberChanging(value)
				Me.SendPropertyChanging
				Me._version_number = value
				Me.SendPropertyChanged("version_number")
				Me.Onversion_numberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_run_parameter")>  _
Partial Public Class disp_run_parameter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _asset_id As String
	
	Private _last_update_datetime As System.Nullable(Of Date)
	
	Private _last_update_by As String
	
	Private _comments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrun_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrun_rec_idChanged()
    End Sub
    Partial Private Sub Onservice_idChanging(value As String)
    End Sub
    Partial Private Sub Onservice_idChanged()
    End Sub
    Partial Private Sub Onlast_update_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onlast_update_datetimeChanged()
    End Sub
    Partial Private Sub Onlast_update_byChanging(value As String)
    End Sub
    Partial Private Sub Onlast_update_byChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property run_rec_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Onrun_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("run_rec_id")
				Me.Onrun_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property service_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onservice_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("service_id")
				Me.Onservice_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_update_datetime", DbType:="SmallDateTime ")>  _
	Public Property last_update_datetime() As System.Nullable(Of Date)
		Get
			Return Me._last_update_datetime
		End Get
		Set
			If (Me._last_update_datetime.Equals(value) = false) Then
				Me.Onlast_update_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._last_update_datetime = value
				Me.SendPropertyChanged("last_update_datetime")
				Me.Onlast_update_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_update_by", DbType:="VarChar(20)", CanBeNull:=false)>  _
	Public Property last_update_by() As String
		Get
			Return Me._last_update_by
		End Get
		Set
			If (String.Equals(Me._last_update_by, value) = false) Then
				Me.Onlast_update_byChanging(value)
				Me.SendPropertyChanging
				Me._last_update_by = value
				Me.SendPropertyChanged("last_update_by")
				Me.Onlast_update_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_run_parameter_item")>  _
Partial Public Class disp_run_parameter_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _asset_id As String
	
	Private _parameter_rec_id As Integer
	
	Private _parameter_version_number As Integer
	
	Private _response_data As String
	
	Private _response_details As String
	
	Private _parameter_text As String
	
	Private _response_type_id As String
	
	Private _response_meta_data As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrun_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrun_rec_idChanged()
    End Sub
    Partial Private Sub Onservice_idChanging(value As String)
    End Sub
    Partial Private Sub Onservice_idChanged()
    End Sub
    Partial Private Sub Onparameter_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onparameter_rec_idChanged()
    End Sub
    Partial Private Sub Onparameter_version_numberChanging(value As Integer)
    End Sub
    Partial Private Sub Onparameter_version_numberChanged()
    End Sub
    Partial Private Sub Onresponse_dataChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_dataChanged()
    End Sub
    Partial Private Sub Onresponse_detailsChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_detailsChanged()
    End Sub
    Partial Private Sub Onparameter_textChanging(value As String)
    End Sub
    Partial Private Sub Onparameter_textChanged()
    End Sub
    Partial Private Sub Onresponse_type_idChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_type_idChanged()
    End Sub
    Partial Private Sub Onresponse_meta_dataChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_meta_dataChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property run_rec_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Onrun_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("run_rec_id")
				Me.Onrun_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property service_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onservice_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("service_id")
				Me.Onservice_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parameter_rec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property parameter_rec_id() As Integer
		Get
			Return Me._parameter_rec_id
		End Get
		Set
			If ((Me._parameter_rec_id = value)  _
						= false) Then
				Me.Onparameter_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._parameter_rec_id = value
				Me.SendPropertyChanged("parameter_rec_id")
				Me.Onparameter_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parameter_version_number", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property parameter_version_number() As Integer
		Get
			Return Me._parameter_version_number
		End Get
		Set
			If ((Me._parameter_version_number = value)  _
						= false) Then
				Me.Onparameter_version_numberChanging(value)
				Me.SendPropertyChanging
				Me._parameter_version_number = value
				Me.SendPropertyChanged("parameter_version_number")
				Me.Onparameter_version_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_data", DbType:="VarChar(2000)")>  _
	Public Property response_data() As String
		Get
			Return Me._response_data
		End Get
		Set
			If (String.Equals(Me._response_data, value) = false) Then
				Me.Onresponse_dataChanging(value)
				Me.SendPropertyChanging
				Me._response_data = value
				Me.SendPropertyChanged("response_data")
				Me.Onresponse_dataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_details", DbType:="VarChar(50)")>  _
	Public Property response_details() As String
		Get
			Return Me._response_details
		End Get
		Set
			If (String.Equals(Me._response_details, value) = false) Then
				Me.Onresponse_detailsChanging(value)
				Me.SendPropertyChanging
				Me._response_details = value
				Me.SendPropertyChanged("response_details")
				Me.Onresponse_detailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parameter_text", CanBeNull:=false)>  _
	Public Property parameter_text() As String
		Get
			Return Me._parameter_text
		End Get
		Set
			If (String.Equals(Me._parameter_text, value) = false) Then
				Me.Onparameter_textChanging(value)
				Me.SendPropertyChanging
				Me._parameter_text = value
				Me.SendPropertyChanged("parameter_text")
				Me.Onparameter_textChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me.Onresponse_type_idChanging(value)
				Me.SendPropertyChanging
				Me._response_type_id = value
				Me.SendPropertyChanged("response_type_id")
				Me.Onresponse_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_meta_data", CanBeNull:=false)>  _
	Public Property response_meta_data() As String
		Get
			Return Me._response_meta_data
		End Get
		Set
			If (String.Equals(Me._response_meta_data, value) = false) Then
				Me.Onresponse_meta_dataChanging(value)
				Me.SendPropertyChanging
				Me._response_meta_data = value
				Me.SendPropertyChanged("response_meta_data")
				Me.Onresponse_meta_dataChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fimp")>  _
Partial Public Class fimp_rec
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _run_rec_id As System.Nullable(Of Integer)
	
	Private _asset_id As String
	
	Private _event_id As System.Nullable(Of Integer)
	
	Private _event_severity_id As System.Nullable(Of Integer)
	
	Private _event_likelihood_id As System.Nullable(Of Char)
	
	Private _ponc_amount As System.Nullable(Of Decimal)
	
	Private _failure_group_id As System.Nullable(Of Integer)
	
	Private _failed_item_id As System.Nullable(Of Integer)
	
	Private _failure_group_desc As String
	
	Private _failure_mechanism_category_id As System.Nullable(Of Integer)
	
	Private _failure_mechanism_id As System.Nullable(Of Integer)
	
	Private _failure_mechanism_desc As String
	
	Private _exported_flag As Boolean
	
	Private _closed_datetime As System.Nullable(Of Date)
	
	Private _incident_reported_by As String
	
	Private _incident_reported_datetime As System.Nullable(Of Date)
	
	Private _incident_closed_by As String
	
	Private _fracas_id As String
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _subject As String
	
	Private _problem_description As String
	
	Private _quick_fix As String
	
	Private _psl As String
	
	Private _event_desc As String
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Private _formatted_disp_id As String
	
	Private _operating_time_hours As System.Nullable(Of Single)
	
	Private _lost_time_hours As System.Nullable(Of Single)
	
	Private _job_stage_id As System.Nullable(Of Integer)
	
	Private _case_worker_user_id As String
	
	Private _incident_complete_date As System.Nullable(Of Date)
	
	Private _internal_review_board_date As System.Nullable(Of Date)
	
	Private _incident_completed_by As String
	
	Private _irb_completed_date As System.Nullable(Of Date)
	
	Private _irb_approved_by As String
	
	Private _customer_reference_number As String
	
	Private _customer_closed_date As System.Nullable(Of Date)
	
	Private _total_severity_level As System.Nullable(Of Integer)
	
	Private _owning_group As String
	
	Private _incident_datetime As System.Nullable(Of Date)
	
	Private _event_admin_comments As String
	
	Private _failure_detail_admin_comments As String
	
	Private _total_operating_time As System.Nullable(Of Decimal)
	
	Private _total_lost_time As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onrun_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onrun_rec_idChanged()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onevent_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onevent_idChanged()
    End Sub
    Partial Private Sub Onevent_severity_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onevent_severity_idChanged()
    End Sub
    Partial Private Sub Onevent_likelihood_idChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub Onevent_likelihood_idChanged()
    End Sub
    Partial Private Sub Onponc_amountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onponc_amountChanged()
    End Sub
    Partial Private Sub Onfailure_group_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfailure_group_idChanged()
    End Sub
    Partial Private Sub Onfailed_item_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfailed_item_idChanged()
    End Sub
    Partial Private Sub Onfailure_descChanging(value As String)
    End Sub
    Partial Private Sub Onfailure_descChanged()
    End Sub
    Partial Private Sub Onfailure_mechanism_category_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfailure_mechanism_category_idChanged()
    End Sub
    Partial Private Sub Onfailure_mechanism_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfailure_mechanism_idChanged()
    End Sub
    Partial Private Sub Onfailure_mechanism_descChanging(value As String)
    End Sub
    Partial Private Sub Onfailure_mechanism_descChanged()
    End Sub
    Partial Private Sub Onexported_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onexported_flagChanged()
    End Sub
    Partial Private Sub Onincident_closed_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onincident_closed_datetimeChanged()
    End Sub
    Partial Private Sub Onincident_reported_byChanging(value As String)
    End Sub
    Partial Private Sub Onincident_reported_byChanged()
    End Sub
    Partial Private Sub Onincident_reported_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onincident_reported_datetimeChanged()
    End Sub
    Partial Private Sub Onincident_closed_byChanging(value As String)
    End Sub
    Partial Private Sub Onincident_closed_byChanged()
    End Sub
    Partial Private Sub Onfracas_idChanging(value As String)
    End Sub
    Partial Private Sub Onfracas_idChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub OnsubjectChanging(value As String)
    End Sub
    Partial Private Sub OnsubjectChanged()
    End Sub
    Partial Private Sub Onproblem_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Onproblem_descriptionChanged()
    End Sub
    Partial Private Sub Onquick_fixChanging(value As String)
    End Sub
    Partial Private Sub Onquick_fixChanged()
    End Sub
    Partial Private Sub OnpslChanging(value As String)
    End Sub
    Partial Private Sub OnpslChanged()
    End Sub
    Partial Private Sub Onevent_descChanging(value As String)
    End Sub
    Partial Private Sub Onevent_descChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Onseries_descChanging(value As String)
    End Sub
    Partial Private Sub Onseries_descChanged()
    End Sub
    Partial Private Sub Onformatted_disp_idChanging(value As String)
    End Sub
    Partial Private Sub Onformatted_disp_idChanged()
    End Sub
    Partial Private Sub Onoperating_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onoperating_time_hoursChanged()
    End Sub
    Partial Private Sub Onlost_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onlost_time_hoursChanged()
    End Sub
    Partial Private Sub Onjob_stage_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onjob_stage_idChanged()
    End Sub
    Partial Private Sub Oncase_worker_user_idChanging(value As String)
    End Sub
    Partial Private Sub Oncase_worker_user_idChanged()
    End Sub
    Partial Private Sub Onincident_completed_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onincident_completed_datetimeChanged()
    End Sub
    Partial Private Sub Onirb_scheduled_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onirb_scheduled_dateChanged()
    End Sub
    Partial Private Sub Onincident_completed_byChanging(value As String)
    End Sub
    Partial Private Sub Onincident_completed_byChanged()
    End Sub
    Partial Private Sub Onirb_completed_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onirb_completed_dateChanged()
    End Sub
    Partial Private Sub Onirb_approved_byChanging(value As String)
    End Sub
    Partial Private Sub Onirb_approved_byChanged()
    End Sub
    Partial Private Sub Oncustomer_reference_numberChanging(value As String)
    End Sub
    Partial Private Sub Oncustomer_reference_numberChanged()
    End Sub
    Partial Private Sub Oncustomer_closed_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncustomer_closed_dateChanged()
    End Sub
    Partial Private Sub Ontotal_severity_levelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontotal_severity_levelChanged()
    End Sub
    Partial Private Sub Onowning_groupChanging(value As String)
    End Sub
    Partial Private Sub Onowning_groupChanged()
    End Sub
    Partial Private Sub Onincident_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onincident_datetimeChanged()
    End Sub
    Partial Private Sub Onevent_admin_commentsChanging(value As String)
    End Sub
    Partial Private Sub Onevent_admin_commentsChanged()
    End Sub
    Partial Private Sub Onfailure_detail_admin_commentsChanging(value As String)
    End Sub
    Partial Private Sub Onfailure_detail_admin_commentsChanged()
    End Sub
    Partial Private Sub Ontotal_operating_timeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontotal_operating_timeChanged()
    End Sub
    Partial Private Sub Ontotal_lost_timeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontotal_lost_timeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_rec_id", DbType:="Int")>  _
	Public Property run_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._run_rec_id
		End Get
		Set
			If (Me._run_rec_id.Equals(value) = false) Then
				Me.Onrun_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._run_rec_id = value
				Me.SendPropertyChanged("run_rec_id")
				Me.Onrun_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_id", DbType:="Int")>  _
	Public Property event_id() As System.Nullable(Of Integer)
		Get
			Return Me._event_id
		End Get
		Set
			If (Me._event_id.Equals(value) = false) Then
				Me.Onevent_idChanging(value)
				Me.SendPropertyChanging
				Me._event_id = value
				Me.SendPropertyChanged("event_id")
				Me.Onevent_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_severity_id", DbType:="Int")>  _
	Public Property event_severity_id() As System.Nullable(Of Integer)
		Get
			Return Me._event_severity_id
		End Get
		Set
			If (Me._event_severity_id.Equals(value) = false) Then
				Me.Onevent_severity_idChanging(value)
				Me.SendPropertyChanging
				Me._event_severity_id = value
				Me.SendPropertyChanged("event_severity_id")
				Me.Onevent_severity_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_likelihood_id", DbType:="Char(1)")>  _
	Public Property event_likelihood_id() As System.Nullable(Of Char)
		Get
			Return Me._event_likelihood_id
		End Get
		Set
			If (Me._event_likelihood_id.Equals(value) = false) Then
				Me.Onevent_likelihood_idChanging(value)
				Me.SendPropertyChanging
				Me._event_likelihood_id = value
				Me.SendPropertyChanged("event_likelihood_id")
				Me.Onevent_likelihood_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ponc_amount")>  _
	Public Property ponc_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._ponc_amount
		End Get
		Set
			If (Me._ponc_amount.Equals(value) = false) Then
				Me.Onponc_amountChanging(value)
				Me.SendPropertyChanging
				Me._ponc_amount = value
				Me.SendPropertyChanged("ponc_amount")
				Me.Onponc_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_group_id", DbType:="Int")>  _
	Public Property failure_group_id() As System.Nullable(Of Integer)
		Get
			Return Me._failure_group_id
		End Get
		Set
			If (Me._failure_group_id.Equals(value) = false) Then
				Me.Onfailure_group_idChanging(value)
				Me.SendPropertyChanging
				Me._failure_group_id = value
				Me.SendPropertyChanged("failure_group_id")
				Me.Onfailure_group_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failed_item_id", DbType:="Int")>  _
	Public Property failed_item_id() As System.Nullable(Of Integer)
		Get
			Return Me._failed_item_id
		End Get
		Set
			If (Me._failed_item_id.Equals(value) = false) Then
				Me.Onfailed_item_idChanging(value)
				Me.SendPropertyChanging
				Me._failed_item_id = value
				Me.SendPropertyChanged("failed_item_id")
				Me.Onfailed_item_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_group_desc", DbType:="VarChar(500)")>  _
	Public Property failure_desc() As String
		Get
			Return Me._failure_group_desc
		End Get
		Set
			If (String.Equals(Me._failure_group_desc, value) = false) Then
				Me.Onfailure_descChanging(value)
				Me.SendPropertyChanging
				Me._failure_group_desc = value
				Me.SendPropertyChanged("failure_desc")
				Me.Onfailure_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_mechanism_category_id", DbType:="Int")>  _
	Public Property failure_mechanism_category_id() As System.Nullable(Of Integer)
		Get
			Return Me._failure_mechanism_category_id
		End Get
		Set
			If (Me._failure_mechanism_category_id.Equals(value) = false) Then
				Me.Onfailure_mechanism_category_idChanging(value)
				Me.SendPropertyChanging
				Me._failure_mechanism_category_id = value
				Me.SendPropertyChanged("failure_mechanism_category_id")
				Me.Onfailure_mechanism_category_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_mechanism_id", DbType:="Int")>  _
	Public Property failure_mechanism_id() As System.Nullable(Of Integer)
		Get
			Return Me._failure_mechanism_id
		End Get
		Set
			If (Me._failure_mechanism_id.Equals(value) = false) Then
				Me.Onfailure_mechanism_idChanging(value)
				Me.SendPropertyChanging
				Me._failure_mechanism_id = value
				Me.SendPropertyChanged("failure_mechanism_id")
				Me.Onfailure_mechanism_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_mechanism_desc", DbType:="VarChar(500)")>  _
	Public Property failure_mechanism_desc() As String
		Get
			Return Me._failure_mechanism_desc
		End Get
		Set
			If (String.Equals(Me._failure_mechanism_desc, value) = false) Then
				Me.Onfailure_mechanism_descChanging(value)
				Me.SendPropertyChanging
				Me._failure_mechanism_desc = value
				Me.SendPropertyChanged("failure_mechanism_desc")
				Me.Onfailure_mechanism_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_flag", DbType:="Bit NOT NULL")>  _
	Public Property exported_flag() As Boolean
		Get
			Return Me._exported_flag
		End Get
		Set
			If ((Me._exported_flag = value)  _
						= false) Then
				Me.Onexported_flagChanging(value)
				Me.SendPropertyChanging
				Me._exported_flag = value
				Me.SendPropertyChanged("exported_flag")
				Me.Onexported_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_closed_datetime", DbType:="SmallDateTime")>  _
	Public Property incident_closed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._closed_datetime
		End Get
		Set
			If (Me._closed_datetime.Equals(value) = false) Then
				Me.Onincident_closed_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._closed_datetime = value
				Me.SendPropertyChanged("incident_closed_datetime")
				Me.Onincident_closed_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_reported_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property incident_reported_by() As String
		Get
			Return Me._incident_reported_by
		End Get
		Set
			If (String.Equals(Me._incident_reported_by, value) = false) Then
				Me.Onincident_reported_byChanging(value)
				Me.SendPropertyChanging
				Me._incident_reported_by = value
				Me.SendPropertyChanged("incident_reported_by")
				Me.Onincident_reported_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_reported_datetime", DbType:="smalldatetime")>  _
	Public Property incident_reported_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_reported_datetime
		End Get
		Set
			If (Me._incident_reported_datetime.Equals(value) = false) Then
				Me.Onincident_reported_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._incident_reported_datetime = value
				Me.SendPropertyChanged("incident_reported_datetime")
				Me.Onincident_reported_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_closed_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property incident_closed_by() As String
		Get
			Return Me._incident_closed_by
		End Get
		Set
			If (String.Equals(Me._incident_closed_by, value) = false) Then
				Me.Onincident_closed_byChanging(value)
				Me.SendPropertyChanging
				Me._incident_closed_by = value
				Me.SendPropertyChanged("incident_closed_by")
				Me.Onincident_closed_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fracas_id", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property fracas_id() As String
		Get
			Return Me._fracas_id
		End Get
		Set
			If (String.Equals(Me._fracas_id, value) = false) Then
				Me.Onfracas_idChanging(value)
				Me.SendPropertyChanging
				Me._fracas_id = value
				Me.SendPropertyChanged("fracas_id")
				Me.Onfracas_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", CanBeNull:=false)>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me.OnsubjectChanging(value)
				Me.SendPropertyChanging
				Me._subject = value
				Me.SendPropertyChanged("subject")
				Me.OnsubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_problem_description", CanBeNull:=false)>  _
	Public Property problem_description() As String
		Get
			Return Me._problem_description
		End Get
		Set
			If (String.Equals(Me._problem_description, value) = false) Then
				Me.Onproblem_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._problem_description = value
				Me.SendPropertyChanged("problem_description")
				Me.Onproblem_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quick_fix", CanBeNull:=false)>  _
	Public Property quick_fix() As String
		Get
			Return Me._quick_fix
		End Get
		Set
			If (String.Equals(Me._quick_fix, value) = false) Then
				Me.Onquick_fixChanging(value)
				Me.SendPropertyChanging
				Me._quick_fix = value
				Me.SendPropertyChanged("quick_fix")
				Me.Onquick_fixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me.OnpslChanging(value)
				Me.SendPropertyChanging
				Me._psl = value
				Me.SendPropertyChanged("psl")
				Me.OnpslChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_desc", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property event_desc() As String
		Get
			Return Me._event_desc
		End Get
		Set
			If (String.Equals(Me._event_desc, value) = false) Then
				Me.Onevent_descChanging(value)
				Me.SendPropertyChanging
				Me._event_desc = value
				Me.SendPropertyChanged("event_desc")
				Me.Onevent_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="varchar(100)", CanBeNull:=false)>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me.Onseries_descChanging(value)
				Me.SendPropertyChanging
				Me._series_desc = value
				Me.SendPropertyChanged("series_desc")
				Me.Onseries_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="varchar(8)", CanBeNull:=false)>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me.Onformatted_disp_idChanging(value)
				Me.SendPropertyChanging
				Me._formatted_disp_id = value
				Me.SendPropertyChanged("formatted_disp_id")
				Me.Onformatted_disp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time_hours", DbType:="real")>  _
	Public Property operating_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._operating_time_hours
		End Get
		Set
			If (Me._operating_time_hours.Equals(value) = false) Then
				Me.Onoperating_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._operating_time_hours = value
				Me.SendPropertyChanged("operating_time_hours")
				Me.Onoperating_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_hours", DbType:="real")>  _
	Public Property lost_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._lost_time_hours
		End Get
		Set
			If (Me._lost_time_hours.Equals(value) = false) Then
				Me.Onlost_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._lost_time_hours = value
				Me.SendPropertyChanged("lost_time_hours")
				Me.Onlost_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_stage_id", DbType:="int")>  _
	Public Property job_stage_id() As System.Nullable(Of Integer)
		Get
			Return Me._job_stage_id
		End Get
		Set
			If (Me._job_stage_id.Equals(value) = false) Then
				Me.Onjob_stage_idChanging(value)
				Me.SendPropertyChanging
				Me._job_stage_id = value
				Me.SendPropertyChanged("job_stage_id")
				Me.Onjob_stage_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_case_worker_user_id", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property case_worker_user_id() As String
		Get
			Return Me._case_worker_user_id
		End Get
		Set
			If (String.Equals(Me._case_worker_user_id, value) = false) Then
				Me.Oncase_worker_user_idChanging(value)
				Me.SendPropertyChanging
				Me._case_worker_user_id = value
				Me.SendPropertyChanged("case_worker_user_id")
				Me.Oncase_worker_user_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_complete_date", DbType:="smalldatetime")>  _
	Public Property incident_completed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_complete_date
		End Get
		Set
			If (Me._incident_complete_date.Equals(value) = false) Then
				Me.Onincident_completed_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._incident_complete_date = value
				Me.SendPropertyChanged("incident_completed_datetime")
				Me.Onincident_completed_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_internal_review_board_date", DbType:="date")>  _
	Public Property irb_scheduled_date() As System.Nullable(Of Date)
		Get
			Return Me._internal_review_board_date
		End Get
		Set
			If (Me._internal_review_board_date.Equals(value) = false) Then
				Me.Onirb_scheduled_dateChanging(value)
				Me.SendPropertyChanging
				Me._internal_review_board_date = value
				Me.SendPropertyChanged("irb_scheduled_date")
				Me.Onirb_scheduled_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_completed_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property incident_completed_by() As String
		Get
			Return Me._incident_completed_by
		End Get
		Set
			If (String.Equals(Me._incident_completed_by, value) = false) Then
				Me.Onincident_completed_byChanging(value)
				Me.SendPropertyChanging
				Me._incident_completed_by = value
				Me.SendPropertyChanged("incident_completed_by")
				Me.Onincident_completed_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_irb_completed_date", DbType:="date")>  _
	Public Property irb_completed_date() As System.Nullable(Of Date)
		Get
			Return Me._irb_completed_date
		End Get
		Set
			If (Me._irb_completed_date.Equals(value) = false) Then
				Me.Onirb_completed_dateChanging(value)
				Me.SendPropertyChanging
				Me._irb_completed_date = value
				Me.SendPropertyChanged("irb_completed_date")
				Me.Onirb_completed_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_irb_approved_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property irb_approved_by() As String
		Get
			Return Me._irb_approved_by
		End Get
		Set
			If (String.Equals(Me._irb_approved_by, value) = false) Then
				Me.Onirb_approved_byChanging(value)
				Me.SendPropertyChanging
				Me._irb_approved_by = value
				Me.SendPropertyChanged("irb_approved_by")
				Me.Onirb_approved_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_reference_number", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property customer_reference_number() As String
		Get
			Return Me._customer_reference_number
		End Get
		Set
			If (String.Equals(Me._customer_reference_number, value) = false) Then
				Me.Oncustomer_reference_numberChanging(value)
				Me.SendPropertyChanging
				Me._customer_reference_number = value
				Me.SendPropertyChanged("customer_reference_number")
				Me.Oncustomer_reference_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_closed_date", DbType:="date")>  _
	Public Property customer_closed_date() As System.Nullable(Of Date)
		Get
			Return Me._customer_closed_date
		End Get
		Set
			If (Me._customer_closed_date.Equals(value) = false) Then
				Me.Oncustomer_closed_dateChanging(value)
				Me.SendPropertyChanging
				Me._customer_closed_date = value
				Me.SendPropertyChanged("customer_closed_date")
				Me.Oncustomer_closed_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_severity_level", DbType:="int")>  _
	Public Property total_severity_level() As System.Nullable(Of Integer)
		Get
			Return Me._total_severity_level
		End Get
		Set
			If (Me._total_severity_level.Equals(value) = false) Then
				Me.Ontotal_severity_levelChanging(value)
				Me.SendPropertyChanging
				Me._total_severity_level = value
				Me.SendPropertyChanged("total_severity_level")
				Me.Ontotal_severity_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owning_group", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property owning_group() As String
		Get
			Return Me._owning_group
		End Get
		Set
			If (String.Equals(Me._owning_group, value) = false) Then
				Me.Onowning_groupChanging(value)
				Me.SendPropertyChanging
				Me._owning_group = value
				Me.SendPropertyChanged("owning_group")
				Me.Onowning_groupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_datetime", DbType:="smalldatetime")>  _
	Public Property incident_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_datetime
		End Get
		Set
			If (Me._incident_datetime.Equals(value) = false) Then
				Me.Onincident_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._incident_datetime = value
				Me.SendPropertyChanged("incident_datetime")
				Me.Onincident_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_admin_comments", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property event_admin_comments() As String
		Get
			Return Me._event_admin_comments
		End Get
		Set
			If (String.Equals(Me._event_admin_comments, value) = false) Then
				Me.Onevent_admin_commentsChanging(value)
				Me.SendPropertyChanging
				Me._event_admin_comments = value
				Me.SendPropertyChanged("event_admin_comments")
				Me.Onevent_admin_commentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_detail_admin_comments", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property failure_detail_admin_comments() As String
		Get
			Return Me._failure_detail_admin_comments
		End Get
		Set
			If (String.Equals(Me._failure_detail_admin_comments, value) = false) Then
				Me.Onfailure_detail_admin_commentsChanging(value)
				Me.SendPropertyChanging
				Me._failure_detail_admin_comments = value
				Me.SendPropertyChanged("failure_detail_admin_comments")
				Me.Onfailure_detail_admin_commentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_operating_time", DbType:="decimal(10,2)")>  _
	Public Property total_operating_time() As System.Nullable(Of Decimal)
		Get
			Return Me._total_operating_time
		End Get
		Set
			If (Me._total_operating_time.Equals(value) = false) Then
				Me.Ontotal_operating_timeChanging(value)
				Me.SendPropertyChanging
				Me._total_operating_time = value
				Me.SendPropertyChanged("total_operating_time")
				Me.Ontotal_operating_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_lost_time", DbType:="decimal(10,2)")>  _
	Public Property total_lost_time() As System.Nullable(Of Decimal)
		Get
			Return Me._total_lost_time
		End Get
		Set
			If (Me._total_lost_time.Equals(value) = false) Then
				Me.Ontotal_lost_timeChanging(value)
				Me.SendPropertyChanging
				Me._total_lost_time = value
				Me.SendPropertyChanged("total_lost_time")
				Me.Ontotal_lost_timeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fimp_root_cause_analysis")>  _
Partial Public Class fimp_root_cause_analysis
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _incident_rec_id As Integer
	
	Private _immediate_cause_category_id As System.Nullable(Of Integer)
	
	Private _immediate_cause_id As System.Nullable(Of Integer)
	
	Private _immediate_cause_desc As String
	
	Private _root_cause_category_id As System.Nullable(Of Integer)
	
	Private _root_cause_id As System.Nullable(Of Integer)
	
	Private _root_cause_desc As String
	
	Private _immediate_cause_category As String
	
	Private _immediate_cause As String
	
	Private _root_cause_category As String
	
	Private _root_cause As String
	
	Private _closed_by As String
	
	Private _closed_datetime As System.Nullable(Of Date)
	
	Private _additional_info As String
	
	Private _comments As String
	
	Private _exported_flag As Boolean
	
	Private _export_id As String
	
	Private _fracas_id As String
	
	Private _severity_id As System.Nullable(Of Integer)
	
	Private _question_number As System.Nullable(Of Integer)
	
	Private _reviewed_by As String
	
	Private _reviewed_datetime As System.Nullable(Of Date)
	
	Private _reviewer_comments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onincident_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onincident_rec_idChanged()
    End Sub
    Partial Private Sub Onimmediate_cause_category_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onimmediate_cause_category_idChanged()
    End Sub
    Partial Private Sub Onimmediate_cause_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onimmediate_cause_idChanged()
    End Sub
    Partial Private Sub Onimmediate_cause_descChanging(value As String)
    End Sub
    Partial Private Sub Onimmediate_cause_descChanged()
    End Sub
    Partial Private Sub Onroot_cause_category_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onroot_cause_category_idChanged()
    End Sub
    Partial Private Sub Onroot_cause_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onroot_cause_idChanged()
    End Sub
    Partial Private Sub Onroot_cause_descChanging(value As String)
    End Sub
    Partial Private Sub Onroot_cause_descChanged()
    End Sub
    Partial Private Sub Onimmediate_cause_categoryChanging(value As String)
    End Sub
    Partial Private Sub Onimmediate_cause_categoryChanged()
    End Sub
    Partial Private Sub Onimmediate_causeChanging(value As String)
    End Sub
    Partial Private Sub Onimmediate_causeChanged()
    End Sub
    Partial Private Sub Onroot_cause_categoryChanging(value As String)
    End Sub
    Partial Private Sub Onroot_cause_categoryChanged()
    End Sub
    Partial Private Sub Onroot_causeChanging(value As String)
    End Sub
    Partial Private Sub Onroot_causeChanged()
    End Sub
    Partial Private Sub Onclosed_byChanging(value As String)
    End Sub
    Partial Private Sub Onclosed_byChanged()
    End Sub
    Partial Private Sub Onclosed_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onclosed_datetimeChanged()
    End Sub
    Partial Private Sub Onadditional_infoChanging(value As String)
    End Sub
    Partial Private Sub Onadditional_infoChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    Partial Private Sub Onexported_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onexported_flagChanged()
    End Sub
    Partial Private Sub Onexport_idChanging(value As String)
    End Sub
    Partial Private Sub Onexport_idChanged()
    End Sub
    Partial Private Sub Onfracas_idChanging(value As String)
    End Sub
    Partial Private Sub Onfracas_idChanged()
    End Sub
    Partial Private Sub Onseverity_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onseverity_idChanged()
    End Sub
    Partial Private Sub Onquestion_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onquestion_numberChanged()
    End Sub
    Partial Private Sub Onreviewed_byChanging(value As String)
    End Sub
    Partial Private Sub Onreviewed_byChanged()
    End Sub
    Partial Private Sub Onreviewed_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onreviewed_datetimeChanged()
    End Sub
    Partial Private Sub Onreviewer_commentsChanging(value As String)
    End Sub
    Partial Private Sub Onreviewer_commentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_rec_id", DbType:="Int NOT NULL")>  _
	Public Property incident_rec_id() As Integer
		Get
			Return Me._incident_rec_id
		End Get
		Set
			If ((Me._incident_rec_id = value)  _
						= false) Then
				Me.Onincident_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._incident_rec_id = value
				Me.SendPropertyChanged("incident_rec_id")
				Me.Onincident_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_immediate_cause_category_id", DbType:="Int")>  _
	Public Property immediate_cause_category_id() As System.Nullable(Of Integer)
		Get
			Return Me._immediate_cause_category_id
		End Get
		Set
			If (Me._immediate_cause_category_id.Equals(value) = false) Then
				Me.Onimmediate_cause_category_idChanging(value)
				Me.SendPropertyChanging
				Me._immediate_cause_category_id = value
				Me.SendPropertyChanged("immediate_cause_category_id")
				Me.Onimmediate_cause_category_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_immediate_cause_id", DbType:="Int")>  _
	Public Property immediate_cause_id() As System.Nullable(Of Integer)
		Get
			Return Me._immediate_cause_id
		End Get
		Set
			If (Me._immediate_cause_id.Equals(value) = false) Then
				Me.Onimmediate_cause_idChanging(value)
				Me.SendPropertyChanging
				Me._immediate_cause_id = value
				Me.SendPropertyChanged("immediate_cause_id")
				Me.Onimmediate_cause_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_immediate_cause_desc", DbType:="VarChar(500)")>  _
	Public Property immediate_cause_desc() As String
		Get
			Return Me._immediate_cause_desc
		End Get
		Set
			If (String.Equals(Me._immediate_cause_desc, value) = false) Then
				Me.Onimmediate_cause_descChanging(value)
				Me.SendPropertyChanging
				Me._immediate_cause_desc = value
				Me.SendPropertyChanged("immediate_cause_desc")
				Me.Onimmediate_cause_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_category_id", DbType:="Int")>  _
	Public Property root_cause_category_id() As System.Nullable(Of Integer)
		Get
			Return Me._root_cause_category_id
		End Get
		Set
			If (Me._root_cause_category_id.Equals(value) = false) Then
				Me.Onroot_cause_category_idChanging(value)
				Me.SendPropertyChanging
				Me._root_cause_category_id = value
				Me.SendPropertyChanged("root_cause_category_id")
				Me.Onroot_cause_category_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_id", DbType:="Int")>  _
	Public Property root_cause_id() As System.Nullable(Of Integer)
		Get
			Return Me._root_cause_id
		End Get
		Set
			If (Me._root_cause_id.Equals(value) = false) Then
				Me.Onroot_cause_idChanging(value)
				Me.SendPropertyChanging
				Me._root_cause_id = value
				Me.SendPropertyChanged("root_cause_id")
				Me.Onroot_cause_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_desc", DbType:="VarChar(500)")>  _
	Public Property root_cause_desc() As String
		Get
			Return Me._root_cause_desc
		End Get
		Set
			If (String.Equals(Me._root_cause_desc, value) = false) Then
				Me.Onroot_cause_descChanging(value)
				Me.SendPropertyChanging
				Me._root_cause_desc = value
				Me.SendPropertyChanged("root_cause_desc")
				Me.Onroot_cause_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_immediate_cause_category", CanBeNull:=false)>  _
	Public Property immediate_cause_category() As String
		Get
			Return Me._immediate_cause_category
		End Get
		Set
			If (String.Equals(Me._immediate_cause_category, value) = false) Then
				Me.Onimmediate_cause_categoryChanging(value)
				Me.SendPropertyChanging
				Me._immediate_cause_category = value
				Me.SendPropertyChanged("immediate_cause_category")
				Me.Onimmediate_cause_categoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_immediate_cause", CanBeNull:=false)>  _
	Public Property immediate_cause() As String
		Get
			Return Me._immediate_cause
		End Get
		Set
			If (String.Equals(Me._immediate_cause, value) = false) Then
				Me.Onimmediate_causeChanging(value)
				Me.SendPropertyChanging
				Me._immediate_cause = value
				Me.SendPropertyChanged("immediate_cause")
				Me.Onimmediate_causeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_category", CanBeNull:=false)>  _
	Public Property root_cause_category() As String
		Get
			Return Me._root_cause_category
		End Get
		Set
			If (String.Equals(Me._root_cause_category, value) = false) Then
				Me.Onroot_cause_categoryChanging(value)
				Me.SendPropertyChanging
				Me._root_cause_category = value
				Me.SendPropertyChanged("root_cause_category")
				Me.Onroot_cause_categoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause", CanBeNull:=false)>  _
	Public Property root_cause() As String
		Get
			Return Me._root_cause
		End Get
		Set
			If (String.Equals(Me._root_cause, value) = false) Then
				Me.Onroot_causeChanging(value)
				Me.SendPropertyChanging
				Me._root_cause = value
				Me.SendPropertyChanged("root_cause")
				Me.Onroot_causeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_closed_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property closed_by() As String
		Get
			Return Me._closed_by
		End Get
		Set
			If (String.Equals(Me._closed_by, value) = false) Then
				Me.Onclosed_byChanging(value)
				Me.SendPropertyChanging
				Me._closed_by = value
				Me.SendPropertyChanged("closed_by")
				Me.Onclosed_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_closed_datetime", DbType:="smalldatetime")>  _
	Public Property closed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._closed_datetime
		End Get
		Set
			If (Me._closed_datetime.Equals(value) = false) Then
				Me.Onclosed_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._closed_datetime = value
				Me.SendPropertyChanged("closed_datetime")
				Me.Onclosed_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_info", DbType:="varchar(250)", CanBeNull:=false)>  _
	Public Property additional_info() As String
		Get
			Return Me._additional_info
		End Get
		Set
			If (String.Equals(Me._additional_info, value) = false) Then
				Me.Onadditional_infoChanging(value)
				Me.SendPropertyChanging
				Me._additional_info = value
				Me.SendPropertyChanged("additional_info")
				Me.Onadditional_infoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_flag", DbType:="bit")>  _
	Public Property exported_flag() As Boolean
		Get
			Return Me._exported_flag
		End Get
		Set
			If ((Me._exported_flag = value)  _
						= false) Then
				Me.Onexported_flagChanging(value)
				Me.SendPropertyChanging
				Me._exported_flag = value
				Me.SendPropertyChanged("exported_flag")
				Me.Onexported_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_export_id", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property export_id() As String
		Get
			Return Me._export_id
		End Get
		Set
			If (String.Equals(Me._export_id, value) = false) Then
				Me.Onexport_idChanging(value)
				Me.SendPropertyChanging
				Me._export_id = value
				Me.SendPropertyChanged("export_id")
				Me.Onexport_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fracas_id", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property fracas_id() As String
		Get
			Return Me._fracas_id
		End Get
		Set
			If (String.Equals(Me._fracas_id, value) = false) Then
				Me.Onfracas_idChanging(value)
				Me.SendPropertyChanging
				Me._fracas_id = value
				Me.SendPropertyChanged("fracas_id")
				Me.Onfracas_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_id", DbType:="int")>  _
	Public Property severity_id() As System.Nullable(Of Integer)
		Get
			Return Me._severity_id
		End Get
		Set
			If (Me._severity_id.Equals(value) = false) Then
				Me.Onseverity_idChanging(value)
				Me.SendPropertyChanging
				Me._severity_id = value
				Me.SendPropertyChanged("severity_id")
				Me.Onseverity_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question_number", DbType:="int")>  _
	Public Property question_number() As System.Nullable(Of Integer)
		Get
			Return Me._question_number
		End Get
		Set
			If (Me._question_number.Equals(value) = false) Then
				Me.Onquestion_numberChanging(value)
				Me.SendPropertyChanging
				Me._question_number = value
				Me.SendPropertyChanged("question_number")
				Me.Onquestion_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reviewed_by", CanBeNull:=false)>  _
	Public Property reviewed_by() As String
		Get
			Return Me._reviewed_by
		End Get
		Set
			If (String.Equals(Me._reviewed_by, value) = false) Then
				Me.Onreviewed_byChanging(value)
				Me.SendPropertyChanging
				Me._reviewed_by = value
				Me.SendPropertyChanged("reviewed_by")
				Me.Onreviewed_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reviewed_datetime", DbType:="smalldatetime")>  _
	Public Property reviewed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._reviewed_datetime
		End Get
		Set
			If (Me._reviewed_datetime.Equals(value) = false) Then
				Me.Onreviewed_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._reviewed_datetime = value
				Me.SendPropertyChanged("reviewed_datetime")
				Me.Onreviewed_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reviewer_comments", DbType:="varchar(250)", CanBeNull:=false)>  _
	Public Property reviewer_comments() As String
		Get
			Return Me._reviewer_comments
		End Get
		Set
			If (String.Equals(Me._reviewer_comments, value) = false) Then
				Me.Onreviewer_commentsChanging(value)
				Me.SendPropertyChanging
				Me._reviewer_comments = value
				Me.SendPropertyChanged("reviewer_comments")
				Me.Onreviewer_commentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fimp_corrective_action")>  _
Partial Public Class fimp_corrective_action
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _root_cause_rec_id As Integer
	
	Private _corrective_action As String
	
	Private _assigned_employee_id As String
	
	Private _target_date As System.Nullable(Of Date)
	
	Private _control_desc As String
	
	Private _closed_by As String
	
	Private _closed_datetime As System.Nullable(Of Date)
	
	Private _owner_rec_id As System.Nullable(Of Integer)
	
	Private _owner_name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onroot_cause_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onroot_cause_rec_idChanged()
    End Sub
    Partial Private Sub Oncorrective_actionChanging(value As String)
    End Sub
    Partial Private Sub Oncorrective_actionChanged()
    End Sub
    Partial Private Sub Onassigned_employee_idChanging(value As String)
    End Sub
    Partial Private Sub Onassigned_employee_idChanged()
    End Sub
    Partial Private Sub Ontarget_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ontarget_dateChanged()
    End Sub
    Partial Private Sub Oncontrol_descChanging(value As String)
    End Sub
    Partial Private Sub Oncontrol_descChanged()
    End Sub
    Partial Private Sub Onclosed_byChanging(value As String)
    End Sub
    Partial Private Sub Onclosed_byChanged()
    End Sub
    Partial Private Sub Onclosed_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onclosed_datetimeChanged()
    End Sub
    Partial Private Sub Onowner_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onowner_rec_idChanged()
    End Sub
    Partial Private Sub Onowner_nameChanging(value As String)
    End Sub
    Partial Private Sub Onowner_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_rec_id", DbType:="Int NOT NULL")>  _
	Public Property root_cause_rec_id() As Integer
		Get
			Return Me._root_cause_rec_id
		End Get
		Set
			If ((Me._root_cause_rec_id = value)  _
						= false) Then
				Me.Onroot_cause_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._root_cause_rec_id = value
				Me.SendPropertyChanged("root_cause_rec_id")
				Me.Onroot_cause_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_corrective_action", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property corrective_action() As String
		Get
			Return Me._corrective_action
		End Get
		Set
			If (String.Equals(Me._corrective_action, value) = false) Then
				Me.Oncorrective_actionChanging(value)
				Me.SendPropertyChanging
				Me._corrective_action = value
				Me.SendPropertyChanged("corrective_action")
				Me.Oncorrective_actionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned_employee_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property assigned_employee_id() As String
		Get
			Return Me._assigned_employee_id
		End Get
		Set
			If (String.Equals(Me._assigned_employee_id, value) = false) Then
				Me.Onassigned_employee_idChanging(value)
				Me.SendPropertyChanging
				Me._assigned_employee_id = value
				Me.SendPropertyChanged("assigned_employee_id")
				Me.Onassigned_employee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_target_date", DbType:="Date")>  _
	Public Property target_date() As System.Nullable(Of Date)
		Get
			Return Me._target_date
		End Get
		Set
			If (Me._target_date.Equals(value) = false) Then
				Me.Ontarget_dateChanging(value)
				Me.SendPropertyChanging
				Me._target_date = value
				Me.SendPropertyChanged("target_date")
				Me.Ontarget_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_control_desc", DbType:="varchar(250)", CanBeNull:=false)>  _
	Public Property control_desc() As String
		Get
			Return Me._control_desc
		End Get
		Set
			If (String.Equals(Me._control_desc, value) = false) Then
				Me.Oncontrol_descChanging(value)
				Me.SendPropertyChanging
				Me._control_desc = value
				Me.SendPropertyChanged("control_desc")
				Me.Oncontrol_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_closed_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property closed_by() As String
		Get
			Return Me._closed_by
		End Get
		Set
			If (String.Equals(Me._closed_by, value) = false) Then
				Me.Onclosed_byChanging(value)
				Me.SendPropertyChanging
				Me._closed_by = value
				Me.SendPropertyChanged("closed_by")
				Me.Onclosed_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_closed_datetime", DbType:="smalldatetime")>  _
	Public Property closed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._closed_datetime
		End Get
		Set
			If (Me._closed_datetime.Equals(value) = false) Then
				Me.Onclosed_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._closed_datetime = value
				Me.SendPropertyChanged("closed_datetime")
				Me.Onclosed_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owner_rec_id", DbType:="int")>  _
	Public Property owner_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._owner_rec_id
		End Get
		Set
			If (Me._owner_rec_id.Equals(value) = false) Then
				Me.Onowner_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._owner_rec_id = value
				Me.SendPropertyChanged("owner_rec_id")
				Me.Onowner_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owner_name", CanBeNull:=false)>  _
	Public Property owner_name() As String
		Get
			Return Me._owner_name
		End Get
		Set
			If (String.Equals(Me._owner_name, value) = false) Then
				Me.Onowner_nameChanging(value)
				Me.SendPropertyChanging
				Me._owner_name = value
				Me.SendPropertyChanged("owner_name")
				Me.Onowner_nameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fimp_corrective_action_communication")>  _
Partial Public Class fimp_communication
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _subject As String
	
	Private _opened_datetime As Date
	
	Private _closed_datetime As System.Nullable(Of Date)
	
	Private _opened_by As String
	
	Private _closed_by As String
	
	Private _incident_section As String
	
	Private _section_id As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub OnsubjectChanging(value As String)
    End Sub
    Partial Private Sub OnsubjectChanged()
    End Sub
    Partial Private Sub Onopened_datetimeChanging(value As Date)
    End Sub
    Partial Private Sub Onopened_datetimeChanged()
    End Sub
    Partial Private Sub Onclosed_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onclosed_datetimeChanged()
    End Sub
    Partial Private Sub Onopened_byChanging(value As String)
    End Sub
    Partial Private Sub Onopened_byChanged()
    End Sub
    Partial Private Sub Onclosed_byChanging(value As String)
    End Sub
    Partial Private Sub Onclosed_byChanged()
    End Sub
    Partial Private Sub Onincident_sectionChanging(value As String)
    End Sub
    Partial Private Sub Onincident_sectionChanged()
    End Sub
    Partial Private Sub Onsection_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onsection_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me.OnsubjectChanging(value)
				Me.SendPropertyChanging
				Me._subject = value
				Me.SendPropertyChanged("subject")
				Me.OnsubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_opened_datetime", DbType:="SmallDateTime NOT NULL")>  _
	Public Property opened_datetime() As Date
		Get
			Return Me._opened_datetime
		End Get
		Set
			If ((Me._opened_datetime = value)  _
						= false) Then
				Me.Onopened_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._opened_datetime = value
				Me.SendPropertyChanged("opened_datetime")
				Me.Onopened_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_closed_datetime", DbType:="SmallDateTime")>  _
	Public Property closed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._closed_datetime
		End Get
		Set
			If (Me._closed_datetime.Equals(value) = false) Then
				Me.Onclosed_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._closed_datetime = value
				Me.SendPropertyChanged("closed_datetime")
				Me.Onclosed_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_opened_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property opened_by() As String
		Get
			Return Me._opened_by
		End Get
		Set
			If (String.Equals(Me._opened_by, value) = false) Then
				Me.Onopened_byChanging(value)
				Me.SendPropertyChanging
				Me._opened_by = value
				Me.SendPropertyChanged("opened_by")
				Me.Onopened_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_closed_by", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property closed_by() As String
		Get
			Return Me._closed_by
		End Get
		Set
			If (String.Equals(Me._closed_by, value) = false) Then
				Me.Onclosed_byChanging(value)
				Me.SendPropertyChanging
				Me._closed_by = value
				Me.SendPropertyChanged("closed_by")
				Me.Onclosed_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_section", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property incident_section() As String
		Get
			Return Me._incident_section
		End Get
		Set
			If (String.Equals(Me._incident_section, value) = false) Then
				Me.Onincident_sectionChanging(value)
				Me.SendPropertyChanging
				Me._incident_section = value
				Me.SendPropertyChanged("incident_section")
				Me.Onincident_sectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="int")>  _
	Public Property section_id() As Integer
		Get
			Return Me._section_id
		End Get
		Set
			If ((Me._section_id = value)  _
						= false) Then
				Me.Onsection_idChanging(value)
				Me.SendPropertyChanging
				Me._section_id = value
				Me.SendPropertyChanged("section_id")
				Me.Onsection_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fimp_corrective_action_communication_log")>  _
Partial Public Class fimp_communication_log
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _communication_rec_id As Integer
	
	Private _message_user_id As String
	
	Private _message_text As String
	
	Private _message_datetime As Date
	
	Private _edited_datetime As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Oncommunication_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncommunication_rec_idChanged()
    End Sub
    Partial Private Sub Onmessage_user_idChanging(value As String)
    End Sub
    Partial Private Sub Onmessage_user_idChanged()
    End Sub
    Partial Private Sub Onmessage_textChanging(value As String)
    End Sub
    Partial Private Sub Onmessage_textChanged()
    End Sub
    Partial Private Sub Onmessage_datetimeChanging(value As Date)
    End Sub
    Partial Private Sub Onmessage_datetimeChanged()
    End Sub
    Partial Private Sub Onedited_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onedited_datetimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_communication_rec_id", DbType:="Int NOT NULL")>  _
	Public Property communication_rec_id() As Integer
		Get
			Return Me._communication_rec_id
		End Get
		Set
			If ((Me._communication_rec_id = value)  _
						= false) Then
				Me.Oncommunication_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._communication_rec_id = value
				Me.SendPropertyChanged("communication_rec_id")
				Me.Oncommunication_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_message_user_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property message_user_id() As String
		Get
			Return Me._message_user_id
		End Get
		Set
			If (String.Equals(Me._message_user_id, value) = false) Then
				Me.Onmessage_user_idChanging(value)
				Me.SendPropertyChanging
				Me._message_user_id = value
				Me.SendPropertyChanged("message_user_id")
				Me.Onmessage_user_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_message_text", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property message_text() As String
		Get
			Return Me._message_text
		End Get
		Set
			If (String.Equals(Me._message_text, value) = false) Then
				Me.Onmessage_textChanging(value)
				Me.SendPropertyChanging
				Me._message_text = value
				Me.SendPropertyChanged("message_text")
				Me.Onmessage_textChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_message_datetime", DbType:="DateTime NOT NULL")>  _
	Public Property message_datetime() As Date
		Get
			Return Me._message_datetime
		End Get
		Set
			If ((Me._message_datetime = value)  _
						= false) Then
				Me.Onmessage_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._message_datetime = value
				Me.SendPropertyChanged("message_datetime")
				Me.Onmessage_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_edited_datetime", DbType:="DateTime")>  _
	Public Property edited_datetime() As System.Nullable(Of Date)
		Get
			Return Me._edited_datetime
		End Get
		Set
			If (Me._edited_datetime.Equals(value) = false) Then
				Me.Onedited_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._edited_datetime = value
				Me.SendPropertyChanged("edited_datetime")
				Me.Onedited_datetimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_completions_activity_log")>  _
Partial Public Class disp_completions_activity_log
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _activity_desc As String
	
	Private _activity_datetime As System.Nullable(Of Date)
	
	Private _op As System.Nullable(Of Integer)
	
	Private _trip As System.Nullable(Of Integer)
	
	Private _update_employee_id As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onactivity_descChanging(value As String)
    End Sub
    Partial Private Sub Onactivity_descChanged()
    End Sub
    Partial Private Sub Onactivity_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onactivity_datetimeChanged()
    End Sub
    Partial Private Sub OnopChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnopChanged()
    End Sub
    Partial Private Sub OntripChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntripChanged()
    End Sub
    Partial Private Sub Onupdate_employee_idChanging(value As String)
    End Sub
    Partial Private Sub Onupdate_employee_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity_desc", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property activity_desc() As String
		Get
			Return Me._activity_desc
		End Get
		Set
			If (String.Equals(Me._activity_desc, value) = false) Then
				Me.Onactivity_descChanging(value)
				Me.SendPropertyChanging
				Me._activity_desc = value
				Me.SendPropertyChanged("activity_desc")
				Me.Onactivity_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity_datetime", DbType:="SmallDateTime ")>  _
	Public Property activity_datetime() As System.Nullable(Of Date)
		Get
			Return Me._activity_datetime
		End Get
		Set
			If (Me._activity_datetime.Equals(value) = false) Then
				Me.Onactivity_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._activity_datetime = value
				Me.SendPropertyChanged("activity_datetime")
				Me.Onactivity_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op", DbType:="int")>  _
	Public Property op() As System.Nullable(Of Integer)
		Get
			Return Me._op
		End Get
		Set
			If (Me._op.Equals(value) = false) Then
				Me.OnopChanging(value)
				Me.SendPropertyChanging
				Me._op = value
				Me.SendPropertyChanged("op")
				Me.OnopChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trip", DbType:="int")>  _
	Public Property trip() As System.Nullable(Of Integer)
		Get
			Return Me._trip
		End Get
		Set
			If (Me._trip.Equals(value) = false) Then
				Me.OntripChanging(value)
				Me.SendPropertyChanging
				Me._trip = value
				Me.SendPropertyChanged("trip")
				Me.OntripChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_employee_id", DbType:="varchar(20)", CanBeNull:=false)>  _
	Public Property update_employee_id() As String
		Get
			Return Me._update_employee_id
		End Get
		Set
			If (String.Equals(Me._update_employee_id, value) = false) Then
				Me.Onupdate_employee_idChanging(value)
				Me.SendPropertyChanging
				Me._update_employee_id = value
				Me.SendPropertyChanged("update_employee_id")
				Me.Onupdate_employee_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_completions_asset")>  _
Partial Public Class disp_equipment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _series_id As String
	
	Private _asset_id As String
	
	Private _material_rec_id As System.Nullable(Of Integer)
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _over_pm_pt_thresh_approval_flag As Boolean
	
	Private _over_pm_pt_thresh_approved_by As String
	
	Private _pm1_approved_flag As Boolean
	
	Private _pm1_approved_by As String
	
	Private _verified_flag As Boolean
	
	Private _verified_by As String
	
	Private _lost_time_hours As System.Nullable(Of Single)
	
	Private _material_number As String
	
	Private _item_desc As String
	
	Private _pm_point_threshold_level As String
	
	Private _asset_has_subassembly_flag As Boolean
	
	Private _fimp_incident_id As String
	
	Private _assembly_name As String
	
	Private _material_serial_number As String
	
	Private _row_number As Integer
	
	Private _original_asset_id As String
	
	Private _original_asset_has_subassembly_flag As Boolean
	
	Private _calculated_pm_points As System.Nullable(Of Single)
	
	Private _material_ship_quantity As System.Nullable(Of Integer)
	
	Private _material_return_quantity As System.Nullable(Of Integer)
	
	Private _material_ship_date As System.Nullable(Of Date)
	
	Private _material_return_date As System.Nullable(Of Date)
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _avail_desc As String
	
	Private _maintenance_desc As String
	
	Private _original_avail_id As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onmaterial_rec_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmaterial_rec_idChanged()
    End Sub
    Partial Private Sub Onpm_pointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpm_pointsChanged()
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approved_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approved_flagChanged()
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approved_byChanging(value As String)
    End Sub
    Partial Private Sub Onover_pm_pt_thresh_approved_byChanged()
    End Sub
    Partial Private Sub Onpm1_approved_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onpm1_approved_flagChanged()
    End Sub
    Partial Private Sub Onpm1_approved_byChanging(value As String)
    End Sub
    Partial Private Sub Onpm1_approved_byChanged()
    End Sub
    Partial Private Sub Onverified_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onverified_flagChanged()
    End Sub
    Partial Private Sub Onverified_byChanging(value As String)
    End Sub
    Partial Private Sub Onverified_byChanged()
    End Sub
    Partial Private Sub Onlost_time_hoursChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onlost_time_hoursChanged()
    End Sub
    Partial Private Sub Onmaterial_numberChanging(value As String)
    End Sub
    Partial Private Sub Onmaterial_numberChanged()
    End Sub
    Partial Private Sub Onitem_descChanging(value As String)
    End Sub
    Partial Private Sub Onitem_descChanged()
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanging(value As String)
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanged()
    End Sub
    Partial Private Sub Onasset_has_subassembly_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_has_subassembly_flagChanged()
    End Sub
    Partial Private Sub Onfimp_incident_idsChanging(value As String)
    End Sub
    Partial Private Sub Onfimp_incident_idsChanged()
    End Sub
    Partial Private Sub Onassembly_nameChanging(value As String)
    End Sub
    Partial Private Sub Onassembly_nameChanged()
    End Sub
    Partial Private Sub Onmaterial_serial_numberChanging(value As String)
    End Sub
    Partial Private Sub Onmaterial_serial_numberChanged()
    End Sub
    Partial Private Sub Onrow_numberChanging(value As Integer)
    End Sub
    Partial Private Sub Onrow_numberChanged()
    End Sub
    Partial Private Sub Onoriginal_asset_idChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_asset_idChanged()
    End Sub
    Partial Private Sub Onoriginal_asset_has_subassembly_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onoriginal_asset_has_subassembly_flagChanged()
    End Sub
    Partial Private Sub Oncalculated_pm_pointsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncalculated_pm_pointsChanged()
    End Sub
    Partial Private Sub Onmaterial_ship_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmaterial_ship_quantityChanged()
    End Sub
    Partial Private Sub Onmaterial_return_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmaterial_return_quantityChanged()
    End Sub
    Partial Private Sub Onmaterial_ship_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onmaterial_ship_dateChanged()
    End Sub
    Partial Private Sub Onmaterial_return_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onmaterial_return_dateChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_idChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanged()
    End Sub
    Partial Private Sub Onavail_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onavail_idChanged()
    End Sub
    Partial Private Sub Onavail_descChanging(value As String)
    End Sub
    Partial Private Sub Onavail_descChanged()
    End Sub
    Partial Private Sub Onmaintenance_descChanging(value As String)
    End Sub
    Partial Private Sub Onmaintenance_descChanged()
    End Sub
    Partial Private Sub Onoriginal_avail_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onoriginal_avail_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30)")>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_rec_id", DbType:="Int")>  _
	Public Property material_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._material_rec_id
		End Get
		Set
			If (Me._material_rec_id.Equals(value) = false) Then
				Me.Onmaterial_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._material_rec_id = value
				Me.SendPropertyChanged("material_rec_id")
				Me.Onmaterial_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="Int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me.Onpm_pointsChanging(value)
				Me.SendPropertyChanging
				Me._pm_points = value
				Me.SendPropertyChanged("pm_points")
				Me.Onpm_pointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_over_pm_pt_thresh_approval_flag", DbType:="Bit")>  _
	Public Property over_pm_pt_thresh_approved_flag() As Boolean
		Get
			Return Me._over_pm_pt_thresh_approval_flag
		End Get
		Set
			If ((Me._over_pm_pt_thresh_approval_flag = value)  _
						= false) Then
				Me.Onover_pm_pt_thresh_approved_flagChanging(value)
				Me.SendPropertyChanging
				Me._over_pm_pt_thresh_approval_flag = value
				Me.SendPropertyChanged("over_pm_pt_thresh_approved_flag")
				Me.Onover_pm_pt_thresh_approved_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_over_pm_pt_thresh_approved_by", DbType:="VarChar(20)")>  _
	Public Property over_pm_pt_thresh_approved_by() As String
		Get
			Return Me._over_pm_pt_thresh_approved_by
		End Get
		Set
			If (String.Equals(Me._over_pm_pt_thresh_approved_by, value) = false) Then
				Me.Onover_pm_pt_thresh_approved_byChanging(value)
				Me.SendPropertyChanging
				Me._over_pm_pt_thresh_approved_by = value
				Me.SendPropertyChanged("over_pm_pt_thresh_approved_by")
				Me.Onover_pm_pt_thresh_approved_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm1_approved_flag", DbType:="Bit")>  _
	Public Property pm1_approved_flag() As Boolean
		Get
			Return Me._pm1_approved_flag
		End Get
		Set
			If ((Me._pm1_approved_flag = value)  _
						= false) Then
				Me.Onpm1_approved_flagChanging(value)
				Me.SendPropertyChanging
				Me._pm1_approved_flag = value
				Me.SendPropertyChanged("pm1_approved_flag")
				Me.Onpm1_approved_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm1_approved_by", DbType:="VarChar(20)")>  _
	Public Property pm1_approved_by() As String
		Get
			Return Me._pm1_approved_by
		End Get
		Set
			If (String.Equals(Me._pm1_approved_by, value) = false) Then
				Me.Onpm1_approved_byChanging(value)
				Me.SendPropertyChanging
				Me._pm1_approved_by = value
				Me.SendPropertyChanged("pm1_approved_by")
				Me.Onpm1_approved_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_verified_flag", DbType:="Bit")>  _
	Public Property verified_flag() As Boolean
		Get
			Return Me._verified_flag
		End Get
		Set
			If ((Me._verified_flag = value)  _
						= false) Then
				Me.Onverified_flagChanging(value)
				Me.SendPropertyChanging
				Me._verified_flag = value
				Me.SendPropertyChanged("verified_flag")
				Me.Onverified_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_verified_by", DbType:="VarChar(20)")>  _
	Public Property verified_by() As String
		Get
			Return Me._verified_by
		End Get
		Set
			If (String.Equals(Me._verified_by, value) = false) Then
				Me.Onverified_byChanging(value)
				Me.SendPropertyChanging
				Me._verified_by = value
				Me.SendPropertyChanged("verified_by")
				Me.Onverified_byChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_hours", DbType:="Real")>  _
	Public Property lost_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._lost_time_hours
		End Get
		Set
			If (Me._lost_time_hours.Equals(value) = false) Then
				Me.Onlost_time_hoursChanging(value)
				Me.SendPropertyChanging
				Me._lost_time_hours = value
				Me.SendPropertyChanged("lost_time_hours")
				Me.Onlost_time_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_number", DbType:="varchar(15)", CanBeNull:=false)>  _
	Public Property material_number() As String
		Get
			Return Me._material_number
		End Get
		Set
			If (String.Equals(Me._material_number, value) = false) Then
				Me.Onmaterial_numberChanging(value)
				Me.SendPropertyChanging
				Me._material_number = value
				Me.SendPropertyChanged("material_number")
				Me.Onmaterial_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_desc", DbType:="varchar(100)", CanBeNull:=false)>  _
	Public Property item_desc() As String
		Get
			Return Me._item_desc
		End Get
		Set
			If (String.Equals(Me._item_desc, value) = false) Then
				Me.Onitem_descChanging(value)
				Me.SendPropertyChanging
				Me._item_desc = value
				Me.SendPropertyChanged("item_desc")
				Me.Onitem_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me.Onpm_point_threshold_levelChanging(value)
				Me.SendPropertyChanging
				Me._pm_point_threshold_level = value
				Me.SendPropertyChanged("pm_point_threshold_level")
				Me.Onpm_point_threshold_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_has_subassembly_flag", DbType:="bit")>  _
	Public Property asset_has_subassembly_flag() As Boolean
		Get
			Return Me._asset_has_subassembly_flag
		End Get
		Set
			If ((Me._asset_has_subassembly_flag = value)  _
						= false) Then
				Me.Onasset_has_subassembly_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_has_subassembly_flag = value
				Me.SendPropertyChanged("asset_has_subassembly_flag")
				Me.Onasset_has_subassembly_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fimp_incident_id", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property fimp_incident_ids() As String
		Get
			Return Me._fimp_incident_id
		End Get
		Set
			If (String.Equals(Me._fimp_incident_id, value) = false) Then
				Me.Onfimp_incident_idsChanging(value)
				Me.SendPropertyChanging
				Me._fimp_incident_id = value
				Me.SendPropertyChanged("fimp_incident_ids")
				Me.Onfimp_incident_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assembly_name", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property assembly_name() As String
		Get
			Return Me._assembly_name
		End Get
		Set
			If (String.Equals(Me._assembly_name, value) = false) Then
				Me.Onassembly_nameChanging(value)
				Me.SendPropertyChanging
				Me._assembly_name = value
				Me.SendPropertyChanged("assembly_name")
				Me.Onassembly_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_serial_number", DbType:="varchar(80)", CanBeNull:=false)>  _
	Public Property material_serial_number() As String
		Get
			Return Me._material_serial_number
		End Get
		Set
			If (String.Equals(Me._material_serial_number, value) = false) Then
				Me.Onmaterial_serial_numberChanging(value)
				Me.SendPropertyChanging
				Me._material_serial_number = value
				Me.SendPropertyChanged("material_serial_number")
				Me.Onmaterial_serial_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="int")>  _
	Public Property row_number() As Integer
		Get
			Return Me._row_number
		End Get
		Set
			If ((Me._row_number = value)  _
						= false) Then
				Me.Onrow_numberChanging(value)
				Me.SendPropertyChanging
				Me._row_number = value
				Me.SendPropertyChanged("row_number")
				Me.Onrow_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_asset_id", DbType:="varchar(40)", CanBeNull:=false)>  _
	Public Property original_asset_id() As String
		Get
			Return Me._original_asset_id
		End Get
		Set
			If (String.Equals(Me._original_asset_id, value) = false) Then
				Me.Onoriginal_asset_idChanging(value)
				Me.SendPropertyChanging
				Me._original_asset_id = value
				Me.SendPropertyChanged("original_asset_id")
				Me.Onoriginal_asset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_asset_has_subassembly_flag", DbType:="bit")>  _
	Public Property original_asset_has_subassembly_flag() As Boolean
		Get
			Return Me._original_asset_has_subassembly_flag
		End Get
		Set
			If ((Me._original_asset_has_subassembly_flag = value)  _
						= false) Then
				Me.Onoriginal_asset_has_subassembly_flagChanging(value)
				Me.SendPropertyChanging
				Me._original_asset_has_subassembly_flag = value
				Me.SendPropertyChanged("original_asset_has_subassembly_flag")
				Me.Onoriginal_asset_has_subassembly_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calculated_pm_points", DbType:="real")>  _
	Public Property calculated_pm_points() As System.Nullable(Of Single)
		Get
			Return Me._calculated_pm_points
		End Get
		Set
			If (Me._calculated_pm_points.Equals(value) = false) Then
				Me.Oncalculated_pm_pointsChanging(value)
				Me.SendPropertyChanging
				Me._calculated_pm_points = value
				Me.SendPropertyChanged("calculated_pm_points")
				Me.Oncalculated_pm_pointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_ship_quantity", DbType:="int")>  _
	Public Property material_ship_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._material_ship_quantity
		End Get
		Set
			If (Me._material_ship_quantity.Equals(value) = false) Then
				Me.Onmaterial_ship_quantityChanging(value)
				Me.SendPropertyChanging
				Me._material_ship_quantity = value
				Me.SendPropertyChanged("material_ship_quantity")
				Me.Onmaterial_ship_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_return_quantity", DbType:="int")>  _
	Public Property material_return_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._material_return_quantity
		End Get
		Set
			If (Me._material_return_quantity.Equals(value) = false) Then
				Me.Onmaterial_return_quantityChanging(value)
				Me.SendPropertyChanging
				Me._material_return_quantity = value
				Me.SendPropertyChanged("material_return_quantity")
				Me.Onmaterial_return_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_ship_date", DbType:="date")>  _
	Public Property material_ship_date() As System.Nullable(Of Date)
		Get
			Return Me._material_ship_date
		End Get
		Set
			If (Me._material_ship_date.Equals(value) = false) Then
				Me.Onmaterial_ship_dateChanging(value)
				Me.SendPropertyChanging
				Me._material_ship_date = value
				Me.SendPropertyChanged("material_ship_date")
				Me.Onmaterial_ship_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material_return_date", DbType:="date")>  _
	Public Property material_return_date() As System.Nullable(Of Date)
		Get
			Return Me._material_return_date
		End Get
		Set
			If (Me._material_return_date.Equals(value) = false) Then
				Me.Onmaterial_return_dateChanging(value)
				Me.SendPropertyChanging
				Me._material_return_date = value
				Me.SendPropertyChanged("material_return_date")
				Me.Onmaterial_return_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me.Oncurrent_plant_idChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_id = value
				Me.SendPropertyChanged("current_plant_id")
				Me.Oncurrent_plant_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me.Oncurrent_plant_nameChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_name = value
				Me.SendPropertyChanged("current_plant_name")
				Me.Oncurrent_plant_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me.Onavail_idChanging(value)
				Me.SendPropertyChanging
				Me._avail_id = value
				Me.SendPropertyChanged("avail_id")
				Me.Onavail_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_desc", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property avail_desc() As String
		Get
			Return Me._avail_desc
		End Get
		Set
			If (String.Equals(Me._avail_desc, value) = false) Then
				Me.Onavail_descChanging(value)
				Me.SendPropertyChanging
				Me._avail_desc = value
				Me.SendPropertyChanged("avail_desc")
				Me.Onavail_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_maintenance_desc", DbType:="varchar(200)", CanBeNull:=false)>  _
	Public Property maintenance_desc() As String
		Get
			Return Me._maintenance_desc
		End Get
		Set
			If (String.Equals(Me._maintenance_desc, value) = false) Then
				Me.Onmaintenance_descChanging(value)
				Me.SendPropertyChanging
				Me._maintenance_desc = value
				Me.SendPropertyChanged("maintenance_desc")
				Me.Onmaintenance_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_avail_id", DbType:="int")>  _
	Public Property original_avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._original_avail_id
		End Get
		Set
			If (Me._original_avail_id.Equals(value) = false) Then
				Me.Onoriginal_avail_idChanging(value)
				Me.SendPropertyChanging
				Me._original_avail_id = value
				Me.SendPropertyChanged("original_avail_id")
				Me.Onoriginal_avail_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_equipment_selection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _pm_point_threshold_level As String
	
	Private _selected As Boolean
	
	Private _status As String
	
	Private _asset_has_subassembly_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onasset_idChanging(value As String)
    End Sub
    Partial Private Sub Onasset_idChanged()
    End Sub
    Partial Private Sub Onseries_idChanging(value As String)
    End Sub
    Partial Private Sub Onseries_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_idChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_idChanged()
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncurrent_plant_nameChanged()
    End Sub
    Partial Private Sub Onavail_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onavail_idChanged()
    End Sub
    Partial Private Sub Onpm_pointsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpm_pointsChanged()
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanging(value As String)
    End Sub
    Partial Private Sub Onpm_point_threshold_levelChanged()
    End Sub
    Partial Private Sub OnselectedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnselectedChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub Onasset_has_subassembly_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_has_subassembly_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="varchar(15)", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onasset_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("asset_id")
				Me.Onasset_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="varchar(30)", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me.Onseries_idChanging(value)
				Me.SendPropertyChanging
				Me._series_id = value
				Me.SendPropertyChanged("series_id")
				Me.Onseries_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me.Oncurrent_plant_idChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_id = value
				Me.SendPropertyChanged("current_plant_id")
				Me.Oncurrent_plant_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me.Oncurrent_plant_nameChanging(value)
				Me.SendPropertyChanging
				Me._current_plant_name = value
				Me.SendPropertyChanged("current_plant_name")
				Me.Oncurrent_plant_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me.Onavail_idChanging(value)
				Me.SendPropertyChanging
				Me._avail_id = value
				Me.SendPropertyChanged("avail_id")
				Me.Onavail_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me.Onpm_pointsChanging(value)
				Me.SendPropertyChanging
				Me._pm_points = value
				Me.SendPropertyChanged("pm_points")
				Me.Onpm_pointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", CanBeNull:=false)>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me.Onpm_point_threshold_levelChanging(value)
				Me.SendPropertyChanging
				Me._pm_point_threshold_level = value
				Me.SendPropertyChanged("pm_point_threshold_level")
				Me.Onpm_point_threshold_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected", DbType:="bit")>  _
	Public Property selected() As Boolean
		Get
			Return Me._selected
		End Get
		Set
			If ((Me._selected = value)  _
						= false) Then
				Me.OnselectedChanging(value)
				Me.SendPropertyChanging
				Me._selected = value
				Me.SendPropertyChanged("selected")
				Me.OnselectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_has_subassembly_flag", DbType:="bit")>  _
	Public Property asset_has_subassembly_flag() As Boolean
		Get
			Return Me._asset_has_subassembly_flag
		End Get
		Set
			If ((Me._asset_has_subassembly_flag = value)  _
						= false) Then
				Me.Onasset_has_subassembly_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_has_subassembly_flag = value
				Me.SendPropertyChanged("asset_has_subassembly_flag")
				Me.Onasset_has_subassembly_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fimp_doc")>  _
Partial Public Class fimp_doc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _original_file_path As String
	
	Private _icon_description As String
	
	Private _file_size As System.Nullable(Of Single)
	
	Private _incident_section As String
	
	Private _section_id As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onoriginal_file_pathChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_file_pathChanged()
    End Sub
    Partial Private Sub Onicon_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Onicon_descriptionChanged()
    End Sub
    Partial Private Sub Onfile_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfile_sizeChanged()
    End Sub
    Partial Private Sub Onincident_sectionChanging(value As String)
    End Sub
    Partial Private Sub Onincident_sectionChanged()
    End Sub
    Partial Private Sub Onsection_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onsection_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_file_path", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property original_file_path() As String
		Get
			Return Me._original_file_path
		End Get
		Set
			If (String.Equals(Me._original_file_path, value) = false) Then
				Me.Onoriginal_file_pathChanging(value)
				Me.SendPropertyChanging
				Me._original_file_path = value
				Me.SendPropertyChanged("original_file_path")
				Me.Onoriginal_file_pathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon_description", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property icon_description() As String
		Get
			Return Me._icon_description
		End Get
		Set
			If (String.Equals(Me._icon_description, value) = false) Then
				Me.Onicon_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._icon_description = value
				Me.SendPropertyChanged("icon_description")
				Me.Onicon_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_size", DbType:="Real")>  _
	Public Property file_size() As System.Nullable(Of Single)
		Get
			Return Me._file_size
		End Get
		Set
			If (Me._file_size.Equals(value) = false) Then
				Me.Onfile_sizeChanging(value)
				Me.SendPropertyChanging
				Me._file_size = value
				Me.SendPropertyChanged("file_size")
				Me.Onfile_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_section", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property incident_section() As String
		Get
			Return Me._incident_section
		End Get
		Set
			If (String.Equals(Me._incident_section, value) = false) Then
				Me.Onincident_sectionChanging(value)
				Me.SendPropertyChanging
				Me._incident_section = value
				Me.SendPropertyChanged("incident_section")
				Me.Onincident_sectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="int")>  _
	Public Property section_id() As Integer
		Get
			Return Me._section_id
		End Get
		Set
			If ((Me._section_id = value)  _
						= false) Then
				Me.Onsection_idChanging(value)
				Me.SendPropertyChanging
				Me._section_id = value
				Me.SendPropertyChanged("section_id")
				Me.Onsection_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="fimp.case_worker")>  _
Partial Public Class fimp_case_worker
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As String
	
	Private _email As String
	
	Private _minimum_severity_level As System.Nullable(Of Integer)
	
	Private _dist_ids As String
	
	Private _name As String
	
	Private _dist_names As String
	
	Private _max_severity_to_approve_irb As System.Nullable(Of Integer)
	
	Private _max_severity_to_close_other_cw_incident As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As String)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Onmin_severity_for_notificationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmin_severity_for_notificationChanged()
    End Sub
    Partial Private Sub Ondist_idsChanging(value As String)
    End Sub
    Partial Private Sub Ondist_idsChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Ondist_namesChanging(value As String)
    End Sub
    Partial Private Sub Ondist_namesChanged()
    End Sub
    Partial Private Sub Onmax_severity_to_approve_irbChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmax_severity_to_approve_irbChanged()
    End Sub
    Partial Private Sub Onmax_severity_to_close_other_cw_incidentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmax_severity_to_close_other_cw_incidentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minimum_severity_level", DbType:="Int")>  _
	Public Property min_severity_for_notification() As System.Nullable(Of Integer)
		Get
			Return Me._minimum_severity_level
		End Get
		Set
			If (Me._minimum_severity_level.Equals(value) = false) Then
				Me.Onmin_severity_for_notificationChanging(value)
				Me.SendPropertyChanging
				Me._minimum_severity_level = value
				Me.SendPropertyChanged("min_severity_for_notification")
				Me.Onmin_severity_for_notificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_ids", DbType:="varchar(2000)", CanBeNull:=false)>  _
	Public Property dist_ids() As String
		Get
			Return Me._dist_ids
		End Get
		Set
			If (String.Equals(Me._dist_ids, value) = false) Then
				Me.Ondist_idsChanging(value)
				Me.SendPropertyChanging
				Me._dist_ids = value
				Me.SendPropertyChanged("dist_ids")
				Me.Ondist_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_names", CanBeNull:=false)>  _
	Public Property dist_names() As String
		Get
			Return Me._dist_names
		End Get
		Set
			If (String.Equals(Me._dist_names, value) = false) Then
				Me.Ondist_namesChanging(value)
				Me.SendPropertyChanging
				Me._dist_names = value
				Me.SendPropertyChanged("dist_names")
				Me.Ondist_namesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_severity_to_approve_irb", DbType:="int")>  _
	Public Property max_severity_to_approve_irb() As System.Nullable(Of Integer)
		Get
			Return Me._max_severity_to_approve_irb
		End Get
		Set
			If (Me._max_severity_to_approve_irb.Equals(value) = false) Then
				Me.Onmax_severity_to_approve_irbChanging(value)
				Me.SendPropertyChanging
				Me._max_severity_to_approve_irb = value
				Me.SendPropertyChanged("max_severity_to_approve_irb")
				Me.Onmax_severity_to_approve_irbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_severity_to_close_other_cw_incident", DbType:="int")>  _
	Public Property max_severity_to_close_other_cw_incident() As System.Nullable(Of Integer)
		Get
			Return Me._max_severity_to_close_other_cw_incident
		End Get
		Set
			If (Me._max_severity_to_close_other_cw_incident.Equals(value) = false) Then
				Me.Onmax_severity_to_close_other_cw_incidentChanging(value)
				Me.SendPropertyChanging
				Me._max_severity_to_close_other_cw_incident = value
				Me.SendPropertyChanged("max_severity_to_close_other_cw_incident")
				Me.Onmax_severity_to_close_other_cw_incidentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class v_rig_tracker
	
	Private _disp_id As Integer
	
	Private _job_start_date As System.Nullable(Of Date)
	
	Private _job_end_date As System.Nullable(Of Date)
	
	Private _job_duration As System.Nullable(Of Integer)
	
	Private _status As Short
	
	Private _well_name As String
	
	Private _truck As String
	
	Private _truck_type As String
	
	Private _aux_unit As String
	
	Private _aux_unit_type As String
	
	Private _acquisition_market_code As String
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _driller_td As String
	
	Private _max_temperature As String
	
	Private _deviation As String
	
	Private _fluid_type As String
	
	Private _h2s As System.Nullable(Of Single)
	
	Private _co2 As System.Nullable(Of Single)
	
	Private _comments As String
	
	Private _spec_req As String
	
	Private _service_list As String
	
	Private _rig_id As String
	
	Private _rig_name As String
	
	Private _oilcomp_id As String
	
	Private _company_name As String
	
	Private _group_name As String
	
	Private _row_number As System.Nullable(Of Integer)
	
	Private _engineer_name As String
	
	Private _hole_size As String
	
	Private _sales_order_number As String
	
	Private _total_fso_count As System.Nullable(Of Integer)
	
	Private _exported_fso_count As System.Nullable(Of Integer)
	
	Private _total_quote_count As System.Nullable(Of Integer)
	
	Private _exported_quote_count As System.Nullable(Of Integer)
	
	Private _status_desc As String
	
	Private _environment_market_code As System.Nullable(Of Short)
	
	Private _psl As String
	
	Private _dist_name As String
	
	Private _fluid_weight As System.Nullable(Of Single)
	
	Private _dist_color As System.Nullable(Of Integer)
	
	Private _operating_time As System.Nullable(Of Decimal)
	
	Private _lost_time As System.Nullable(Of Decimal)
	
	Private _productive_trip_count As System.Nullable(Of Integer)
	
	Private _lost_time_trip_count As System.Nullable(Of Integer)
	
	Private _group_sort_order As Integer
	
	Private _group_color As System.Nullable(Of Integer)
	
	Private _formatted_disp_id As String
	
	Private _fso_revenue As System.Nullable(Of Decimal)
	
	Private _quote_revenue As System.Nullable(Of Decimal)
	
	Private _estimated_revenue As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_start_date", DbType:="SmallDateTime")>  _
	Public Property job_start_date() As System.Nullable(Of Date)
		Get
			Return Me._job_start_date
		End Get
		Set
			If (Me._job_start_date.Equals(value) = false) Then
				Me._job_start_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_end_date", DbType:="DateTime")>  _
	Public Property job_end_date() As System.Nullable(Of Date)
		Get
			Return Me._job_end_date
		End Get
		Set
			If (Me._job_end_date.Equals(value) = false) Then
				Me._job_end_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_duration", DbType:="Int")>  _
	Public Property job_duration() As System.Nullable(Of Integer)
		Get
			Return Me._job_duration
		End Get
		Set
			If (Me._job_duration.Equals(value) = false) Then
				Me._job_duration = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50)")>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me._truck = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck_type", DbType:="VarChar(30)")>  _
	Public Property truck_type() As String
		Get
			Return Me._truck_type
		End Get
		Set
			If (String.Equals(Me._truck_type, value) = false) Then
				Me._truck_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit", DbType:="VarChar(50)")>  _
	Public Property aux_unit() As String
		Get
			Return Me._aux_unit
		End Get
		Set
			If (String.Equals(Me._aux_unit, value) = false) Then
				Me._aux_unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit_type", DbType:="VarChar(30)")>  _
	Public Property aux_unit_type() As String
		Get
			Return Me._aux_unit_type
		End Get
		Set
			If (String.Equals(Me._aux_unit_type, value) = false) Then
				Me._aux_unit_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_market_code", DbType:="VarChar(50)")>  _
	Public Property acquisition_market_code() As String
		Get
			Return Me._acquisition_market_code
		End Get
		Set
			If (String.Equals(Me._acquisition_market_code, value) = false) Then
				Me._acquisition_market_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_driller_td", DbType:="VarChar(21)")>  _
	Public Property driller_td() As String
		Get
			Return Me._driller_td
		End Get
		Set
			If (String.Equals(Me._driller_td, value) = false) Then
				Me._driller_td = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_temperature", DbType:="VarChar(21)")>  _
	Public Property max_temperature() As String
		Get
			Return Me._max_temperature
		End Get
		Set
			If (String.Equals(Me._max_temperature, value) = false) Then
				Me._max_temperature = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deviation", DbType:="VarChar(14)")>  _
	Public Property deviation() As String
		Get
			Return Me._deviation
		End Get
		Set
			If (String.Equals(Me._deviation, value) = false) Then
				Me._deviation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_type", DbType:="VarChar(50)")>  _
	Public Property fluid_type() As String
		Get
			Return Me._fluid_type
		End Get
		Set
			If (String.Equals(Me._fluid_type, value) = false) Then
				Me._fluid_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_h2s", DbType:="Real")>  _
	Public Property h2s() As System.Nullable(Of Single)
		Get
			Return Me._h2s
		End Get
		Set
			If (Me._h2s.Equals(value) = false) Then
				Me._h2s = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_co2", DbType:="Real")>  _
	Public Property co2() As System.Nullable(Of Single)
		Get
			Return Me._co2
		End Get
		Set
			If (Me._co2.Equals(value) = false) Then
				Me._co2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me._comments = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_spec_req", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property spec_req() As String
		Get
			Return Me._spec_req
		End Get
		Set
			If (String.Equals(Me._spec_req, value) = false) Then
				Me._spec_req = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list", DbType:="VarChar(1000)")>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me._service_list = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_id", DbType:="VarChar(40)")>  _
	Public Property rig_id() As String
		Get
			Return Me._rig_id
		End Get
		Set
			If (String.Equals(Me._rig_id, value) = false) Then
				Me._rig_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_name", DbType:="VarChar(100)")>  _
	Public Property rig_name() As String
		Get
			Return Me._rig_name
		End Get
		Set
			If (String.Equals(Me._rig_name, value) = false) Then
				Me._rig_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", DbType:="VarChar(80)")>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me._company_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_name", DbType:="VarChar(50)")>  _
	Public Property group_name() As String
		Get
			Return Me._group_name
		End Get
		Set
			If (String.Equals(Me._group_name, value) = false) Then
				Me._group_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int")>  _
	Public Property rig_sort_order() As System.Nullable(Of Integer)
		Get
			Return Me._row_number
		End Get
		Set
			If (Me._row_number.Equals(value) = false) Then
				Me._row_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_engineer_name", DbType:="VarChar(25)")>  _
	Public Property engineer_name() As String
		Get
			Return Me._engineer_name
		End Get
		Set
			If (String.Equals(Me._engineer_name, value) = false) Then
				Me._engineer_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hole_size", DbType:="VarChar(41)")>  _
	Public Property hole_size() As String
		Get
			Return Me._hole_size
		End Get
		Set
			If (String.Equals(Me._hole_size, value) = false) Then
				Me._hole_size = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_order_number", DbType:="VarChar(20)")>  _
	Public Property sales_order_number() As String
		Get
			Return Me._sales_order_number
		End Get
		Set
			If (String.Equals(Me._sales_order_number, value) = false) Then
				Me._sales_order_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_fso_count", DbType:="Int")>  _
	Public Property total_fso_count() As System.Nullable(Of Integer)
		Get
			Return Me._total_fso_count
		End Get
		Set
			If (Me._total_fso_count.Equals(value) = false) Then
				Me._total_fso_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_fso_count", DbType:="Int")>  _
	Public Property exported_fso_count() As System.Nullable(Of Integer)
		Get
			Return Me._exported_fso_count
		End Get
		Set
			If (Me._exported_fso_count.Equals(value) = false) Then
				Me._exported_fso_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_quote_count", DbType:="Int")>  _
	Public Property total_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._total_quote_count
		End Get
		Set
			If (Me._total_quote_count.Equals(value) = false) Then
				Me._total_quote_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_quote_count", DbType:="Int")>  _
	Public Property exported_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._exported_quote_count
		End Get
		Set
			If (Me._exported_quote_count.Equals(value) = false) Then
				Me._exported_quote_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_desc")>  _
	Public Property status_desc() As String
		Get
			Return Me._status_desc
		End Get
		Set
			If (String.Equals(Me._status_desc, value) = false) Then
				Me._status_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_environment_market_code", DbType:="smallint")>  _
	Public Property environment_market_code() As System.Nullable(Of Short)
		Get
			Return Me._environment_market_code
		End Get
		Set
			If (Me._environment_market_code.Equals(value) = false) Then
				Me._environment_market_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_name", CanBeNull:=false)>  _
	Public Property dist_name() As String
		Get
			Return Me._dist_name
		End Get
		Set
			If (String.Equals(Me._dist_name, value) = false) Then
				Me._dist_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_weight")>  _
	Public Property fluid_weight() As System.Nullable(Of Single)
		Get
			Return Me._fluid_weight
		End Get
		Set
			If (Me._fluid_weight.Equals(value) = false) Then
				Me._fluid_weight = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_color")>  _
	Public Property dist_color() As System.Nullable(Of Integer)
		Get
			Return Me._dist_color
		End Get
		Set
			If (Me._dist_color.Equals(value) = false) Then
				Me._dist_color = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time")>  _
	Public Property operating_time() As System.Nullable(Of Decimal)
		Get
			Return Me._operating_time
		End Get
		Set
			If (Me._operating_time.Equals(value) = false) Then
				Me._operating_time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time")>  _
	Public Property lost_time() As System.Nullable(Of Decimal)
		Get
			Return Me._lost_time
		End Get
		Set
			If (Me._lost_time.Equals(value) = false) Then
				Me._lost_time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productive_trip_count")>  _
	Public Property productive_trip_count() As System.Nullable(Of Integer)
		Get
			Return Me._productive_trip_count
		End Get
		Set
			If (Me._productive_trip_count.Equals(value) = false) Then
				Me._productive_trip_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_trip_count")>  _
	Public Property lost_time_trip_count() As System.Nullable(Of Integer)
		Get
			Return Me._lost_time_trip_count
		End Get
		Set
			If (Me._lost_time_trip_count.Equals(value) = false) Then
				Me._lost_time_trip_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_sort_order")>  _
	Public Property group_sort_order() As Integer
		Get
			Return Me._group_sort_order
		End Get
		Set
			If ((Me._group_sort_order = value)  _
						= false) Then
				Me._group_sort_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_color", DbType:="int")>  _
	Public Property group_color() As System.Nullable(Of Integer)
		Get
			Return Me._group_color
		End Get
		Set
			If (Me._group_color.Equals(value) = false) Then
				Me._group_color = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", CanBeNull:=false)>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_revenue")>  _
	Public Property fso_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._fso_revenue
		End Get
		Set
			If (Me._fso_revenue.Equals(value) = false) Then
				Me._fso_revenue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_revenue")>  _
	Public Property quote_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._quote_revenue
		End Get
		Set
			If (Me._quote_revenue.Equals(value) = false) Then
				Me._quote_revenue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estimated_revenue")>  _
	Public Property estimated_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._estimated_revenue
		End Get
		Set
			If (Me._estimated_revenue.Equals(value) = false) Then
				Me._estimated_revenue = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="fimp.notification_config")>  _
Partial Public Class notification_config
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _notification_type As String
	
	Private _notification_text As String
	
	Private _notification_type_id As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onnotification_sectionChanging(value As String)
    End Sub
    Partial Private Sub Onnotification_sectionChanged()
    End Sub
    Partial Private Sub Onnotification_textChanging(value As String)
    End Sub
    Partial Private Sub Onnotification_textChanged()
    End Sub
    Partial Private Sub Onnotification_type_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onnotification_type_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_type", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property notification_section() As String
		Get
			Return Me._notification_type
		End Get
		Set
			If (String.Equals(Me._notification_type, value) = false) Then
				Me.Onnotification_sectionChanging(value)
				Me.SendPropertyChanging
				Me._notification_type = value
				Me.SendPropertyChanged("notification_section")
				Me.Onnotification_sectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_text", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property notification_text() As String
		Get
			Return Me._notification_text
		End Get
		Set
			If (String.Equals(Me._notification_text, value) = false) Then
				Me.Onnotification_textChanging(value)
				Me.SendPropertyChanging
				Me._notification_text = value
				Me.SendPropertyChanged("notification_text")
				Me.Onnotification_textChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_type_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property notification_type_id() As Integer
		Get
			Return Me._notification_type_id
		End Get
		Set
			If ((Me._notification_type_id = value)  _
						= false) Then
				Me.Onnotification_type_idChanging(value)
				Me.SendPropertyChanging
				Me._notification_type_id = value
				Me.SendPropertyChanged("notification_type_id")
				Me.Onnotification_type_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="fimp.procedure_doc")>  _
Partial Public Class procedure_doc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _document_type_id As System.Nullable(Of Integer)
	
	Private _document_url As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondocument_type_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondocument_type_idChanged()
    End Sub
    Partial Private Sub Ondocument_urlChanging(value As String)
    End Sub
    Partial Private Sub Ondocument_urlChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type_id", DbType:="int")>  _
	Public Property document_type_id() As System.Nullable(Of Integer)
		Get
			Return Me._document_type_id
		End Get
		Set
			If (Me._document_type_id.Equals(value) = false) Then
				Me.Ondocument_type_idChanging(value)
				Me.SendPropertyChanging
				Me._document_type_id = value
				Me.SendPropertyChanged("document_type_id")
				Me.Ondocument_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_url", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property document_url() As String
		Get
			Return Me._document_url
		End Get
		Set
			If (String.Equals(Me._document_url, value) = false) Then
				Me.Ondocument_urlChanging(value)
				Me.SendPropertyChanging
				Me._document_url = value
				Me.SendPropertyChanged("document_url")
				Me.Ondocument_urlChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.perf_parameter")>  _
Partial Public Class perf_parameter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _sequence_number As System.Nullable(Of Integer)
	
	Private _response_meta_data As String
	
	Private _inactive_flag As Boolean
	
	Private _service_ids As String
	
	Private _used_on_job_flag As Boolean
	
	Private _param_id As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onsequence_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsequence_numberChanged()
    End Sub
    Partial Private Sub Onresponse_meta_dataChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_meta_dataChanged()
    End Sub
    Partial Private Sub Oninactive_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninactive_flagChanged()
    End Sub
    Partial Private Sub Onservice_idsChanging(value As String)
    End Sub
    Partial Private Sub Onservice_idsChanged()
    End Sub
    Partial Private Sub Onused_on_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onused_on_job_flagChanged()
    End Sub
    Partial Private Sub Onparam_type_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onparam_type_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int")>  _
	Public Property sequence_number() As System.Nullable(Of Integer)
		Get
			Return Me._sequence_number
		End Get
		Set
			If (Me._sequence_number.Equals(value) = false) Then
				Me.Onsequence_numberChanging(value)
				Me.SendPropertyChanging
				Me._sequence_number = value
				Me.SendPropertyChanged("sequence_number")
				Me.Onsequence_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_meta_data", DbType:="VarChar(100)")>  _
	Public Property response_meta_data() As String
		Get
			Return Me._response_meta_data
		End Get
		Set
			If (String.Equals(Me._response_meta_data, value) = false) Then
				Me.Onresponse_meta_dataChanging(value)
				Me.SendPropertyChanging
				Me._response_meta_data = value
				Me.SendPropertyChanged("response_meta_data")
				Me.Onresponse_meta_dataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="Bit NOT NULL")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me.Oninactive_flagChanging(value)
				Me.SendPropertyChanging
				Me._inactive_flag = value
				Me.SendPropertyChanged("inactive_flag")
				Me.Oninactive_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_ids", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property service_ids() As String
		Get
			Return Me._service_ids
		End Get
		Set
			If (String.Equals(Me._service_ids, value) = false) Then
				Me.Onservice_idsChanging(value)
				Me.SendPropertyChanging
				Me._service_ids = value
				Me.SendPropertyChanged("service_ids")
				Me.Onservice_idsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_used_on_job_flag", DbType:="bit")>  _
	Public Property used_on_job_flag() As Boolean
		Get
			Return Me._used_on_job_flag
		End Get
		Set
			If ((Me._used_on_job_flag = value)  _
						= false) Then
				Me.Onused_on_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._used_on_job_flag = value
				Me.SendPropertyChanged("used_on_job_flag")
				Me.Onused_on_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_id", DbType:="int")>  _
	Public Property param_type_id() As System.Nullable(Of Integer)
		Get
			Return Me._param_id
		End Get
		Set
			If (Me._param_id.Equals(value) = false) Then
				Me.Onparam_type_idChanging(value)
				Me.SendPropertyChanging
				Me._param_id = value
				Me.SendPropertyChanged("param_type_id")
				Me.Onparam_type_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.perf_parameter_type")>  _
Partial Public Class perf_parameter_type
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _param_text As String
	
	Private _response_type_id As String
	
	Private _used_on_job_flag As Boolean
	
	Private _original_param_text As String
	
	Private _add_to_stage_report_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onparam_textChanging(value As String)
    End Sub
    Partial Private Sub Onparam_textChanged()
    End Sub
    Partial Private Sub Onresponse_type_idChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_type_idChanged()
    End Sub
    Partial Private Sub Onused_on_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onused_on_job_flagChanged()
    End Sub
    Partial Private Sub Onoriginal_param_textChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_param_textChanged()
    End Sub
    Partial Private Sub Onadd_to_stage_report_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onadd_to_stage_report_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_text", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property param_text() As String
		Get
			Return Me._param_text
		End Get
		Set
			If (String.Equals(Me._param_text, value) = false) Then
				Me.Onparam_textChanging(value)
				Me.SendPropertyChanging
				Me._param_text = value
				Me.SendPropertyChanged("param_text")
				Me.Onparam_textChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me.Onresponse_type_idChanging(value)
				Me.SendPropertyChanging
				Me._response_type_id = value
				Me.SendPropertyChanged("response_type_id")
				Me.Onresponse_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_used_on_job_flag", DbType:="bit")>  _
	Public Property used_on_job_flag() As Boolean
		Get
			Return Me._used_on_job_flag
		End Get
		Set
			If ((Me._used_on_job_flag = value)  _
						= false) Then
				Me.Onused_on_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._used_on_job_flag = value
				Me.SendPropertyChanged("used_on_job_flag")
				Me.Onused_on_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_param_text", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property original_param_text() As String
		Get
			Return Me._original_param_text
		End Get
		Set
			If (String.Equals(Me._original_param_text, value) = false) Then
				Me.Onoriginal_param_textChanging(value)
				Me.SendPropertyChanging
				Me._original_param_text = value
				Me.SendPropertyChanged("original_param_text")
				Me.Onoriginal_param_textChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_add_to_stage_report_flag", DbType:="bit")>  _
	Public Property add_to_stage_report_flag() As Boolean
		Get
			Return Me._add_to_stage_report_flag
		End Get
		Set
			If ((Me._add_to_stage_report_flag = value)  _
						= false) Then
				Me.Onadd_to_stage_report_flagChanging(value)
				Me.SendPropertyChanging
				Me._add_to_stage_report_flag = value
				Me.SendPropertyChanged("add_to_stage_report_flag")
				Me.Onadd_to_stage_report_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_perf")>  _
Partial Public Class disp_perf_response
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _param_id As Integer
	
	Private _zone As Integer
	
	Private _response_data As String
	
	Private _rec_id As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onparam_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onparam_idChanged()
    End Sub
    Partial Private Sub OnzoneChanging(value As Integer)
    End Sub
    Partial Private Sub OnzoneChanged()
    End Sub
    Partial Private Sub Onresponse_dataChanging(value As String)
    End Sub
    Partial Private Sub Onresponse_dataChanged()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_id", DbType:="Int NOT NULL")>  _
	Public Property param_id() As Integer
		Get
			Return Me._param_id
		End Get
		Set
			If ((Me._param_id = value)  _
						= false) Then
				Me.Onparam_idChanging(value)
				Me.SendPropertyChanging
				Me._param_id = value
				Me.SendPropertyChanged("param_id")
				Me.Onparam_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zone", DbType:="Int NOT NULL")>  _
	Public Property zone() As Integer
		Get
			Return Me._zone
		End Get
		Set
			If ((Me._zone = value)  _
						= false) Then
				Me.OnzoneChanging(value)
				Me.SendPropertyChanging
				Me._zone = value
				Me.SendPropertyChanged("zone")
				Me.OnzoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_data", DbType:="VarChar(MAX)")>  _
	Public Property response_data() As String
		Get
			Return Me._response_data
		End Get
		Set
			If (String.Equals(Me._response_data, value) = false) Then
				Me.Onresponse_dataChanging(value)
				Me.SendPropertyChanging
				Me._response_data = value
				Me.SendPropertyChanged("response_data")
				Me.Onresponse_dataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_completions_asset_utilization")>  _
Partial Public Class disp_equipment_utilization
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_asset_rec_id As Integer
	
	Private _column_order As Integer
	
	Private _op As System.Nullable(Of Integer)
	
	Private _trip As System.Nullable(Of Integer)
	
	Private _original_op As System.Nullable(Of Integer)
	
	Private _original_trip As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_asset_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_asset_rec_idChanged()
    End Sub
    Partial Private Sub Oncolumn_orderChanging(value As Integer)
    End Sub
    Partial Private Sub Oncolumn_orderChanged()
    End Sub
    Partial Private Sub OnopChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnopChanged()
    End Sub
    Partial Private Sub OntripChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntripChanged()
    End Sub
    Partial Private Sub Onoriginal_opChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onoriginal_opChanged()
    End Sub
    Partial Private Sub Onoriginal_tripChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onoriginal_tripChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_asset_rec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_asset_rec_id() As Integer
		Get
			Return Me._disp_asset_rec_id
		End Get
		Set
			If ((Me._disp_asset_rec_id = value)  _
						= false) Then
				Me.Ondisp_asset_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_asset_rec_id = value
				Me.SendPropertyChanged("disp_asset_rec_id")
				Me.Ondisp_asset_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_column_order", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property column_order() As Integer
		Get
			Return Me._column_order
		End Get
		Set
			If ((Me._column_order = value)  _
						= false) Then
				Me.Oncolumn_orderChanging(value)
				Me.SendPropertyChanging
				Me._column_order = value
				Me.SendPropertyChanged("column_order")
				Me.Oncolumn_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op", DbType:="Int ")>  _
	Public Property op() As System.Nullable(Of Integer)
		Get
			Return Me._op
		End Get
		Set
			If (Me._op.Equals(value) = false) Then
				Me.OnopChanging(value)
				Me.SendPropertyChanging
				Me._op = value
				Me.SendPropertyChanged("op")
				Me.OnopChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trip", DbType:="Int ")>  _
	Public Property trip() As System.Nullable(Of Integer)
		Get
			Return Me._trip
		End Get
		Set
			If (Me._trip.Equals(value) = false) Then
				Me.OntripChanging(value)
				Me.SendPropertyChanging
				Me._trip = value
				Me.SendPropertyChanged("trip")
				Me.OntripChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_op", DbType:="int")>  _
	Public Property original_op() As System.Nullable(Of Integer)
		Get
			Return Me._original_op
		End Get
		Set
			If (Me._original_op.Equals(value) = false) Then
				Me.Onoriginal_opChanging(value)
				Me.SendPropertyChanging
				Me._original_op = value
				Me.SendPropertyChanged("original_op")
				Me.Onoriginal_opChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_trip", DbType:="int")>  _
	Public Property original_trip() As System.Nullable(Of Integer)
		Get
			Return Me._original_trip
		End Get
		Set
			If (Me._original_trip.Equals(value) = false) Then
				Me.Onoriginal_tripChanging(value)
				Me.SendPropertyChanging
				Me._original_trip = value
				Me.SendPropertyChanged("original_trip")
				Me.Onoriginal_tripChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_assembly_instruction")>  _
Partial Public Class disp_assembly_instruction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _assembly_name As String
	
	Private _instructions As String
	
	Private _original_assembly_name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onassembly_nameChanging(value As String)
    End Sub
    Partial Private Sub Onassembly_nameChanged()
    End Sub
    Partial Private Sub OninstructionsChanging(value As String)
    End Sub
    Partial Private Sub OninstructionsChanged()
    End Sub
    Partial Private Sub Onoriginal_assembly_nameChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_assembly_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assembly_name", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property assembly_name() As String
		Get
			Return Me._assembly_name
		End Get
		Set
			If (String.Equals(Me._assembly_name, value) = false) Then
				Me.Onassembly_nameChanging(value)
				Me.SendPropertyChanging
				Me._assembly_name = value
				Me.SendPropertyChanged("assembly_name")
				Me.Onassembly_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_instructions", DbType:="VarChar(1500) NOT NULL", CanBeNull:=false)>  _
	Public Property instructions() As String
		Get
			Return Me._instructions
		End Get
		Set
			If (String.Equals(Me._instructions, value) = false) Then
				Me.OninstructionsChanging(value)
				Me.SendPropertyChanging
				Me._instructions = value
				Me.SendPropertyChanged("instructions")
				Me.OninstructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_assembly_name", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property original_assembly_name() As String
		Get
			Return Me._original_assembly_name
		End Get
		Set
			If (String.Equals(Me._original_assembly_name, value) = false) Then
				Me.Onoriginal_assembly_nameChanging(value)
				Me.SendPropertyChanging
				Me._original_assembly_name = value
				Me.SendPropertyChanged("original_assembly_name")
				Me.Onoriginal_assembly_nameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fimp_contributing_factor")>  _
Partial Public Class fimp_contributing_factor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _root_cause_rec_id As Integer
	
	Private _contributing_factor As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onroot_cause_rec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onroot_cause_rec_idChanged()
    End Sub
    Partial Private Sub Oncontributing_factorChanging(value As String)
    End Sub
    Partial Private Sub Oncontributing_factorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_rec_id", DbType:="Int NOT NULL")>  _
	Public Property root_cause_rec_id() As Integer
		Get
			Return Me._root_cause_rec_id
		End Get
		Set
			If ((Me._root_cause_rec_id = value)  _
						= false) Then
				Me.Onroot_cause_rec_idChanging(value)
				Me.SendPropertyChanging
				Me._root_cause_rec_id = value
				Me.SendPropertyChanged("root_cause_rec_id")
				Me.Onroot_cause_rec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contributing_factor", DbType:="varchar(500)", CanBeNull:=false)>  _
	Public Property contributing_factor() As String
		Get
			Return Me._contributing_factor
		End Get
		Set
			If (String.Equals(Me._contributing_factor, value) = false) Then
				Me.Oncontributing_factorChanging(value)
				Me.SendPropertyChanging
				Me._contributing_factor = value
				Me.SendPropertyChanged("contributing_factor")
				Me.Oncontributing_factorChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.psdisp_pump_down_rate")>  _
Partial Public Class disp_pump_down_rate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _rate As System.Nullable(Of Integer)
	
	Private _pressure As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OnrateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrateChanged()
    End Sub
    Partial Private Sub OnpressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnpressureChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Int ")>  _
	Public Property rate() As System.Nullable(Of Integer)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me.OnrateChanging(value)
				Me.SendPropertyChanging
				Me._rate = value
				Me.SendPropertyChanged("rate")
				Me.OnrateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pressure", DbType:="Real ")>  _
	Public Property pressure() As System.Nullable(Of Single)
		Get
			Return Me._pressure
		End Get
		Set
			If (Me._pressure.Equals(value) = false) Then
				Me.OnpressureChanging(value)
				Me.SendPropertyChanging
				Me._pressure = value
				Me.SendPropertyChanged("pressure")
				Me.OnpressureChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_accounting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _revenue As System.Nullable(Of Decimal)
	
	Private _optional_revenue As System.Nullable(Of Decimal)
	
	Private _instrument_protection As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OnrevenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnrevenueChanged()
    End Sub
    Partial Private Sub Onoptional_revenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onoptional_revenueChanged()
    End Sub
    Partial Private Sub Oninstrument_protectionChanging(value As String)
    End Sub
    Partial Private Sub Oninstrument_protectionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue", DbType:="decimal(15, 2)")>  _
	Public Property revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._revenue
		End Get
		Set
			If (Me._revenue.Equals(value) = false) Then
				Me.OnrevenueChanging(value)
				Me.SendPropertyChanging
				Me._revenue = value
				Me.SendPropertyChanged("revenue")
				Me.OnrevenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optional_revenue", DbType:="decimal(15, 2)")>  _
	Public Property optional_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._optional_revenue
		End Get
		Set
			If (Me._optional_revenue.Equals(value) = false) Then
				Me.Onoptional_revenueChanging(value)
				Me.SendPropertyChanging
				Me._optional_revenue = value
				Me.SendPropertyChanged("optional_revenue")
				Me.Onoptional_revenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_instrument_protection", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property instrument_protection() As String
		Get
			Return Me._instrument_protection
		End Get
		Set
			If (String.Equals(Me._instrument_protection, value) = false) Then
				Me.Oninstrument_protectionChanging(value)
				Me.SendPropertyChanging
				Me._instrument_protection = value
				Me.SendPropertyChanged("instrument_protection")
				Me.Oninstrument_protectionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_environment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _operation_market_code As String
	
	Private _environment_market_code As System.Nullable(Of Short)
	
	Private _rig_type_market_code As String
	
	Private _service_type_market_code As String
	
	Private _well_type_market_code As String
	
	Private _acquisition_market_code As String
	
	Private _security_market_code As String
	
	Private _prospect_market_code As String
	
	Private _depth_measurement_unit As String
	
	Private _hole_size_measurement_unit As String
	
	Private _density_measurement_unit As String
	
	Private _temperature_measurement_unit As String
	
	Private _weight_measurement_unit As String
	
	Private _concentration_measurement_unit As String
	
	Private _currency_measurement_unit As String
	
	Private _length_measurement_unit As String
	
	Private _distance_measurement_unit As String
	
	Private _tight_hole_user_access_level As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onoperation_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onoperation_market_codeChanged()
    End Sub
    Partial Private Sub Onenvironment_market_codeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub Onenvironment_market_codeChanged()
    End Sub
    Partial Private Sub Onrig_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onrig_type_market_codeChanged()
    End Sub
    Partial Private Sub Onservice_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onservice_type_market_codeChanged()
    End Sub
    Partial Private Sub Onwell_type_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onwell_type_market_codeChanged()
    End Sub
    Partial Private Sub Onacquisition_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onacquisition_market_codeChanged()
    End Sub
    Partial Private Sub Onsecurity_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onsecurity_market_codeChanged()
    End Sub
    Partial Private Sub Onprospect_market_codeChanging(value As String)
    End Sub
    Partial Private Sub Onprospect_market_codeChanged()
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanged()
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanged()
    End Sub
    Partial Private Sub Ondensity_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondensity_measurement_unitChanged()
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanged()
    End Sub
    Partial Private Sub Onweight_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onweight_measurement_unitChanged()
    End Sub
    Partial Private Sub Onconcentration_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onconcentration_measurement_unitChanged()
    End Sub
    Partial Private Sub Oncurrency_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Oncurrency_measurement_unitChanged()
    End Sub
    Partial Private Sub Onlength_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onlength_measurement_unitChanged()
    End Sub
    Partial Private Sub Ondistance_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondistance_measurement_unitChanged()
    End Sub
    Partial Private Sub Ontight_hole_user_access_levelChanging(value As String)
    End Sub
    Partial Private Sub Ontight_hole_user_access_levelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operation_market_code", DbType:="VarChar(50)")>  _
	Public Property operation_market_code() As String
		Get
			Return Me._operation_market_code
		End Get
		Set
			If (String.Equals(Me._operation_market_code, value) = false) Then
				Me.Onoperation_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._operation_market_code = value
				Me.SendPropertyChanged("operation_market_code")
				Me.Onoperation_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_environment_market_code", DbType:="smallint")>  _
	Public Property environment_market_code() As System.Nullable(Of Short)
		Get
			Return Me._environment_market_code
		End Get
		Set
			If (Me._environment_market_code.Equals(value) = false) Then
				Me.Onenvironment_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._environment_market_code = value
				Me.SendPropertyChanged("environment_market_code")
				Me.Onenvironment_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_type_market_code", DbType:="VarChar(50)")>  _
	Public Property rig_type_market_code() As String
		Get
			Return Me._rig_type_market_code
		End Get
		Set
			If (String.Equals(Me._rig_type_market_code, value) = false) Then
				Me.Onrig_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._rig_type_market_code = value
				Me.SendPropertyChanged("rig_type_market_code")
				Me.Onrig_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_type_market_code", DbType:="VarChar(50)")>  _
	Public Property service_type_market_code() As String
		Get
			Return Me._service_type_market_code
		End Get
		Set
			If (String.Equals(Me._service_type_market_code, value) = false) Then
				Me.Onservice_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._service_type_market_code = value
				Me.SendPropertyChanged("service_type_market_code")
				Me.Onservice_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_type_market_code", DbType:="VarChar(50)")>  _
	Public Property well_type_market_code() As String
		Get
			Return Me._well_type_market_code
		End Get
		Set
			If (String.Equals(Me._well_type_market_code, value) = false) Then
				Me.Onwell_type_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._well_type_market_code = value
				Me.SendPropertyChanged("well_type_market_code")
				Me.Onwell_type_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_acquisition_market_code", DbType:="VarChar(50)")>  _
	Public Property acquisition_market_code() As String
		Get
			Return Me._acquisition_market_code
		End Get
		Set
			If (String.Equals(Me._acquisition_market_code, value) = false) Then
				Me.Onacquisition_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._acquisition_market_code = value
				Me.SendPropertyChanged("acquisition_market_code")
				Me.Onacquisition_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_security_market_code", DbType:="VarChar(50)")>  _
	Public Property security_market_code() As String
		Get
			Return Me._security_market_code
		End Get
		Set
			If (String.Equals(Me._security_market_code, value) = false) Then
				Me.Onsecurity_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._security_market_code = value
				Me.SendPropertyChanged("security_market_code")
				Me.Onsecurity_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prospect_market_code", DbType:="VarChar(50)")>  _
	Public Property prospect_market_code() As String
		Get
			Return Me._prospect_market_code
		End Get
		Set
			If (String.Equals(Me._prospect_market_code, value) = false) Then
				Me.Onprospect_market_codeChanging(value)
				Me.SendPropertyChanging
				Me._prospect_market_code = value
				Me.SendPropertyChanged("prospect_market_code")
				Me.Onprospect_market_codeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property depth_measurement_unit() As String
		Get
			Return Me._depth_measurement_unit
		End Get
		Set
			If (String.Equals(Me._depth_measurement_unit, value) = false) Then
				Me.Ondepth_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._depth_measurement_unit = value
				Me.SendPropertyChanged("depth_measurement_unit")
				Me.Ondepth_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hole_size_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property hole_size_measurement_unit() As String
		Get
			Return Me._hole_size_measurement_unit
		End Get
		Set
			If (String.Equals(Me._hole_size_measurement_unit, value) = false) Then
				Me.Onhole_size_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._hole_size_measurement_unit = value
				Me.SendPropertyChanged("hole_size_measurement_unit")
				Me.Onhole_size_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_density_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property density_measurement_unit() As String
		Get
			Return Me._density_measurement_unit
		End Get
		Set
			If (String.Equals(Me._density_measurement_unit, value) = false) Then
				Me.Ondensity_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._density_measurement_unit = value
				Me.SendPropertyChanged("density_measurement_unit")
				Me.Ondensity_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_temperature_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property temperature_measurement_unit() As String
		Get
			Return Me._temperature_measurement_unit
		End Get
		Set
			If (String.Equals(Me._temperature_measurement_unit, value) = false) Then
				Me.Ontemperature_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._temperature_measurement_unit = value
				Me.SendPropertyChanged("temperature_measurement_unit")
				Me.Ontemperature_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_weight_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property weight_measurement_unit() As String
		Get
			Return Me._weight_measurement_unit
		End Get
		Set
			If (String.Equals(Me._weight_measurement_unit, value) = false) Then
				Me.Onweight_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._weight_measurement_unit = value
				Me.SendPropertyChanged("weight_measurement_unit")
				Me.Onweight_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_concentration_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property concentration_measurement_unit() As String
		Get
			Return Me._concentration_measurement_unit
		End Get
		Set
			If (String.Equals(Me._concentration_measurement_unit, value) = false) Then
				Me.Onconcentration_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._concentration_measurement_unit = value
				Me.SendPropertyChanged("concentration_measurement_unit")
				Me.Onconcentration_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property currency_measurement_unit() As String
		Get
			Return Me._currency_measurement_unit
		End Get
		Set
			If (String.Equals(Me._currency_measurement_unit, value) = false) Then
				Me.Oncurrency_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._currency_measurement_unit = value
				Me.SendPropertyChanged("currency_measurement_unit")
				Me.Oncurrency_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_length_measurement_unit", DbType:="varchar(10)")>  _
	Public Property length_measurement_unit() As String
		Get
			Return Me._length_measurement_unit
		End Get
		Set
			If (String.Equals(Me._length_measurement_unit, value) = false) Then
				Me.Onlength_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._length_measurement_unit = value
				Me.SendPropertyChanged("length_measurement_unit")
				Me.Onlength_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distance_measurement_unit", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property distance_measurement_unit() As String
		Get
			Return Me._distance_measurement_unit
		End Get
		Set
			If (String.Equals(Me._distance_measurement_unit, value) = false) Then
				Me.Ondistance_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._distance_measurement_unit = value
				Me.SendPropertyChanged("distance_measurement_unit")
				Me.Ondistance_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tight_hole_user_access_level", CanBeNull:=false)>  _
	Public Property tight_hole_user_access_level() As String
		Get
			Return Me._tight_hole_user_access_level
		End Get
		Set
			If (String.Equals(Me._tight_hole_user_access_level, value) = false) Then
				Me.Ontight_hole_user_access_levelChanging(value)
				Me.SendPropertyChanging
				Me._tight_hole_user_access_level = value
				Me.SendPropertyChanged("tight_hole_user_access_level")
				Me.Ontight_hole_user_access_levelChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_well_data
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _kelly_bushing_depth As System.Nullable(Of Single)
	
	Private _rotary_table_depth As System.Nullable(Of Single)
	
	Private _drill_floor_depth As System.Nullable(Of Single)
	
	Private _rams_depth As System.Nullable(Of Single)
	
	Private _casing_head_depth As System.Nullable(Of Single)
	
	Private _ground_level_depth As System.Nullable(Of Single)
	
	Private _mean_sea_depth As System.Nullable(Of Single)
	
	Private _sea_floor_depth As System.Nullable(Of Single)
	
	Private _perm_datum As String
	
	Private _perm_datum_depth As System.Nullable(Of Single)
	
	Private _driller_zero As String
	
	Private _wireline_zero As String
	
	Private _wireline_zero_depth As System.Nullable(Of Single)
	
	Private _current_driller_depth As System.Nullable(Of Single)
	
	Private _driller_td As System.Nullable(Of Single)
	
	Private _wireline_td As System.Nullable(Of Single)
	
	Private _kop_start As System.Nullable(Of Single)
	
	Private _kop_30deg As System.Nullable(Of Single)
	
	Private _kop_60deg As System.Nullable(Of Single)
	
	Private _kop_90deg As System.Nullable(Of Single)
	
	Private _top_of_pbr As System.Nullable(Of Single)
	
	Private _marker_joint As System.Nullable(Of Single)
	
	Private _true_vertical_depth As System.Nullable(Of Single)
	
	Private _deviation As System.Nullable(Of Single)
	
	Private _dog_leg_severity As System.Nullable(Of Single)
	
	Private _h2s As System.Nullable(Of Single)
	
	Private _co2 As System.Nullable(Of Single)
	
	Private _surface_temp As System.Nullable(Of Single)
	
	Private _bht As System.Nullable(Of Single)
	
	Private _wellhead_pressure As System.Nullable(Of Single)
	
	Private _max_pressure As System.Nullable(Of Single)
	
	Private _run_number As System.Nullable(Of Byte)
	
	Private _distance_to_well As System.Nullable(Of Single)
	
	Private _max_overbalance_pressure As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onkelly_bushing_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onkelly_bushing_depthChanged()
    End Sub
    Partial Private Sub Onrotary_table_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onrotary_table_depthChanged()
    End Sub
    Partial Private Sub Ondrill_floor_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondrill_floor_depthChanged()
    End Sub
    Partial Private Sub Onrams_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onrams_depthChanged()
    End Sub
    Partial Private Sub Oncasing_head_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncasing_head_depthChanged()
    End Sub
    Partial Private Sub Onground_level_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onground_level_depthChanged()
    End Sub
    Partial Private Sub Onmean_sea_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmean_sea_depthChanged()
    End Sub
    Partial Private Sub Onsea_floor_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onsea_floor_depthChanged()
    End Sub
    Partial Private Sub Onperm_datumChanging(value As String)
    End Sub
    Partial Private Sub Onperm_datumChanged()
    End Sub
    Partial Private Sub Onperm_datum_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onperm_datum_depthChanged()
    End Sub
    Partial Private Sub Ondriller_zeroChanging(value As String)
    End Sub
    Partial Private Sub Ondriller_zeroChanged()
    End Sub
    Partial Private Sub Onwireline_zeroChanging(value As String)
    End Sub
    Partial Private Sub Onwireline_zeroChanged()
    End Sub
    Partial Private Sub Onwireline_zero_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwireline_zero_depthChanged()
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanged()
    End Sub
    Partial Private Sub Ondriller_tdChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondriller_tdChanged()
    End Sub
    Partial Private Sub Onwireline_tdChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwireline_tdChanged()
    End Sub
    Partial Private Sub Onkop_startChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onkop_startChanged()
    End Sub
    Partial Private Sub Onkop_30degChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onkop_30degChanged()
    End Sub
    Partial Private Sub Onkop_60degChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onkop_60degChanged()
    End Sub
    Partial Private Sub Onkop_90degChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onkop_90degChanged()
    End Sub
    Partial Private Sub Ontop_of_pbrChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontop_of_pbrChanged()
    End Sub
    Partial Private Sub Onmarker_jointChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmarker_jointChanged()
    End Sub
    Partial Private Sub Ontrue_vertical_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontrue_vertical_depthChanged()
    End Sub
    Partial Private Sub OndeviationChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OndeviationChanged()
    End Sub
    Partial Private Sub Ondog_leg_severityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondog_leg_severityChanged()
    End Sub
    Partial Private Sub Onh2sChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onh2sChanged()
    End Sub
    Partial Private Sub Onco2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onco2Changed()
    End Sub
    Partial Private Sub Onsurface_tempChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onsurface_tempChanged()
    End Sub
    Partial Private Sub OnbhtChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnbhtChanged()
    End Sub
    Partial Private Sub Onwellhead_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwellhead_pressureChanged()
    End Sub
    Partial Private Sub Onmax_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_pressureChanged()
    End Sub
    Partial Private Sub Onrun_numberChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Onrun_numberChanged()
    End Sub
    Partial Private Sub Ondistance_to_wellChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ondistance_to_wellChanged()
    End Sub
    Partial Private Sub Onmax_overbalance_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_overbalance_pressureChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kelly_bushing_depth", DbType:="real")>  _
	Public Property kelly_bushing_depth() As System.Nullable(Of Single)
		Get
			Return Me._kelly_bushing_depth
		End Get
		Set
			If (Me._kelly_bushing_depth.Equals(value) = false) Then
				Me.Onkelly_bushing_depthChanging(value)
				Me.SendPropertyChanging
				Me._kelly_bushing_depth = value
				Me.SendPropertyChanged("kelly_bushing_depth")
				Me.Onkelly_bushing_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rotary_table_depth", DbType:="real")>  _
	Public Property rotary_table_depth() As System.Nullable(Of Single)
		Get
			Return Me._rotary_table_depth
		End Get
		Set
			If (Me._rotary_table_depth.Equals(value) = false) Then
				Me.Onrotary_table_depthChanging(value)
				Me.SendPropertyChanging
				Me._rotary_table_depth = value
				Me.SendPropertyChanged("rotary_table_depth")
				Me.Onrotary_table_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_drill_floor_depth", DbType:="real")>  _
	Public Property drill_floor_depth() As System.Nullable(Of Single)
		Get
			Return Me._drill_floor_depth
		End Get
		Set
			If (Me._drill_floor_depth.Equals(value) = false) Then
				Me.Ondrill_floor_depthChanging(value)
				Me.SendPropertyChanging
				Me._drill_floor_depth = value
				Me.SendPropertyChanged("drill_floor_depth")
				Me.Ondrill_floor_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rams_depth", DbType:="real")>  _
	Public Property rams_depth() As System.Nullable(Of Single)
		Get
			Return Me._rams_depth
		End Get
		Set
			If (Me._rams_depth.Equals(value) = false) Then
				Me.Onrams_depthChanging(value)
				Me.SendPropertyChanging
				Me._rams_depth = value
				Me.SendPropertyChanged("rams_depth")
				Me.Onrams_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_casing_head_depth", DbType:="real")>  _
	Public Property casing_head_depth() As System.Nullable(Of Single)
		Get
			Return Me._casing_head_depth
		End Get
		Set
			If (Me._casing_head_depth.Equals(value) = false) Then
				Me.Oncasing_head_depthChanging(value)
				Me.SendPropertyChanging
				Me._casing_head_depth = value
				Me.SendPropertyChanged("casing_head_depth")
				Me.Oncasing_head_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ground_level_depth", DbType:="real")>  _
	Public Property ground_level_depth() As System.Nullable(Of Single)
		Get
			Return Me._ground_level_depth
		End Get
		Set
			If (Me._ground_level_depth.Equals(value) = false) Then
				Me.Onground_level_depthChanging(value)
				Me.SendPropertyChanging
				Me._ground_level_depth = value
				Me.SendPropertyChanged("ground_level_depth")
				Me.Onground_level_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mean_sea_depth", DbType:="real")>  _
	Public Property mean_sea_depth() As System.Nullable(Of Single)
		Get
			Return Me._mean_sea_depth
		End Get
		Set
			If (Me._mean_sea_depth.Equals(value) = false) Then
				Me.Onmean_sea_depthChanging(value)
				Me.SendPropertyChanging
				Me._mean_sea_depth = value
				Me.SendPropertyChanged("mean_sea_depth")
				Me.Onmean_sea_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sea_floor_depth", DbType:="real")>  _
	Public Property sea_floor_depth() As System.Nullable(Of Single)
		Get
			Return Me._sea_floor_depth
		End Get
		Set
			If (Me._sea_floor_depth.Equals(value) = false) Then
				Me.Onsea_floor_depthChanging(value)
				Me.SendPropertyChanging
				Me._sea_floor_depth = value
				Me.SendPropertyChanged("sea_floor_depth")
				Me.Onsea_floor_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perm_datum", DbType:="VarChar(50)")>  _
	Public Property perm_datum() As String
		Get
			Return Me._perm_datum
		End Get
		Set
			If (String.Equals(Me._perm_datum, value) = false) Then
				Me.Onperm_datumChanging(value)
				Me.SendPropertyChanging
				Me._perm_datum = value
				Me.SendPropertyChanged("perm_datum")
				Me.Onperm_datumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perm_datum_depth", DbType:="real")>  _
	Public Property perm_datum_depth() As System.Nullable(Of Single)
		Get
			Return Me._perm_datum_depth
		End Get
		Set
			If (Me._perm_datum_depth.Equals(value) = false) Then
				Me.Onperm_datum_depthChanging(value)
				Me.SendPropertyChanging
				Me._perm_datum_depth = value
				Me.SendPropertyChanged("perm_datum_depth")
				Me.Onperm_datum_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_driller_zero", DbType:="VarChar(50)")>  _
	Public Property driller_zero() As String
		Get
			Return Me._driller_zero
		End Get
		Set
			If (String.Equals(Me._driller_zero, value) = false) Then
				Me.Ondriller_zeroChanging(value)
				Me.SendPropertyChanging
				Me._driller_zero = value
				Me.SendPropertyChanged("driller_zero")
				Me.Ondriller_zeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_zero", DbType:="VarChar(50)")>  _
	Public Property wireline_zero() As String
		Get
			Return Me._wireline_zero
		End Get
		Set
			If (String.Equals(Me._wireline_zero, value) = false) Then
				Me.Onwireline_zeroChanging(value)
				Me.SendPropertyChanging
				Me._wireline_zero = value
				Me.SendPropertyChanged("wireline_zero")
				Me.Onwireline_zeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_zero_depth", DbType:="real")>  _
	Public Property wireline_zero_depth() As System.Nullable(Of Single)
		Get
			Return Me._wireline_zero_depth
		End Get
		Set
			If (Me._wireline_zero_depth.Equals(value) = false) Then
				Me.Onwireline_zero_depthChanging(value)
				Me.SendPropertyChanging
				Me._wireline_zero_depth = value
				Me.SendPropertyChanged("wireline_zero_depth")
				Me.Onwireline_zero_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_driller_depth", DbType:="real")>  _
	Public Property current_driller_depth() As System.Nullable(Of Single)
		Get
			Return Me._current_driller_depth
		End Get
		Set
			If (Me._current_driller_depth.Equals(value) = false) Then
				Me.Oncurrent_driller_depthChanging(value)
				Me.SendPropertyChanging
				Me._current_driller_depth = value
				Me.SendPropertyChanged("current_driller_depth")
				Me.Oncurrent_driller_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_driller_td", DbType:="real")>  _
	Public Property driller_td() As System.Nullable(Of Single)
		Get
			Return Me._driller_td
		End Get
		Set
			If (Me._driller_td.Equals(value) = false) Then
				Me.Ondriller_tdChanging(value)
				Me.SendPropertyChanging
				Me._driller_td = value
				Me.SendPropertyChanged("driller_td")
				Me.Ondriller_tdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wireline_td", DbType:="real")>  _
	Public Property wireline_td() As System.Nullable(Of Single)
		Get
			Return Me._wireline_td
		End Get
		Set
			If (Me._wireline_td.Equals(value) = false) Then
				Me.Onwireline_tdChanging(value)
				Me.SendPropertyChanging
				Me._wireline_td = value
				Me.SendPropertyChanged("wireline_td")
				Me.Onwireline_tdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kop_start", DbType:="real")>  _
	Public Property kop_start() As System.Nullable(Of Single)
		Get
			Return Me._kop_start
		End Get
		Set
			If (Me._kop_start.Equals(value) = false) Then
				Me.Onkop_startChanging(value)
				Me.SendPropertyChanging
				Me._kop_start = value
				Me.SendPropertyChanged("kop_start")
				Me.Onkop_startChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kop_30deg", DbType:="real")>  _
	Public Property kop_30deg() As System.Nullable(Of Single)
		Get
			Return Me._kop_30deg
		End Get
		Set
			If (Me._kop_30deg.Equals(value) = false) Then
				Me.Onkop_30degChanging(value)
				Me.SendPropertyChanging
				Me._kop_30deg = value
				Me.SendPropertyChanged("kop_30deg")
				Me.Onkop_30degChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kop_60deg", DbType:="real")>  _
	Public Property kop_60deg() As System.Nullable(Of Single)
		Get
			Return Me._kop_60deg
		End Get
		Set
			If (Me._kop_60deg.Equals(value) = false) Then
				Me.Onkop_60degChanging(value)
				Me.SendPropertyChanging
				Me._kop_60deg = value
				Me.SendPropertyChanged("kop_60deg")
				Me.Onkop_60degChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kop_90deg", DbType:="real")>  _
	Public Property kop_90deg() As System.Nullable(Of Single)
		Get
			Return Me._kop_90deg
		End Get
		Set
			If (Me._kop_90deg.Equals(value) = false) Then
				Me.Onkop_90degChanging(value)
				Me.SendPropertyChanging
				Me._kop_90deg = value
				Me.SendPropertyChanged("kop_90deg")
				Me.Onkop_90degChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_top_of_pbr", DbType:="real")>  _
	Public Property top_of_pbr() As System.Nullable(Of Single)
		Get
			Return Me._top_of_pbr
		End Get
		Set
			If (Me._top_of_pbr.Equals(value) = false) Then
				Me.Ontop_of_pbrChanging(value)
				Me.SendPropertyChanging
				Me._top_of_pbr = value
				Me.SendPropertyChanged("top_of_pbr")
				Me.Ontop_of_pbrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marker_joint", DbType:="real")>  _
	Public Property marker_joint() As System.Nullable(Of Single)
		Get
			Return Me._marker_joint
		End Get
		Set
			If (Me._marker_joint.Equals(value) = false) Then
				Me.Onmarker_jointChanging(value)
				Me.SendPropertyChanging
				Me._marker_joint = value
				Me.SendPropertyChanged("marker_joint")
				Me.Onmarker_jointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_true_vertical_depth", DbType:="real")>  _
	Public Property true_vertical_depth() As System.Nullable(Of Single)
		Get
			Return Me._true_vertical_depth
		End Get
		Set
			If (Me._true_vertical_depth.Equals(value) = false) Then
				Me.Ontrue_vertical_depthChanging(value)
				Me.SendPropertyChanging
				Me._true_vertical_depth = value
				Me.SendPropertyChanged("true_vertical_depth")
				Me.Ontrue_vertical_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_deviation", DbType:="Real")>  _
	Public Property deviation() As System.Nullable(Of Single)
		Get
			Return Me._deviation
		End Get
		Set
			If (Me._deviation.Equals(value) = false) Then
				Me.OndeviationChanging(value)
				Me.SendPropertyChanging
				Me._deviation = value
				Me.SendPropertyChanged("deviation")
				Me.OndeviationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dog_leg_severity", DbType:="real")>  _
	Public Property dog_leg_severity() As System.Nullable(Of Single)
		Get
			Return Me._dog_leg_severity
		End Get
		Set
			If (Me._dog_leg_severity.Equals(value) = false) Then
				Me.Ondog_leg_severityChanging(value)
				Me.SendPropertyChanging
				Me._dog_leg_severity = value
				Me.SendPropertyChanged("dog_leg_severity")
				Me.Ondog_leg_severityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_h2s", DbType:="Real")>  _
	Public Property h2s() As System.Nullable(Of Single)
		Get
			Return Me._h2s
		End Get
		Set
			If (Me._h2s.Equals(value) = false) Then
				Me.Onh2sChanging(value)
				Me.SendPropertyChanging
				Me._h2s = value
				Me.SendPropertyChanged("h2s")
				Me.Onh2sChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_co2", DbType:="Real")>  _
	Public Property co2() As System.Nullable(Of Single)
		Get
			Return Me._co2
		End Get
		Set
			If (Me._co2.Equals(value) = false) Then
				Me.Onco2Changing(value)
				Me.SendPropertyChanging
				Me._co2 = value
				Me.SendPropertyChanged("co2")
				Me.Onco2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_surface_temp", DbType:="Real")>  _
	Public Property surface_temp() As System.Nullable(Of Single)
		Get
			Return Me._surface_temp
		End Get
		Set
			If (Me._surface_temp.Equals(value) = false) Then
				Me.Onsurface_tempChanging(value)
				Me.SendPropertyChanging
				Me._surface_temp = value
				Me.SendPropertyChanged("surface_temp")
				Me.Onsurface_tempChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bht", DbType:="Real")>  _
	Public Property bht() As System.Nullable(Of Single)
		Get
			Return Me._bht
		End Get
		Set
			If (Me._bht.Equals(value) = false) Then
				Me.OnbhtChanging(value)
				Me.SendPropertyChanging
				Me._bht = value
				Me.SendPropertyChanged("bht")
				Me.OnbhtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wellhead_pressure", DbType:="real")>  _
	Public Property wellhead_pressure() As System.Nullable(Of Single)
		Get
			Return Me._wellhead_pressure
		End Get
		Set
			If (Me._wellhead_pressure.Equals(value) = false) Then
				Me.Onwellhead_pressureChanging(value)
				Me.SendPropertyChanging
				Me._wellhead_pressure = value
				Me.SendPropertyChanged("wellhead_pressure")
				Me.Onwellhead_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_pressure", DbType:="Real")>  _
	Public Property max_pressure() As System.Nullable(Of Single)
		Get
			Return Me._max_pressure
		End Get
		Set
			If (Me._max_pressure.Equals(value) = false) Then
				Me.Onmax_pressureChanging(value)
				Me.SendPropertyChanging
				Me._max_pressure = value
				Me.SendPropertyChanged("max_pressure")
				Me.Onmax_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_number", DbType:="TinyInt")>  _
	Public Property run_number() As System.Nullable(Of Byte)
		Get
			Return Me._run_number
		End Get
		Set
			If (Me._run_number.Equals(value) = false) Then
				Me.Onrun_numberChanging(value)
				Me.SendPropertyChanging
				Me._run_number = value
				Me.SendPropertyChanged("run_number")
				Me.Onrun_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distance_to_well", DbType:="real")>  _
	Public Property distance_to_well() As System.Nullable(Of Single)
		Get
			Return Me._distance_to_well
		End Get
		Set
			If (Me._distance_to_well.Equals(value) = false) Then
				Me.Ondistance_to_wellChanging(value)
				Me.SendPropertyChanging
				Me._distance_to_well = value
				Me.SendPropertyChanged("distance_to_well")
				Me.Ondistance_to_wellChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_overbalance_pressure", DbType:="real")>  _
	Public Property max_overbalance_pressure() As System.Nullable(Of Single)
		Get
			Return Me._max_overbalance_pressure
		End Get
		Set
			If (Me._max_overbalance_pressure.Equals(value) = false) Then
				Me.Onmax_overbalance_pressureChanging(value)
				Me.SendPropertyChanging
				Me._max_overbalance_pressure = value
				Me.SendPropertyChanged("max_overbalance_pressure")
				Me.Onmax_overbalance_pressureChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_fluid
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _fluid_type As String
	
	Private _fluid_source As String
	
	Private _fluid_info_source As String
	
	Private _fluid_last_circulation_datetime As System.Nullable(Of Date)
	
	Private _fluid_weight As System.Nullable(Of Single)
	
	Private _fluid_specific_gravity As System.Nullable(Of Single)
	
	Private _fluid_level As String
	
	Private _fluid_filt_cake As System.Nullable(Of Single)
	
	Private _fluid_loss As System.Nullable(Of Single)
	
	Private _fluid_chlorides As System.Nullable(Of Integer)
	
	Private _fluid_calcium As System.Nullable(Of Single)
	
	Private _fluid_rm As System.Nullable(Of Single)
	
	Private _fluid_rm_at As System.Nullable(Of Integer)
	
	Private _fluid_rmf As System.Nullable(Of Single)
	
	Private _fluid_rmf_at As System.Nullable(Of Integer)
	
	Private _fluid_rmc As System.Nullable(Of Single)
	
	Private _fluid_rmc_at As System.Nullable(Of Integer)
	
	Private _fluid_rmbt As System.Nullable(Of Single)
	
	Private _fluid_rmbt_at As System.Nullable(Of Integer)
	
	Private _fluid_ph As System.Nullable(Of Single)
	
	Private _fluid_h2s As System.Nullable(Of Single)
	
	Private _fluid_co2 As System.Nullable(Of Single)
	
	Private _fluid_viscosity As System.Nullable(Of Single)
	
	Private _fluid_gels_s As System.Nullable(Of Single)
	
	Private _fluid_gels_m As System.Nullable(Of Single)
	
	Private _fluid_pv As System.Nullable(Of Single)
	
	Private _fluid_vp As System.Nullable(Of Single)
	
	Private _fluid_h2o_percent_1 As System.Nullable(Of Single)
	
	Private _fluid_h2o_percent_2 As System.Nullable(Of Single)
	
	Private _fluid_sand As System.Nullable(Of Single)
	
	Private _fluid_solids As System.Nullable(Of Single)
	
	Private _fluid_sec_lc_material As String
	
	Private _fluid_rugosity As System.Nullable(Of Single)
	
	Private _fluid_washouts As String
	
	Private _fluid_ovalness As String
	
	Private _fluid_corrections As String
	
	Private _fluid_mud_loss As System.Nullable(Of Single)
	
	Private _fluid_barites As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onfluid_typeChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_typeChanged()
    End Sub
    Partial Private Sub Onfluid_sourceChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_sourceChanged()
    End Sub
    Partial Private Sub Onfluid_info_sourceChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_info_sourceChanged()
    End Sub
    Partial Private Sub Onfluid_last_circulation_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfluid_last_circulation_datetimeChanged()
    End Sub
    Partial Private Sub Onfluid_weightChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_weightChanged()
    End Sub
    Partial Private Sub Onfluid_specific_gravityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_specific_gravityChanged()
    End Sub
    Partial Private Sub Onfluid_levelChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_levelChanged()
    End Sub
    Partial Private Sub Onfluid_filt_cakeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_filt_cakeChanged()
    End Sub
    Partial Private Sub Onfluid_lossChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_lossChanged()
    End Sub
    Partial Private Sub Onfluid_chloridesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_chloridesChanged()
    End Sub
    Partial Private Sub Onfluid_calciumChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_calciumChanged()
    End Sub
    Partial Private Sub Onfluid_rmChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmChanged()
    End Sub
    Partial Private Sub Onfluid_rm_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rm_atChanged()
    End Sub
    Partial Private Sub Onfluid_rmfChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmfChanged()
    End Sub
    Partial Private Sub Onfluid_rmf_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rmf_atChanged()
    End Sub
    Partial Private Sub Onfluid_rmcChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmcChanged()
    End Sub
    Partial Private Sub Onfluid_rmc_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rmc_atChanged()
    End Sub
    Partial Private Sub Onfluid_rmbtChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rmbtChanged()
    End Sub
    Partial Private Sub Onfluid_rmbt_atChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onfluid_rmbt_atChanged()
    End Sub
    Partial Private Sub Onfluid_phChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_phChanged()
    End Sub
    Partial Private Sub Onfluid_h2sChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_h2sChanged()
    End Sub
    Partial Private Sub Onfluid_co2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_co2Changed()
    End Sub
    Partial Private Sub Onfluid_viscosityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_viscosityChanged()
    End Sub
    Partial Private Sub Onfluid_gels_sChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_gels_sChanged()
    End Sub
    Partial Private Sub Onfluid_gels_mChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_gels_mChanged()
    End Sub
    Partial Private Sub Onfluid_pvChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_pvChanged()
    End Sub
    Partial Private Sub Onfluid_vpChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_vpChanged()
    End Sub
    Partial Private Sub Onfluid_h2o_percent_1Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_h2o_percent_1Changed()
    End Sub
    Partial Private Sub Onfluid_h2o_percent_2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_h2o_percent_2Changed()
    End Sub
    Partial Private Sub Onfluid_sandChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_sandChanged()
    End Sub
    Partial Private Sub Onfluid_solidsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_solidsChanged()
    End Sub
    Partial Private Sub Onfluid_sec_lc_materialChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_sec_lc_materialChanged()
    End Sub
    Partial Private Sub Onfluid_rugosityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_rugosityChanged()
    End Sub
    Partial Private Sub Onfluid_washoutsChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_washoutsChanged()
    End Sub
    Partial Private Sub Onfluid_ovalnessChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_ovalnessChanged()
    End Sub
    Partial Private Sub Onfluid_correctionsChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_correctionsChanged()
    End Sub
    Partial Private Sub Onfluid_mud_lossChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_mud_lossChanged()
    End Sub
    Partial Private Sub Onfluid_baritesChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_baritesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_type", DbType:="VarChar(50)")>  _
	Public Property fluid_type() As String
		Get
			Return Me._fluid_type
		End Get
		Set
			If (String.Equals(Me._fluid_type, value) = false) Then
				Me.Onfluid_typeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_type = value
				Me.SendPropertyChanged("fluid_type")
				Me.Onfluid_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_source", DbType:="VarChar(50)")>  _
	Public Property fluid_source() As String
		Get
			Return Me._fluid_source
		End Get
		Set
			If (String.Equals(Me._fluid_source, value) = false) Then
				Me.Onfluid_sourceChanging(value)
				Me.SendPropertyChanging
				Me._fluid_source = value
				Me.SendPropertyChanged("fluid_source")
				Me.Onfluid_sourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_info_source", DbType:="VarChar(50)")>  _
	Public Property fluid_info_source() As String
		Get
			Return Me._fluid_info_source
		End Get
		Set
			If (String.Equals(Me._fluid_info_source, value) = false) Then
				Me.Onfluid_info_sourceChanging(value)
				Me.SendPropertyChanging
				Me._fluid_info_source = value
				Me.SendPropertyChanged("fluid_info_source")
				Me.Onfluid_info_sourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_last_circulation_datetime", DbType:="SmallDateTime")>  _
	Public Property fluid_last_circulation_datetime() As System.Nullable(Of Date)
		Get
			Return Me._fluid_last_circulation_datetime
		End Get
		Set
			If (Me._fluid_last_circulation_datetime.Equals(value) = false) Then
				Me.Onfluid_last_circulation_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_last_circulation_datetime = value
				Me.SendPropertyChanged("fluid_last_circulation_datetime")
				Me.Onfluid_last_circulation_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_weight", DbType:="Real")>  _
	Public Property fluid_weight() As System.Nullable(Of Single)
		Get
			Return Me._fluid_weight
		End Get
		Set
			If (Me._fluid_weight.Equals(value) = false) Then
				Me.Onfluid_weightChanging(value)
				Me.SendPropertyChanging
				Me._fluid_weight = value
				Me.SendPropertyChanged("fluid_weight")
				Me.Onfluid_weightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_specific_gravity", DbType:="Real")>  _
	Public Property fluid_specific_gravity() As System.Nullable(Of Single)
		Get
			Return Me._fluid_specific_gravity
		End Get
		Set
			If (Me._fluid_specific_gravity.Equals(value) = false) Then
				Me.Onfluid_specific_gravityChanging(value)
				Me.SendPropertyChanging
				Me._fluid_specific_gravity = value
				Me.SendPropertyChanged("fluid_specific_gravity")
				Me.Onfluid_specific_gravityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_level", DbType:="varchar(5)")>  _
	Public Property fluid_level() As String
		Get
			Return Me._fluid_level
		End Get
		Set
			If (String.Equals(Me._fluid_level, value) = false) Then
				Me.Onfluid_levelChanging(value)
				Me.SendPropertyChanging
				Me._fluid_level = value
				Me.SendPropertyChanged("fluid_level")
				Me.Onfluid_levelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_filt_cake", DbType:="Real")>  _
	Public Property fluid_filt_cake() As System.Nullable(Of Single)
		Get
			Return Me._fluid_filt_cake
		End Get
		Set
			If (Me._fluid_filt_cake.Equals(value) = false) Then
				Me.Onfluid_filt_cakeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_filt_cake = value
				Me.SendPropertyChanged("fluid_filt_cake")
				Me.Onfluid_filt_cakeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_loss", DbType:="Real")>  _
	Public Property fluid_loss() As System.Nullable(Of Single)
		Get
			Return Me._fluid_loss
		End Get
		Set
			If (Me._fluid_loss.Equals(value) = false) Then
				Me.Onfluid_lossChanging(value)
				Me.SendPropertyChanging
				Me._fluid_loss = value
				Me.SendPropertyChanged("fluid_loss")
				Me.Onfluid_lossChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_chlorides", DbType:="Int")>  _
	Public Property fluid_chlorides() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_chlorides
		End Get
		Set
			If (Me._fluid_chlorides.Equals(value) = false) Then
				Me.Onfluid_chloridesChanging(value)
				Me.SendPropertyChanging
				Me._fluid_chlorides = value
				Me.SendPropertyChanged("fluid_chlorides")
				Me.Onfluid_chloridesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_calcium", DbType:="Real")>  _
	Public Property fluid_calcium() As System.Nullable(Of Single)
		Get
			Return Me._fluid_calcium
		End Get
		Set
			If (Me._fluid_calcium.Equals(value) = false) Then
				Me.Onfluid_calciumChanging(value)
				Me.SendPropertyChanging
				Me._fluid_calcium = value
				Me.SendPropertyChanged("fluid_calcium")
				Me.Onfluid_calciumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rm", DbType:="Real")>  _
	Public Property fluid_rm() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rm
		End Get
		Set
			If (Me._fluid_rm.Equals(value) = false) Then
				Me.Onfluid_rmChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rm = value
				Me.SendPropertyChanged("fluid_rm")
				Me.Onfluid_rmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rm_at", DbType:="Int")>  _
	Public Property fluid_rm_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rm_at
		End Get
		Set
			If (Me._fluid_rm_at.Equals(value) = false) Then
				Me.Onfluid_rm_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rm_at = value
				Me.SendPropertyChanged("fluid_rm_at")
				Me.Onfluid_rm_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmf", DbType:="Real")>  _
	Public Property fluid_rmf() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rmf
		End Get
		Set
			If (Me._fluid_rmf.Equals(value) = false) Then
				Me.Onfluid_rmfChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmf = value
				Me.SendPropertyChanged("fluid_rmf")
				Me.Onfluid_rmfChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmf_at", DbType:="Int")>  _
	Public Property fluid_rmf_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rmf_at
		End Get
		Set
			If (Me._fluid_rmf_at.Equals(value) = false) Then
				Me.Onfluid_rmf_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmf_at = value
				Me.SendPropertyChanged("fluid_rmf_at")
				Me.Onfluid_rmf_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmc", DbType:="Real")>  _
	Public Property fluid_rmc() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rmc
		End Get
		Set
			If (Me._fluid_rmc.Equals(value) = false) Then
				Me.Onfluid_rmcChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmc = value
				Me.SendPropertyChanged("fluid_rmc")
				Me.Onfluid_rmcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmc_at", DbType:="Int")>  _
	Public Property fluid_rmc_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rmc_at
		End Get
		Set
			If (Me._fluid_rmc_at.Equals(value) = false) Then
				Me.Onfluid_rmc_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmc_at = value
				Me.SendPropertyChanged("fluid_rmc_at")
				Me.Onfluid_rmc_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmbt", DbType:="Real")>  _
	Public Property fluid_rmbt() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rmbt
		End Get
		Set
			If (Me._fluid_rmbt.Equals(value) = false) Then
				Me.Onfluid_rmbtChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmbt = value
				Me.SendPropertyChanged("fluid_rmbt")
				Me.Onfluid_rmbtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rmbt_at", DbType:="Int")>  _
	Public Property fluid_rmbt_at() As System.Nullable(Of Integer)
		Get
			Return Me._fluid_rmbt_at
		End Get
		Set
			If (Me._fluid_rmbt_at.Equals(value) = false) Then
				Me.Onfluid_rmbt_atChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rmbt_at = value
				Me.SendPropertyChanged("fluid_rmbt_at")
				Me.Onfluid_rmbt_atChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_ph", DbType:="Real")>  _
	Public Property fluid_ph() As System.Nullable(Of Single)
		Get
			Return Me._fluid_ph
		End Get
		Set
			If (Me._fluid_ph.Equals(value) = false) Then
				Me.Onfluid_phChanging(value)
				Me.SendPropertyChanging
				Me._fluid_ph = value
				Me.SendPropertyChanged("fluid_ph")
				Me.Onfluid_phChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_h2s", DbType:="Real")>  _
	Public Property fluid_h2s() As System.Nullable(Of Single)
		Get
			Return Me._fluid_h2s
		End Get
		Set
			If (Me._fluid_h2s.Equals(value) = false) Then
				Me.Onfluid_h2sChanging(value)
				Me.SendPropertyChanging
				Me._fluid_h2s = value
				Me.SendPropertyChanged("fluid_h2s")
				Me.Onfluid_h2sChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_co2", DbType:="Real")>  _
	Public Property fluid_co2() As System.Nullable(Of Single)
		Get
			Return Me._fluid_co2
		End Get
		Set
			If (Me._fluid_co2.Equals(value) = false) Then
				Me.Onfluid_co2Changing(value)
				Me.SendPropertyChanging
				Me._fluid_co2 = value
				Me.SendPropertyChanged("fluid_co2")
				Me.Onfluid_co2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_viscosity", DbType:="Real")>  _
	Public Property fluid_viscosity() As System.Nullable(Of Single)
		Get
			Return Me._fluid_viscosity
		End Get
		Set
			If (Me._fluid_viscosity.Equals(value) = false) Then
				Me.Onfluid_viscosityChanging(value)
				Me.SendPropertyChanging
				Me._fluid_viscosity = value
				Me.SendPropertyChanged("fluid_viscosity")
				Me.Onfluid_viscosityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_gels_s", DbType:="Real")>  _
	Public Property fluid_gels_s() As System.Nullable(Of Single)
		Get
			Return Me._fluid_gels_s
		End Get
		Set
			If (Me._fluid_gels_s.Equals(value) = false) Then
				Me.Onfluid_gels_sChanging(value)
				Me.SendPropertyChanging
				Me._fluid_gels_s = value
				Me.SendPropertyChanged("fluid_gels_s")
				Me.Onfluid_gels_sChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_gels_m", DbType:="Real")>  _
	Public Property fluid_gels_m() As System.Nullable(Of Single)
		Get
			Return Me._fluid_gels_m
		End Get
		Set
			If (Me._fluid_gels_m.Equals(value) = false) Then
				Me.Onfluid_gels_mChanging(value)
				Me.SendPropertyChanging
				Me._fluid_gels_m = value
				Me.SendPropertyChanged("fluid_gels_m")
				Me.Onfluid_gels_mChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_pv", DbType:="Real")>  _
	Public Property fluid_pv() As System.Nullable(Of Single)
		Get
			Return Me._fluid_pv
		End Get
		Set
			If (Me._fluid_pv.Equals(value) = false) Then
				Me.Onfluid_pvChanging(value)
				Me.SendPropertyChanging
				Me._fluid_pv = value
				Me.SendPropertyChanged("fluid_pv")
				Me.Onfluid_pvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_vp", DbType:="Real")>  _
	Public Property fluid_vp() As System.Nullable(Of Single)
		Get
			Return Me._fluid_vp
		End Get
		Set
			If (Me._fluid_vp.Equals(value) = false) Then
				Me.Onfluid_vpChanging(value)
				Me.SendPropertyChanging
				Me._fluid_vp = value
				Me.SendPropertyChanged("fluid_vp")
				Me.Onfluid_vpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_h2o_percent_1", DbType:="Real")>  _
	Public Property fluid_h2o_percent_1() As System.Nullable(Of Single)
		Get
			Return Me._fluid_h2o_percent_1
		End Get
		Set
			If (Me._fluid_h2o_percent_1.Equals(value) = false) Then
				Me.Onfluid_h2o_percent_1Changing(value)
				Me.SendPropertyChanging
				Me._fluid_h2o_percent_1 = value
				Me.SendPropertyChanged("fluid_h2o_percent_1")
				Me.Onfluid_h2o_percent_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_h2o_percent_2", DbType:="Real")>  _
	Public Property fluid_h2o_percent_2() As System.Nullable(Of Single)
		Get
			Return Me._fluid_h2o_percent_2
		End Get
		Set
			If (Me._fluid_h2o_percent_2.Equals(value) = false) Then
				Me.Onfluid_h2o_percent_2Changing(value)
				Me.SendPropertyChanging
				Me._fluid_h2o_percent_2 = value
				Me.SendPropertyChanged("fluid_h2o_percent_2")
				Me.Onfluid_h2o_percent_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_sand", DbType:="Real")>  _
	Public Property fluid_sand() As System.Nullable(Of Single)
		Get
			Return Me._fluid_sand
		End Get
		Set
			If (Me._fluid_sand.Equals(value) = false) Then
				Me.Onfluid_sandChanging(value)
				Me.SendPropertyChanging
				Me._fluid_sand = value
				Me.SendPropertyChanged("fluid_sand")
				Me.Onfluid_sandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_solids", DbType:="Real")>  _
	Public Property fluid_solids() As System.Nullable(Of Single)
		Get
			Return Me._fluid_solids
		End Get
		Set
			If (Me._fluid_solids.Equals(value) = false) Then
				Me.Onfluid_solidsChanging(value)
				Me.SendPropertyChanging
				Me._fluid_solids = value
				Me.SendPropertyChanged("fluid_solids")
				Me.Onfluid_solidsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_sec_lc_material", DbType:="varchar(50)")>  _
	Public Property fluid_sec_lc_material() As String
		Get
			Return Me._fluid_sec_lc_material
		End Get
		Set
			If (String.Equals(Me._fluid_sec_lc_material, value) = false) Then
				Me.Onfluid_sec_lc_materialChanging(value)
				Me.SendPropertyChanging
				Me._fluid_sec_lc_material = value
				Me.SendPropertyChanged("fluid_sec_lc_material")
				Me.Onfluid_sec_lc_materialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_rugosity", DbType:="Real")>  _
	Public Property fluid_rugosity() As System.Nullable(Of Single)
		Get
			Return Me._fluid_rugosity
		End Get
		Set
			If (Me._fluid_rugosity.Equals(value) = false) Then
				Me.Onfluid_rugosityChanging(value)
				Me.SendPropertyChanging
				Me._fluid_rugosity = value
				Me.SendPropertyChanged("fluid_rugosity")
				Me.Onfluid_rugosityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_washouts", DbType:="VarChar(10)")>  _
	Public Property fluid_washouts() As String
		Get
			Return Me._fluid_washouts
		End Get
		Set
			If (String.Equals(Me._fluid_washouts, value) = false) Then
				Me.Onfluid_washoutsChanging(value)
				Me.SendPropertyChanging
				Me._fluid_washouts = value
				Me.SendPropertyChanged("fluid_washouts")
				Me.Onfluid_washoutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_ovalness", DbType:="VarChar(10)")>  _
	Public Property fluid_ovalness() As String
		Get
			Return Me._fluid_ovalness
		End Get
		Set
			If (String.Equals(Me._fluid_ovalness, value) = false) Then
				Me.Onfluid_ovalnessChanging(value)
				Me.SendPropertyChanging
				Me._fluid_ovalness = value
				Me.SendPropertyChanged("fluid_ovalness")
				Me.Onfluid_ovalnessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_corrections", DbType:="VarChar(10)")>  _
	Public Property fluid_corrections() As String
		Get
			Return Me._fluid_corrections
		End Get
		Set
			If (String.Equals(Me._fluid_corrections, value) = false) Then
				Me.Onfluid_correctionsChanging(value)
				Me.SendPropertyChanging
				Me._fluid_corrections = value
				Me.SendPropertyChanged("fluid_corrections")
				Me.Onfluid_correctionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_mud_loss", DbType:="Real")>  _
	Public Property fluid_mud_loss() As System.Nullable(Of Single)
		Get
			Return Me._fluid_mud_loss
		End Get
		Set
			If (Me._fluid_mud_loss.Equals(value) = false) Then
				Me.Onfluid_mud_lossChanging(value)
				Me.SendPropertyChanging
				Me._fluid_mud_loss = value
				Me.SendPropertyChanged("fluid_mud_loss")
				Me.Onfluid_mud_lossChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_barites", DbType:="Real")>  _
	Public Property fluid_barites() As System.Nullable(Of Single)
		Get
			Return Me._fluid_barites
		End Get
		Set
			If (Me._fluid_barites.Equals(value) = false) Then
				Me.Onfluid_baritesChanging(value)
				Me.SendPropertyChanging
				Me._fluid_barites = value
				Me.SendPropertyChanged("fluid_barites")
				Me.Onfluid_baritesChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_time_management
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _equipment_left_datetime As System.Nullable(Of Date)
	
	Private _equipment_on_loc_datetime As System.Nullable(Of Date)
	
	Private _equipment_left_loc_datetime As System.Nullable(Of Date)
	
	Private _equipment_returned_datetime As System.Nullable(Of Date)
	
	Private _crew_left_datetime As System.Nullable(Of Date)
	
	Private _crew_on_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_started_job_datetime As System.Nullable(Of Date)
	
	Private _crew_finished_job_datetime As System.Nullable(Of Date)
	
	Private _crew_left_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_returned_datetime As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onequipment_left_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_left_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_on_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_on_loc_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_left_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_left_loc_datetimeChanged()
    End Sub
    Partial Private Sub Onequipment_returned_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onequipment_returned_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_left_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_left_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_on_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_on_loc_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_started_job_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_started_job_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_left_loc_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_left_loc_datetimeChanged()
    End Sub
    Partial Private Sub Oncrew_returned_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_returned_datetimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_left_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_left_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_left_datetime
		End Get
		Set
			If (Me._equipment_left_datetime.Equals(value) = false) Then
				Me.Onequipment_left_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_left_datetime = value
				Me.SendPropertyChanged("equipment_left_datetime")
				Me.Onequipment_left_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_on_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_on_loc_datetime
		End Get
		Set
			If (Me._equipment_on_loc_datetime.Equals(value) = false) Then
				Me.Onequipment_on_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_on_loc_datetime = value
				Me.SendPropertyChanged("equipment_on_loc_datetime")
				Me.Onequipment_on_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_left_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_left_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_left_loc_datetime
		End Get
		Set
			If (Me._equipment_left_loc_datetime.Equals(value) = false) Then
				Me.Onequipment_left_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_left_loc_datetime = value
				Me.SendPropertyChanged("equipment_left_loc_datetime")
				Me.Onequipment_left_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_returned_datetime", DbType:="SmallDateTime")>  _
	Public Property equipment_returned_datetime() As System.Nullable(Of Date)
		Get
			Return Me._equipment_returned_datetime
		End Get
		Set
			If (Me._equipment_returned_datetime.Equals(value) = false) Then
				Me.Onequipment_returned_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._equipment_returned_datetime = value
				Me.SendPropertyChanged("equipment_returned_datetime")
				Me.Onequipment_returned_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_left_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_left_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_left_datetime
		End Get
		Set
			If (Me._crew_left_datetime.Equals(value) = false) Then
				Me.Oncrew_left_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_left_datetime = value
				Me.SendPropertyChanged("crew_left_datetime")
				Me.Oncrew_left_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_on_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_on_loc_datetime
		End Get
		Set
			If (Me._crew_on_loc_datetime.Equals(value) = false) Then
				Me.Oncrew_on_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_on_loc_datetime = value
				Me.SendPropertyChanged("crew_on_loc_datetime")
				Me.Oncrew_on_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_started_job_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_started_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_started_job_datetime
		End Get
		Set
			If (Me._crew_started_job_datetime.Equals(value) = false) Then
				Me.Oncrew_started_job_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_started_job_datetime = value
				Me.SendPropertyChanged("crew_started_job_datetime")
				Me.Oncrew_started_job_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_finished_job_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_finished_job_datetime
		End Get
		Set
			If (Me._crew_finished_job_datetime.Equals(value) = false) Then
				Me.Oncrew_finished_job_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_finished_job_datetime = value
				Me.SendPropertyChanged("crew_finished_job_datetime")
				Me.Oncrew_finished_job_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_left_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_left_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_left_loc_datetime
		End Get
		Set
			If (Me._crew_left_loc_datetime.Equals(value) = false) Then
				Me.Oncrew_left_loc_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_left_loc_datetime = value
				Me.SendPropertyChanged("crew_left_loc_datetime")
				Me.Oncrew_left_loc_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_returned_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_returned_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_returned_datetime
		End Get
		Set
			If (Me._crew_returned_datetime.Equals(value) = false) Then
				Me.Oncrew_returned_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_returned_datetime = value
				Me.SendPropertyChanged("crew_returned_datetime")
				Me.Oncrew_returned_datetimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_unit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _truck As String
	
	Private _truck_start_hours As System.Nullable(Of Integer)
	
	Private _truck_end_hours As System.Nullable(Of Integer)
	
	Private _aux_unit As String
	
	Private _aux_unit_start_hours As System.Nullable(Of Integer)
	
	Private _aux_unit_end_hours As System.Nullable(Of Integer)
	
	Private _remote_unit As String
	
	Private _cable_1_id As String
	
	Private _cable_1_type As String
	
	Private _cable_1_start_length As System.Nullable(Of Integer)
	
	Private _cable_1_end_length As System.Nullable(Of Integer)
	
	Private _cable_1_tension As System.Nullable(Of Integer)
	
	Private _cable_1_magnetic_marks As String
	
	Private _cable_1_sheave_od As System.Nullable(Of Single)
	
	Private _cable_1_cuts As System.Nullable(Of Integer)
	
	Private _cable_1_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable_1_splice2_depth As System.Nullable(Of Integer)
	
	Private _cable_1_flow_tube_size As System.Nullable(Of Single)
	
	Private _cable_2_id As String
	
	Private _cable_2_type As String
	
	Private _cable_2_start_length As System.Nullable(Of Integer)
	
	Private _cable_2_end_length As System.Nullable(Of Integer)
	
	Private _cable_2_tension As System.Nullable(Of Integer)
	
	Private _cable_2_magnetic_marks As String
	
	Private _cable_2_sheave_od As System.Nullable(Of Single)
	
	Private _cable_2_cuts As System.Nullable(Of Integer)
	
	Private _cable_2_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable_2_splice2_depth As System.Nullable(Of Integer)
	
	Private _cable_2_flow_tube_size As System.Nullable(Of Single)
	
	Private _cable_3_id As String
	
	Private _cable_3_type As String
	
	Private _cable_3_start_length As System.Nullable(Of Integer)
	
	Private _cable_3_end_length As System.Nullable(Of Integer)
	
	Private _cable_3_tension As System.Nullable(Of Integer)
	
	Private _cable_3_magnetic_marks As String
	
	Private _cable_3_sheave_od As System.Nullable(Of Single)
	
	Private _cable_3_cuts As System.Nullable(Of Integer)
	
	Private _cable_3_splice1_depth As System.Nullable(Of Integer)
	
	Private _cable_3_splice2_depth As System.Nullable(Of Integer)
	
	Private _cable_3_flow_tube_size As System.Nullable(Of Single)
	
	Private _unit_comment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OntruckChanging(value As String)
    End Sub
    Partial Private Sub OntruckChanged()
    End Sub
    Partial Private Sub Ontruck_start_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontruck_start_hoursChanged()
    End Sub
    Partial Private Sub Ontruck_end_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontruck_end_hoursChanged()
    End Sub
    Partial Private Sub Onaux_unitChanging(value As String)
    End Sub
    Partial Private Sub Onaux_unitChanged()
    End Sub
    Partial Private Sub Onaux_unit_start_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onaux_unit_start_hoursChanged()
    End Sub
    Partial Private Sub Onaux_unit_end_hoursChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onaux_unit_end_hoursChanged()
    End Sub
    Partial Private Sub Onremote_unitChanging(value As String)
    End Sub
    Partial Private Sub Onremote_unitChanged()
    End Sub
    Partial Private Sub Oncable_1_idChanging(value As String)
    End Sub
    Partial Private Sub Oncable_1_idChanged()
    End Sub
    Partial Private Sub Oncable_1_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncable_1_typeChanged()
    End Sub
    Partial Private Sub Oncable_1_start_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_start_lengthChanged()
    End Sub
    Partial Private Sub Oncable_1_end_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_end_lengthChanged()
    End Sub
    Partial Private Sub Oncable_1_tensionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_tensionChanged()
    End Sub
    Partial Private Sub Oncable_1_magnetic_marksChanging(value As String)
    End Sub
    Partial Private Sub Oncable_1_magnetic_marksChanged()
    End Sub
    Partial Private Sub Oncable_1_sheave_odChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_1_sheave_odChanged()
    End Sub
    Partial Private Sub Oncable_1_cutsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_cutsChanged()
    End Sub
    Partial Private Sub Oncable_1_splice1_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_splice1_depthChanged()
    End Sub
    Partial Private Sub Oncable_1_splice2_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_1_splice2_depthChanged()
    End Sub
    Partial Private Sub Oncable_1_flow_tube_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_1_flow_tube_sizeChanged()
    End Sub
    Partial Private Sub Oncable_2_idChanging(value As String)
    End Sub
    Partial Private Sub Oncable_2_idChanged()
    End Sub
    Partial Private Sub Oncable_2_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncable_2_typeChanged()
    End Sub
    Partial Private Sub Oncable_2_start_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_start_lengthChanged()
    End Sub
    Partial Private Sub Oncable_2_end_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_end_lengthChanged()
    End Sub
    Partial Private Sub Oncable_2_tensionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_tensionChanged()
    End Sub
    Partial Private Sub Oncable_2_magnetic_marksChanging(value As String)
    End Sub
    Partial Private Sub Oncable_2_magnetic_marksChanged()
    End Sub
    Partial Private Sub Oncable_2_sheave_odChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_2_sheave_odChanged()
    End Sub
    Partial Private Sub Oncable_2_cutsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_cutsChanged()
    End Sub
    Partial Private Sub Oncable_2_splice1_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_splice1_depthChanged()
    End Sub
    Partial Private Sub Oncable_2_splice2_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_2_splice2_depthChanged()
    End Sub
    Partial Private Sub Oncable_2_flow_tube_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_2_flow_tube_sizeChanged()
    End Sub
    Partial Private Sub Oncable_3_idChanging(value As String)
    End Sub
    Partial Private Sub Oncable_3_idChanged()
    End Sub
    Partial Private Sub Oncable_3_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncable_3_typeChanged()
    End Sub
    Partial Private Sub Oncable_3_start_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_start_lengthChanged()
    End Sub
    Partial Private Sub Oncable_3_end_lengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_end_lengthChanged()
    End Sub
    Partial Private Sub Oncable_3_tensionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_tensionChanged()
    End Sub
    Partial Private Sub Oncable_3_magnetic_marksChanging(value As String)
    End Sub
    Partial Private Sub Oncable_3_magnetic_marksChanged()
    End Sub
    Partial Private Sub Oncable_3_sheave_odChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_3_sheave_odChanged()
    End Sub
    Partial Private Sub Oncable_3_cutsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_cutsChanged()
    End Sub
    Partial Private Sub Oncable_3_splice1_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_splice1_depthChanged()
    End Sub
    Partial Private Sub Oncable_3_splice2_depthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncable_3_splice2_depthChanged()
    End Sub
    Partial Private Sub Oncable_3_flow_tube_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncable_3_flow_tube_sizeChanged()
    End Sub
    Partial Private Sub Onunit_commentChanging(value As String)
    End Sub
    Partial Private Sub Onunit_commentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50)")>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me.OntruckChanging(value)
				Me.SendPropertyChanging
				Me._truck = value
				Me.SendPropertyChanged("truck")
				Me.OntruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck_start_hours", DbType:="int")>  _
	Public Property truck_start_hours() As System.Nullable(Of Integer)
		Get
			Return Me._truck_start_hours
		End Get
		Set
			If (Me._truck_start_hours.Equals(value) = false) Then
				Me.Ontruck_start_hoursChanging(value)
				Me.SendPropertyChanging
				Me._truck_start_hours = value
				Me.SendPropertyChanged("truck_start_hours")
				Me.Ontruck_start_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck_end_hours", DbType:="int")>  _
	Public Property truck_end_hours() As System.Nullable(Of Integer)
		Get
			Return Me._truck_end_hours
		End Get
		Set
			If (Me._truck_end_hours.Equals(value) = false) Then
				Me.Ontruck_end_hoursChanging(value)
				Me.SendPropertyChanging
				Me._truck_end_hours = value
				Me.SendPropertyChanged("truck_end_hours")
				Me.Ontruck_end_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit", DbType:="VarChar(50)")>  _
	Public Property aux_unit() As String
		Get
			Return Me._aux_unit
		End Get
		Set
			If (String.Equals(Me._aux_unit, value) = false) Then
				Me.Onaux_unitChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit = value
				Me.SendPropertyChanged("aux_unit")
				Me.Onaux_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit_start_hours", DbType:="int")>  _
	Public Property aux_unit_start_hours() As System.Nullable(Of Integer)
		Get
			Return Me._aux_unit_start_hours
		End Get
		Set
			If (Me._aux_unit_start_hours.Equals(value) = false) Then
				Me.Onaux_unit_start_hoursChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit_start_hours = value
				Me.SendPropertyChanged("aux_unit_start_hours")
				Me.Onaux_unit_start_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit_end_hours", DbType:="int")>  _
	Public Property aux_unit_end_hours() As System.Nullable(Of Integer)
		Get
			Return Me._aux_unit_end_hours
		End Get
		Set
			If (Me._aux_unit_end_hours.Equals(value) = false) Then
				Me.Onaux_unit_end_hoursChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit_end_hours = value
				Me.SendPropertyChanged("aux_unit_end_hours")
				Me.Onaux_unit_end_hoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remote_unit", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property remote_unit() As String
		Get
			Return Me._remote_unit
		End Get
		Set
			If (String.Equals(Me._remote_unit, value) = false) Then
				Me.Onremote_unitChanging(value)
				Me.SendPropertyChanging
				Me._remote_unit = value
				Me.SendPropertyChanged("remote_unit")
				Me.Onremote_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_id", DbType:="VarChar(15)")>  _
	Public Property cable_1_id() As String
		Get
			Return Me._cable_1_id
		End Get
		Set
			If (String.Equals(Me._cable_1_id, value) = false) Then
				Me.Oncable_1_idChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_id = value
				Me.SendPropertyChanged("cable_1_id")
				Me.Oncable_1_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_type", DbType:="VarChar(25)")>  _
	Public Property cable_1_type() As String
		Get
			Return Me._cable_1_type
		End Get
		Set
			If (String.Equals(Me._cable_1_type, value) = false) Then
				Me.Oncable_1_typeChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_type = value
				Me.SendPropertyChanged("cable_1_type")
				Me.Oncable_1_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_start_length", DbType:="Int")>  _
	Public Property cable_1_start_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_start_length
		End Get
		Set
			If (Me._cable_1_start_length.Equals(value) = false) Then
				Me.Oncable_1_start_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_start_length = value
				Me.SendPropertyChanged("cable_1_start_length")
				Me.Oncable_1_start_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_end_length", DbType:="Int")>  _
	Public Property cable_1_end_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_end_length
		End Get
		Set
			If (Me._cable_1_end_length.Equals(value) = false) Then
				Me.Oncable_1_end_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_end_length = value
				Me.SendPropertyChanged("cable_1_end_length")
				Me.Oncable_1_end_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_tension", DbType:="Int")>  _
	Public Property cable_1_tension() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_tension
		End Get
		Set
			If (Me._cable_1_tension.Equals(value) = false) Then
				Me.Oncable_1_tensionChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_tension = value
				Me.SendPropertyChanged("cable_1_tension")
				Me.Oncable_1_tensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_magnetic_marks", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property cable_1_magnetic_marks() As String
		Get
			Return Me._cable_1_magnetic_marks
		End Get
		Set
			If (String.Equals(Me._cable_1_magnetic_marks, value) = false) Then
				Me.Oncable_1_magnetic_marksChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_magnetic_marks = value
				Me.SendPropertyChanged("cable_1_magnetic_marks")
				Me.Oncable_1_magnetic_marksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_sheave_od", DbType:="real")>  _
	Public Property cable_1_sheave_od() As System.Nullable(Of Single)
		Get
			Return Me._cable_1_sheave_od
		End Get
		Set
			If (Me._cable_1_sheave_od.Equals(value) = false) Then
				Me.Oncable_1_sheave_odChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_sheave_od = value
				Me.SendPropertyChanged("cable_1_sheave_od")
				Me.Oncable_1_sheave_odChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_cuts", DbType:="int")>  _
	Public Property cable_1_cuts() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_cuts
		End Get
		Set
			If (Me._cable_1_cuts.Equals(value) = false) Then
				Me.Oncable_1_cutsChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_cuts = value
				Me.SendPropertyChanged("cable_1_cuts")
				Me.Oncable_1_cutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_splice1_depth")>  _
	Public Property cable_1_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_splice1_depth
		End Get
		Set
			If (Me._cable_1_splice1_depth.Equals(value) = false) Then
				Me.Oncable_1_splice1_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_splice1_depth = value
				Me.SendPropertyChanged("cable_1_splice1_depth")
				Me.Oncable_1_splice1_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_splice2_depth")>  _
	Public Property cable_1_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_1_splice2_depth
		End Get
		Set
			If (Me._cable_1_splice2_depth.Equals(value) = false) Then
				Me.Oncable_1_splice2_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_splice2_depth = value
				Me.SendPropertyChanged("cable_1_splice2_depth")
				Me.Oncable_1_splice2_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_1_flow_tube_size", DbType:="real")>  _
	Public Property cable_1_flow_tube_size() As System.Nullable(Of Single)
		Get
			Return Me._cable_1_flow_tube_size
		End Get
		Set
			If (Me._cable_1_flow_tube_size.Equals(value) = false) Then
				Me.Oncable_1_flow_tube_sizeChanging(value)
				Me.SendPropertyChanging
				Me._cable_1_flow_tube_size = value
				Me.SendPropertyChanged("cable_1_flow_tube_size")
				Me.Oncable_1_flow_tube_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_id", DbType:="VarChar(15)")>  _
	Public Property cable_2_id() As String
		Get
			Return Me._cable_2_id
		End Get
		Set
			If (String.Equals(Me._cable_2_id, value) = false) Then
				Me.Oncable_2_idChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_id = value
				Me.SendPropertyChanged("cable_2_id")
				Me.Oncable_2_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_type", DbType:="VarChar(25)")>  _
	Public Property cable_2_type() As String
		Get
			Return Me._cable_2_type
		End Get
		Set
			If (String.Equals(Me._cable_2_type, value) = false) Then
				Me.Oncable_2_typeChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_type = value
				Me.SendPropertyChanged("cable_2_type")
				Me.Oncable_2_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_start_length", DbType:="Int")>  _
	Public Property cable_2_start_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_start_length
		End Get
		Set
			If (Me._cable_2_start_length.Equals(value) = false) Then
				Me.Oncable_2_start_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_start_length = value
				Me.SendPropertyChanged("cable_2_start_length")
				Me.Oncable_2_start_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_end_length", DbType:="Int")>  _
	Public Property cable_2_end_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_end_length
		End Get
		Set
			If (Me._cable_2_end_length.Equals(value) = false) Then
				Me.Oncable_2_end_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_end_length = value
				Me.SendPropertyChanged("cable_2_end_length")
				Me.Oncable_2_end_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_tension", DbType:="Int")>  _
	Public Property cable_2_tension() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_tension
		End Get
		Set
			If (Me._cable_2_tension.Equals(value) = false) Then
				Me.Oncable_2_tensionChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_tension = value
				Me.SendPropertyChanged("cable_2_tension")
				Me.Oncable_2_tensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_magnetic_marks", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property cable_2_magnetic_marks() As String
		Get
			Return Me._cable_2_magnetic_marks
		End Get
		Set
			If (String.Equals(Me._cable_2_magnetic_marks, value) = false) Then
				Me.Oncable_2_magnetic_marksChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_magnetic_marks = value
				Me.SendPropertyChanged("cable_2_magnetic_marks")
				Me.Oncable_2_magnetic_marksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_sheave_od", DbType:="real")>  _
	Public Property cable_2_sheave_od() As System.Nullable(Of Single)
		Get
			Return Me._cable_2_sheave_od
		End Get
		Set
			If (Me._cable_2_sheave_od.Equals(value) = false) Then
				Me.Oncable_2_sheave_odChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_sheave_od = value
				Me.SendPropertyChanged("cable_2_sheave_od")
				Me.Oncable_2_sheave_odChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_cuts", DbType:="int")>  _
	Public Property cable_2_cuts() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_cuts
		End Get
		Set
			If (Me._cable_2_cuts.Equals(value) = false) Then
				Me.Oncable_2_cutsChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_cuts = value
				Me.SendPropertyChanged("cable_2_cuts")
				Me.Oncable_2_cutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_splice1_depth")>  _
	Public Property cable_2_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_splice1_depth
		End Get
		Set
			If (Me._cable_2_splice1_depth.Equals(value) = false) Then
				Me.Oncable_2_splice1_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_splice1_depth = value
				Me.SendPropertyChanged("cable_2_splice1_depth")
				Me.Oncable_2_splice1_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_splice2_depth")>  _
	Public Property cable_2_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_2_splice2_depth
		End Get
		Set
			If (Me._cable_2_splice2_depth.Equals(value) = false) Then
				Me.Oncable_2_splice2_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_splice2_depth = value
				Me.SendPropertyChanged("cable_2_splice2_depth")
				Me.Oncable_2_splice2_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_2_flow_tube_size", DbType:="real")>  _
	Public Property cable_2_flow_tube_size() As System.Nullable(Of Single)
		Get
			Return Me._cable_2_flow_tube_size
		End Get
		Set
			If (Me._cable_2_flow_tube_size.Equals(value) = false) Then
				Me.Oncable_2_flow_tube_sizeChanging(value)
				Me.SendPropertyChanging
				Me._cable_2_flow_tube_size = value
				Me.SendPropertyChanged("cable_2_flow_tube_size")
				Me.Oncable_2_flow_tube_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_id", DbType:="varchar(15)", CanBeNull:=false)>  _
	Public Property cable_3_id() As String
		Get
			Return Me._cable_3_id
		End Get
		Set
			If (String.Equals(Me._cable_3_id, value) = false) Then
				Me.Oncable_3_idChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_id = value
				Me.SendPropertyChanged("cable_3_id")
				Me.Oncable_3_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_type", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property cable_3_type() As String
		Get
			Return Me._cable_3_type
		End Get
		Set
			If (String.Equals(Me._cable_3_type, value) = false) Then
				Me.Oncable_3_typeChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_type = value
				Me.SendPropertyChanged("cable_3_type")
				Me.Oncable_3_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_start_length", DbType:="int")>  _
	Public Property cable_3_start_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_start_length
		End Get
		Set
			If (Me._cable_3_start_length.Equals(value) = false) Then
				Me.Oncable_3_start_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_start_length = value
				Me.SendPropertyChanged("cable_3_start_length")
				Me.Oncable_3_start_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_end_length", DbType:="int")>  _
	Public Property cable_3_end_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_end_length
		End Get
		Set
			If (Me._cable_3_end_length.Equals(value) = false) Then
				Me.Oncable_3_end_lengthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_end_length = value
				Me.SendPropertyChanged("cable_3_end_length")
				Me.Oncable_3_end_lengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_tension", DbType:="int")>  _
	Public Property cable_3_tension() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_tension
		End Get
		Set
			If (Me._cable_3_tension.Equals(value) = false) Then
				Me.Oncable_3_tensionChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_tension = value
				Me.SendPropertyChanged("cable_3_tension")
				Me.Oncable_3_tensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_magnetic_marks", DbType:="varchar(5)", CanBeNull:=false)>  _
	Public Property cable_3_magnetic_marks() As String
		Get
			Return Me._cable_3_magnetic_marks
		End Get
		Set
			If (String.Equals(Me._cable_3_magnetic_marks, value) = false) Then
				Me.Oncable_3_magnetic_marksChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_magnetic_marks = value
				Me.SendPropertyChanged("cable_3_magnetic_marks")
				Me.Oncable_3_magnetic_marksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_sheave_od", DbType:="real")>  _
	Public Property cable_3_sheave_od() As System.Nullable(Of Single)
		Get
			Return Me._cable_3_sheave_od
		End Get
		Set
			If (Me._cable_3_sheave_od.Equals(value) = false) Then
				Me.Oncable_3_sheave_odChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_sheave_od = value
				Me.SendPropertyChanged("cable_3_sheave_od")
				Me.Oncable_3_sheave_odChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_cuts", DbType:="int")>  _
	Public Property cable_3_cuts() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_cuts
		End Get
		Set
			If (Me._cable_3_cuts.Equals(value) = false) Then
				Me.Oncable_3_cutsChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_cuts = value
				Me.SendPropertyChanged("cable_3_cuts")
				Me.Oncable_3_cutsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_splice1_depth")>  _
	Public Property cable_3_splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_splice1_depth
		End Get
		Set
			If (Me._cable_3_splice1_depth.Equals(value) = false) Then
				Me.Oncable_3_splice1_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_splice1_depth = value
				Me.SendPropertyChanged("cable_3_splice1_depth")
				Me.Oncable_3_splice1_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_splice2_depth")>  _
	Public Property cable_3_splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._cable_3_splice2_depth
		End Get
		Set
			If (Me._cable_3_splice2_depth.Equals(value) = false) Then
				Me.Oncable_3_splice2_depthChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_splice2_depth = value
				Me.SendPropertyChanged("cable_3_splice2_depth")
				Me.Oncable_3_splice2_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_3_flow_tube_size", DbType:="real")>  _
	Public Property cable_3_flow_tube_size() As System.Nullable(Of Single)
		Get
			Return Me._cable_3_flow_tube_size
		End Get
		Set
			If (Me._cable_3_flow_tube_size.Equals(value) = false) Then
				Me.Oncable_3_flow_tube_sizeChanging(value)
				Me.SendPropertyChanging
				Me._cable_3_flow_tube_size = value
				Me.SendPropertyChanged("cable_3_flow_tube_size")
				Me.Oncable_3_flow_tube_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_comment", DbType:="varchar(256)", CanBeNull:=false)>  _
	Public Property unit_comment() As String
		Get
			Return Me._unit_comment
		End Get
		Set
			If (String.Equals(Me._unit_comment, value) = false) Then
				Me.Onunit_commentChanging(value)
				Me.SendPropertyChanging
				Me._unit_comment = value
				Me.SendPropertyChanged("unit_comment")
				Me.Onunit_commentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_perf
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _gun_loading_complete_flag As System.Nullable(Of Boolean)
	
	Private _gun_loading_complete_datetime As System.Nullable(Of Date)
	
	Private _gun_loader As String
	
	Private _offset_to_perf_stop_depth As System.Nullable(Of Single)
	
	Private _offset_to_perf_max_depth As System.Nullable(Of Single)
	
	Private _perf_cluster_spacing As System.Nullable(Of Single)
	
	Private _perf_stage_spacing As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Ongun_loading_complete_flagChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Ongun_loading_complete_flagChanged()
    End Sub
    Partial Private Sub Ongun_loading_complete_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ongun_loading_complete_datetimeChanged()
    End Sub
    Partial Private Sub Ongun_loaderChanging(value As String)
    End Sub
    Partial Private Sub Ongun_loaderChanged()
    End Sub
    Partial Private Sub Onoffset_to_perf_stop_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onoffset_to_perf_stop_depthChanged()
    End Sub
    Partial Private Sub Onoffset_to_perf_max_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onoffset_to_perf_max_depthChanged()
    End Sub
    Partial Private Sub Onperf_cluster_spacingChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onperf_cluster_spacingChanged()
    End Sub
    Partial Private Sub Onperf_stage_spacingChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onperf_stage_spacingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_loading_complete_flag", DbType:="Bit")>  _
	Public Property gun_loading_complete_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._gun_loading_complete_flag
		End Get
		Set
			If (Me._gun_loading_complete_flag.Equals(value) = false) Then
				Me.Ongun_loading_complete_flagChanging(value)
				Me.SendPropertyChanging
				Me._gun_loading_complete_flag = value
				Me.SendPropertyChanged("gun_loading_complete_flag")
				Me.Ongun_loading_complete_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_loading_complete_datetime", DbType:="SmallDateTime")>  _
	Public Property gun_loading_complete_datetime() As System.Nullable(Of Date)
		Get
			Return Me._gun_loading_complete_datetime
		End Get
		Set
			If (Me._gun_loading_complete_datetime.Equals(value) = false) Then
				Me.Ongun_loading_complete_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._gun_loading_complete_datetime = value
				Me.SendPropertyChanged("gun_loading_complete_datetime")
				Me.Ongun_loading_complete_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gun_loader", DbType:="VarChar(50)")>  _
	Public Property gun_loader() As String
		Get
			Return Me._gun_loader
		End Get
		Set
			If (String.Equals(Me._gun_loader, value) = false) Then
				Me.Ongun_loaderChanging(value)
				Me.SendPropertyChanging
				Me._gun_loader = value
				Me.SendPropertyChanged("gun_loader")
				Me.Ongun_loaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_offset_to_perf_stop_depth", DbType:="real")>  _
	Public Property offset_to_perf_stop_depth() As System.Nullable(Of Single)
		Get
			Return Me._offset_to_perf_stop_depth
		End Get
		Set
			If (Me._offset_to_perf_stop_depth.Equals(value) = false) Then
				Me.Onoffset_to_perf_stop_depthChanging(value)
				Me.SendPropertyChanging
				Me._offset_to_perf_stop_depth = value
				Me.SendPropertyChanged("offset_to_perf_stop_depth")
				Me.Onoffset_to_perf_stop_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_offset_to_perf_max_depth", DbType:="real")>  _
	Public Property offset_to_perf_max_depth() As System.Nullable(Of Single)
		Get
			Return Me._offset_to_perf_max_depth
		End Get
		Set
			If (Me._offset_to_perf_max_depth.Equals(value) = false) Then
				Me.Onoffset_to_perf_max_depthChanging(value)
				Me.SendPropertyChanging
				Me._offset_to_perf_max_depth = value
				Me.SendPropertyChanged("offset_to_perf_max_depth")
				Me.Onoffset_to_perf_max_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perf_cluster_spacing", DbType:="real")>  _
	Public Property perf_cluster_spacing() As System.Nullable(Of Single)
		Get
			Return Me._perf_cluster_spacing
		End Get
		Set
			If (Me._perf_cluster_spacing.Equals(value) = false) Then
				Me.Onperf_cluster_spacingChanging(value)
				Me.SendPropertyChanging
				Me._perf_cluster_spacing = value
				Me.SendPropertyChanged("perf_cluster_spacing")
				Me.Onperf_cluster_spacingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perf_stage_spacing", DbType:="real")>  _
	Public Property perf_stage_spacing() As System.Nullable(Of Single)
		Get
			Return Me._perf_stage_spacing
		End Get
		Set
			If (Me._perf_stage_spacing.Equals(value) = false) Then
				Me.Onperf_stage_spacingChanging(value)
				Me.SendPropertyChanging
				Me._perf_stage_spacing = value
				Me.SendPropertyChanged("perf_stage_spacing")
				Me.Onperf_stage_spacingChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.disp_config_section")>  _
Partial Public Class disp_config_section
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _section_id As String
	
	Private _sequence_number As System.Nullable(Of Integer)
	
	Private _inactive_flag As Boolean
	
	Private _original_section_id As String
	
	Private _psl_ids As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onsection_idChanging(value As String)
    End Sub
    Partial Private Sub Onsection_idChanged()
    End Sub
    Partial Private Sub Onsequence_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsequence_numberChanged()
    End Sub
    Partial Private Sub Oninactive_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oninactive_flagChanged()
    End Sub
    Partial Private Sub Onoriginal_section_idChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_section_idChanged()
    End Sub
    Partial Private Sub Onpsl_idsChanging(value As String)
    End Sub
    Partial Private Sub Onpsl_idsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property section_id() As String
		Get
			Return Me._section_id
		End Get
		Set
			If (String.Equals(Me._section_id, value) = false) Then
				Me.Onsection_idChanging(value)
				Me.SendPropertyChanging
				Me._section_id = value
				Me.SendPropertyChanged("section_id")
				Me.Onsection_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="int")>  _
	Public Property sequence_number() As System.Nullable(Of Integer)
		Get
			Return Me._sequence_number
		End Get
		Set
			If (Me._sequence_number.Equals(value) = false) Then
				Me.Onsequence_numberChanging(value)
				Me.SendPropertyChanging
				Me._sequence_number = value
				Me.SendPropertyChanged("sequence_number")
				Me.Onsequence_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="Bit NOT NULL")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me.Oninactive_flagChanging(value)
				Me.SendPropertyChanging
				Me._inactive_flag = value
				Me.SendPropertyChanged("inactive_flag")
				Me.Oninactive_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_section_id", DbType:="varchar(10)", CanBeNull:=false)>  _
	Public Property original_section_id() As String
		Get
			Return Me._original_section_id
		End Get
		Set
			If (String.Equals(Me._original_section_id, value) = false) Then
				Me.Onoriginal_section_idChanging(value)
				Me.SendPropertyChanging
				Me._original_section_id = value
				Me.SendPropertyChanged("original_section_id")
				Me.Onoriginal_section_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_ids", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property psl_ids() As String
		Get
			Return Me._psl_ids
		End Get
		Set
			If (String.Equals(Me._psl_ids, value) = false) Then
				Me.Onpsl_idsChanging(value)
				Me.SendPropertyChanging
				Me._psl_ids = value
				Me.SendPropertyChanged("psl_ids")
				Me.Onpsl_idsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_tree_data
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _tubing_hanger_type As String
	
	Private _tree_length_2 As System.Nullable(Of Single)
	
	Private _tree_length_3 As System.Nullable(Of Single)
	
	Private _top_connection As String
	
	Private _blind_rams As String
	
	Private _work_spool As System.Nullable(Of Boolean)
	
	Private _slant_well As System.Nullable(Of Boolean)
	
	Private _special_instructions As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Ontubing_hanger_typeChanging(value As String)
    End Sub
    Partial Private Sub Ontubing_hanger_typeChanged()
    End Sub
    Partial Private Sub Ontree_length_2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontree_length_2Changed()
    End Sub
    Partial Private Sub Ontree_length_3Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Ontree_length_3Changed()
    End Sub
    Partial Private Sub Ontop_connectionChanging(value As String)
    End Sub
    Partial Private Sub Ontop_connectionChanged()
    End Sub
    Partial Private Sub Onblind_ramsChanging(value As String)
    End Sub
    Partial Private Sub Onblind_ramsChanged()
    End Sub
    Partial Private Sub Onwork_spoolChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onwork_spoolChanged()
    End Sub
    Partial Private Sub Onslant_wellChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onslant_wellChanged()
    End Sub
    Partial Private Sub Onspecial_instructionsChanging(value As String)
    End Sub
    Partial Private Sub Onspecial_instructionsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tubing_hanger_type", DbType:="VarChar(15)")>  _
	Public Property tubing_hanger_type() As String
		Get
			Return Me._tubing_hanger_type
		End Get
		Set
			If (String.Equals(Me._tubing_hanger_type, value) = false) Then
				Me.Ontubing_hanger_typeChanging(value)
				Me.SendPropertyChanging
				Me._tubing_hanger_type = value
				Me.SendPropertyChanged("tubing_hanger_type")
				Me.Ontubing_hanger_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tree_length_2", DbType:="Real")>  _
	Public Property tree_length_2() As System.Nullable(Of Single)
		Get
			Return Me._tree_length_2
		End Get
		Set
			If (Me._tree_length_2.Equals(value) = false) Then
				Me.Ontree_length_2Changing(value)
				Me.SendPropertyChanging
				Me._tree_length_2 = value
				Me.SendPropertyChanged("tree_length_2")
				Me.Ontree_length_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tree_length_3", DbType:="Real")>  _
	Public Property tree_length_3() As System.Nullable(Of Single)
		Get
			Return Me._tree_length_3
		End Get
		Set
			If (Me._tree_length_3.Equals(value) = false) Then
				Me.Ontree_length_3Changing(value)
				Me.SendPropertyChanging
				Me._tree_length_3 = value
				Me.SendPropertyChanged("tree_length_3")
				Me.Ontree_length_3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_top_connection", DbType:="VarChar(10)")>  _
	Public Property top_connection() As String
		Get
			Return Me._top_connection
		End Get
		Set
			If (String.Equals(Me._top_connection, value) = false) Then
				Me.Ontop_connectionChanging(value)
				Me.SendPropertyChanging
				Me._top_connection = value
				Me.SendPropertyChanged("top_connection")
				Me.Ontop_connectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_blind_rams", DbType:="VarChar(10)")>  _
	Public Property blind_rams() As String
		Get
			Return Me._blind_rams
		End Get
		Set
			If (String.Equals(Me._blind_rams, value) = false) Then
				Me.Onblind_ramsChanging(value)
				Me.SendPropertyChanging
				Me._blind_rams = value
				Me.SendPropertyChanged("blind_rams")
				Me.Onblind_ramsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_work_spool", DbType:="Bit")>  _
	Public Property work_spool() As System.Nullable(Of Boolean)
		Get
			Return Me._work_spool
		End Get
		Set
			If (Me._work_spool.Equals(value) = false) Then
				Me.Onwork_spoolChanging(value)
				Me.SendPropertyChanging
				Me._work_spool = value
				Me.SendPropertyChanged("work_spool")
				Me.Onwork_spoolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_slant_well", DbType:="Bit")>  _
	Public Property slant_well() As System.Nullable(Of Boolean)
		Get
			Return Me._slant_well
		End Get
		Set
			If (Me._slant_well.Equals(value) = false) Then
				Me.Onslant_wellChanging(value)
				Me.SendPropertyChanging
				Me._slant_well = value
				Me.SendPropertyChanged("slant_well")
				Me.Onslant_wellChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_special_instructions", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property special_instructions() As String
		Get
			Return Me._special_instructions
		End Get
		Set
			If (String.Equals(Me._special_instructions, value) = false) Then
				Me.Onspecial_instructionsChanging(value)
				Me.SendPropertyChanging
				Me._special_instructions = value
				Me.SendPropertyChanged("special_instructions")
				Me.Onspecial_instructionsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SAP.fso_export_material_override")>  _
Partial Public Class fso_export_material_override
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gpi As String
	
	Private _psl As String
	
	Private _material As String
	
	Private _rec_id As Integer
	
	Private _service_type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub OnpslChanging(value As String)
    End Sub
    Partial Private Sub OnpslChanged()
    End Sub
    Partial Private Sub OnmaterialChanging(value As String)
    End Sub
    Partial Private Sub OnmaterialChanged()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onservice_typeChanging(value As String)
    End Sub
    Partial Private Sub Onservice_typeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me.OnpslChanging(value)
				Me.SendPropertyChanging
				Me._psl = value
				Me.SendPropertyChanged("psl")
				Me.OnpslChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me.OnmaterialChanging(value)
				Me.SendPropertyChanging
				Me._material = value
				Me.SendPropertyChanged("material")
				Me.OnmaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_type", CanBeNull:=false)>  _
	Public Property service_type() As String
		Get
			Return Me._service_type
		End Get
		Set
			If (String.Equals(Me._service_type, value) = false) Then
				Me.Onservice_typeChanging(value)
				Me.SendPropertyChanging
				Me._service_type = value
				Me.SendPropertyChanged("service_type")
				Me.Onservice_typeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asset_doc")>  _
Partial Public Class doc_rec
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _asset_id As String
	
	Private _original_file_path As String
	
	Private _icon_description As String
	
	Private _document_type As String
	
	Private _file_size As System.Nullable(Of Single)
	
	Private _update_user_id As String
	
	Private _update_time As System.Nullable(Of Date)
	
	Private _expiry_date As System.Nullable(Of Date)
	
	Private _original_document_type As String
	
	Private _original_expiry_date As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onobject_idChanging(value As String)
    End Sub
    Partial Private Sub Onobject_idChanged()
    End Sub
    Partial Private Sub Onoriginal_file_pathChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_file_pathChanged()
    End Sub
    Partial Private Sub Onicon_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Onicon_descriptionChanged()
    End Sub
    Partial Private Sub Ondocument_typeChanging(value As String)
    End Sub
    Partial Private Sub Ondocument_typeChanged()
    End Sub
    Partial Private Sub Onfile_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfile_sizeChanged()
    End Sub
    Partial Private Sub Onupdate_user_idChanging(value As String)
    End Sub
    Partial Private Sub Onupdate_user_idChanged()
    End Sub
    Partial Private Sub Onupdate_timeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onupdate_timeChanged()
    End Sub
    Partial Private Sub Onexpiry_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onexpiry_dateChanged()
    End Sub
    Partial Private Sub Onoriginal_document_typeChanging(value As String)
    End Sub
    Partial Private Sub Onoriginal_document_typeChanged()
    End Sub
    Partial Private Sub Onoriginal_expiry_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onoriginal_expiry_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)", CanBeNull:=false)>  _
	Public Property object_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me.Onobject_idChanging(value)
				Me.SendPropertyChanging
				Me._asset_id = value
				Me.SendPropertyChanged("object_id")
				Me.Onobject_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_file_path", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property original_file_path() As String
		Get
			Return Me._original_file_path
		End Get
		Set
			If (String.Equals(Me._original_file_path, value) = false) Then
				Me.Onoriginal_file_pathChanging(value)
				Me.SendPropertyChanging
				Me._original_file_path = value
				Me.SendPropertyChanged("original_file_path")
				Me.Onoriginal_file_pathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon_description", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property icon_description() As String
		Get
			Return Me._icon_description
		End Get
		Set
			If (String.Equals(Me._icon_description, value) = false) Then
				Me.Onicon_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._icon_description = value
				Me.SendPropertyChanged("icon_description")
				Me.Onicon_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type", DbType:="VarChar(50)")>  _
	Public Property document_type() As String
		Get
			Return Me._document_type
		End Get
		Set
			If (String.Equals(Me._document_type, value) = false) Then
				Me.Ondocument_typeChanging(value)
				Me.SendPropertyChanging
				Me._document_type = value
				Me.SendPropertyChanged("document_type")
				Me.Ondocument_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_size", DbType:="Real")>  _
	Public Property file_size() As System.Nullable(Of Single)
		Get
			Return Me._file_size
		End Get
		Set
			If (Me._file_size.Equals(value) = false) Then
				Me.Onfile_sizeChanging(value)
				Me.SendPropertyChanging
				Me._file_size = value
				Me.SendPropertyChanged("file_size")
				Me.Onfile_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_user_id", DbType:="VarChar(30)")>  _
	Public Property update_user_id() As String
		Get
			Return Me._update_user_id
		End Get
		Set
			If (String.Equals(Me._update_user_id, value) = false) Then
				Me.Onupdate_user_idChanging(value)
				Me.SendPropertyChanging
				Me._update_user_id = value
				Me.SendPropertyChanged("update_user_id")
				Me.Onupdate_user_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_time", DbType:="DateTime")>  _
	Public Property update_time() As System.Nullable(Of Date)
		Get
			Return Me._update_time
		End Get
		Set
			If (Me._update_time.Equals(value) = false) Then
				Me.Onupdate_timeChanging(value)
				Me.SendPropertyChanging
				Me._update_time = value
				Me.SendPropertyChanged("update_time")
				Me.Onupdate_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expiry_date", DbType:="date")>  _
	Public Property expiry_date() As System.Nullable(Of Date)
		Get
			Return Me._expiry_date
		End Get
		Set
			If (Me._expiry_date.Equals(value) = false) Then
				Me.Onexpiry_dateChanging(value)
				Me.SendPropertyChanging
				Me._expiry_date = value
				Me.SendPropertyChanged("expiry_date")
				Me.Onexpiry_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_document_type", CanBeNull:=false)>  _
	Public Property original_document_type() As String
		Get
			Return Me._original_document_type
		End Get
		Set
			If (String.Equals(Me._original_document_type, value) = false) Then
				Me.Onoriginal_document_typeChanging(value)
				Me.SendPropertyChanging
				Me._original_document_type = value
				Me.SendPropertyChanged("original_document_type")
				Me.Onoriginal_document_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_expiry_date")>  _
	Public Property original_expiry_date() As System.Nullable(Of Date)
		Get
			Return Me._original_expiry_date
		End Get
		Set
			If (Me._original_expiry_date.Equals(value) = false) Then
				Me.Onoriginal_expiry_dateChanging(value)
				Me.SendPropertyChanging
				Me._original_expiry_date = value
				Me.SendPropertyChanged("original_expiry_date")
				Me.Onoriginal_expiry_dateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.kpi_config")>  _
Partial Public Class kpi_config
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _kpi_type_id As Byte
	
	Private _threshold As Decimal
	
	Private _kpi_status_id As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onkpi_type_idChanging(value As Byte)
    End Sub
    Partial Private Sub Onkpi_type_idChanged()
    End Sub
    Partial Private Sub OnthresholdChanging(value As Decimal)
    End Sub
    Partial Private Sub OnthresholdChanged()
    End Sub
    Partial Private Sub Onkpi_status_idChanging(value As Byte)
    End Sub
    Partial Private Sub Onkpi_status_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_type_id", DbType:="TinyInt NOT NULL")>  _
	Public Property kpi_type_id() As Byte
		Get
			Return Me._kpi_type_id
		End Get
		Set
			If ((Me._kpi_type_id = value)  _
						= false) Then
				Me.Onkpi_type_idChanging(value)
				Me.SendPropertyChanging
				Me._kpi_type_id = value
				Me.SendPropertyChanged("kpi_type_id")
				Me.Onkpi_type_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_threshold", DbType:="Decimal(15,2) NOT NULL")>  _
	Public Property threshold() As Decimal
		Get
			Return Me._threshold
		End Get
		Set
			If ((Me._threshold = value)  _
						= false) Then
				Me.OnthresholdChanging(value)
				Me.SendPropertyChanging
				Me._threshold = value
				Me.SendPropertyChanged("threshold")
				Me.OnthresholdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_status_id", DbType:="TinyInt NOT NULL")>  _
	Public Property kpi_status_id() As Byte
		Get
			Return Me._kpi_status_id
		End Get
		Set
			If ((Me._kpi_status_id = value)  _
						= false) Then
				Me.Onkpi_status_idChanging(value)
				Me.SendPropertyChanging
				Me._kpi_status_id = value
				Me.SendPropertyChanged("kpi_status_id")
				Me.Onkpi_status_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class gpi
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gpi As String
	
	Private _description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngpiChanging(value As String)
    End Sub
    Partial Private Sub OngpiChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me.OngpiChanging(value)
				Me.SendPropertyChanging
				Me._gpi = value
				Me.SendPropertyChanged("gpi")
				Me.OngpiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class contract_detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _customer_contract_number As String
	
	Private _contract_expiry_date As System.Nullable(Of Date)
	
	Private _contract_base_type As String
	
	Private _contract_quantity As System.Nullable(Of Decimal)
	
	Private _contract_quantity_consumed As System.Nullable(Of Decimal)
	
	Private _psl_ids As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Oncustomer_contract_numberChanging(value As String)
    End Sub
    Partial Private Sub Oncustomer_contract_numberChanged()
    End Sub
    Partial Private Sub Oncontract_expiry_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncontract_expiry_dateChanged()
    End Sub
    Partial Private Sub Oncontract_base_typeChanging(value As String)
    End Sub
    Partial Private Sub Oncontract_base_typeChanged()
    End Sub
    Partial Private Sub Oncontract_quantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Oncontract_quantityChanged()
    End Sub
    Partial Private Sub Oncontract_quantity_consumedChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Oncontract_quantity_consumedChanged()
    End Sub
    Partial Private Sub Onpsl_idsChanging(value As String)
    End Sub
    Partial Private Sub Onpsl_idsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_contract_number", DbType:="varchar(25)", CanBeNull:=false)>  _
	Public Property customer_contract_number() As String
		Get
			Return Me._customer_contract_number
		End Get
		Set
			If (String.Equals(Me._customer_contract_number, value) = false) Then
				Me.Oncustomer_contract_numberChanging(value)
				Me.SendPropertyChanging
				Me._customer_contract_number = value
				Me.SendPropertyChanged("customer_contract_number")
				Me.Oncustomer_contract_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_expiry_date", DbType:="date")>  _
	Public Property contract_expiry_date() As System.Nullable(Of Date)
		Get
			Return Me._contract_expiry_date
		End Get
		Set
			If (Me._contract_expiry_date.Equals(value) = false) Then
				Me.Oncontract_expiry_dateChanging(value)
				Me.SendPropertyChanging
				Me._contract_expiry_date = value
				Me.SendPropertyChanged("contract_expiry_date")
				Me.Oncontract_expiry_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_base_type", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property contract_base_type() As String
		Get
			Return Me._contract_base_type
		End Get
		Set
			If (String.Equals(Me._contract_base_type, value) = false) Then
				Me.Oncontract_base_typeChanging(value)
				Me.SendPropertyChanging
				Me._contract_base_type = value
				Me.SendPropertyChanged("contract_base_type")
				Me.Oncontract_base_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_quantity", DbType:="decimal(15,2)")>  _
	Public Property contract_quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._contract_quantity
		End Get
		Set
			If (Me._contract_quantity.Equals(value) = false) Then
				Me.Oncontract_quantityChanging(value)
				Me.SendPropertyChanging
				Me._contract_quantity = value
				Me.SendPropertyChanged("contract_quantity")
				Me.Oncontract_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_quantity_consumed", DbType:="decimal(15,2)")>  _
	Public Property contract_quantity_consumed() As System.Nullable(Of Decimal)
		Get
			Return Me._contract_quantity_consumed
		End Get
		Set
			If (Me._contract_quantity_consumed.Equals(value) = false) Then
				Me.Oncontract_quantity_consumedChanging(value)
				Me.SendPropertyChanging
				Me._contract_quantity_consumed = value
				Me.SendPropertyChanged("contract_quantity_consumed")
				Me.Oncontract_quantity_consumedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_ids", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property psl_ids() As String
		Get
			Return Me._psl_ids
		End Get
		Set
			If (String.Equals(Me._psl_ids, value) = false) Then
				Me.Onpsl_idsChanging(value)
				Me.SendPropertyChanging
				Me._psl_ids = value
				Me.SendPropertyChanged("psl_ids")
				Me.Onpsl_idsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.contract_user_access")>  _
Partial Public Class user_access
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _contract_rec_id As Integer
	
	Private _user_id As String
	
	Private _owner_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onuser_idChanging(value As String)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onowner_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onowner_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="contract_rec_id", Storage:="_contract_rec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._contract_rec_id
		End Get
		Set
			If ((Me._contract_rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._contract_rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owner_flag", DbType:="Bit NOT NULL")>  _
	Public Property owner_flag() As Boolean
		Get
			Return Me._owner_flag
		End Get
		Set
			If ((Me._owner_flag = value)  _
						= false) Then
				Me.Onowner_flagChanging(value)
				Me.SendPropertyChanging
				Me._owner_flag = value
				Me.SendPropertyChanged("owner_flag")
				Me.Onowner_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_employee_forecast")>  _
Partial Public Class v_employee_forecast
	
	Private _disp_id As Integer
	
	Private _psl As String
	
	Private _formatted_disp_id As String
	
	Private _job_start_date As System.Nullable(Of Date)
	
	Private _job_end_date As System.Nullable(Of Date)
	
	Private _status As Short
	
	Private _distdo_id As System.Nullable(Of Integer)
	
	Private _dist_name As String
	
	Private _service_list As String
	
	Private _rig_id As String
	
	Private _oilcomp_id As String
	
	Private _rig_name As String
	
	Private _employee_id As String
	
	Private _employee_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_start_date", DbType:="SmallDateTime")>  _
	Public Property job_start_date() As System.Nullable(Of Date)
		Get
			Return Me._job_start_date
		End Get
		Set
			If (Me._job_start_date.Equals(value) = false) Then
				Me._job_start_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_end_date", DbType:="DateTime")>  _
	Public Property job_end_date() As System.Nullable(Of Date)
		Get
			Return Me._job_end_date
		End Get
		Set
			If (Me._job_end_date.Equals(value) = false) Then
				Me._job_end_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distdo_id", DbType:="Int")>  _
	Public Property distdo_id() As System.Nullable(Of Integer)
		Get
			Return Me._distdo_id
		End Get
		Set
			If (Me._distdo_id.Equals(value) = false) Then
				Me._distdo_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_name", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property dist_name() As String
		Get
			Return Me._dist_name
		End Get
		Set
			If (String.Equals(Me._dist_name, value) = false) Then
				Me._dist_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list", DbType:="VarChar(2000)")>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me._service_list = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_id", DbType:="VarChar(40)")>  _
	Public Property rig_id() As String
		Get
			Return Me._rig_id
		End Get
		Set
			If (String.Equals(Me._rig_id, value) = false) Then
				Me._rig_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_name", DbType:="VarChar(100)")>  _
	Public Property rig_name() As String
		Get
			Return Me._rig_name
		End Get
		Set
			If (String.Equals(Me._rig_name, value) = false) Then
				Me._rig_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_name", DbType:="VarChar(25)")>  _
	Public Property employee_name() As String
		Get
			Return Me._employee_name
		End Get
		Set
			If (String.Equals(Me._employee_name, value) = false) Then
				Me._employee_name = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_ops_dashboard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _psl As String
	
	Private _formatted_disp_id As String
	
	Private _job_start_date As System.Nullable(Of Date)
	
	Private _job_end_date As System.Nullable(Of Date)
	
	Private _job_duration As System.Nullable(Of Integer)
	
	Private _status As Short
	
	Private _status_desc As String
	
	Private _well_name As String
	
	Private _truck As String
	
	Private _dist_id As Integer
	
	Private _dispatch_offline_flag As Boolean
	
	Private _comments As String
	
	Private _spec_req As String
	
	Private _critical_job_flag As Boolean
	
	Private _service_list As String
	
	Private _job_approved_state As Byte
	
	Private _current_driller_depth As System.Nullable(Of Single)
	
	Private _depth_measurement_unit As String
	
	Private _sales_order_number As String
	
	Private _engineer_list As String
	
	Private _total_fso_count As Integer
	
	Private _exported_fso_count As Integer
	
	Private _total_quote_count As Integer
	
	Private _exported_quote_count As Integer
	
	Private _operating_time As System.Nullable(Of Decimal)
	
	Private _lost_time As System.Nullable(Of Decimal)
	
	Private _productive_trip_count As Integer
	
	Private _lost_time_trip_count As Integer
	
	Private _incident_count As Integer
	
	Private _asset_selection_status As String
	
	Private _personnel_count As Integer
	
	Private _lqa_status As Short
	
	Private _rig_id As String
	
	Private _oilcomp_id As String
	
	Private _asset_pm_point_issue_flag As Boolean
	
	Private _data_changed_flag As Boolean
	
	Private _personnel_competency_status As System.Nullable(Of Integer)
	
	Private _original_job_start_date As System.Nullable(Of Date)
	
	Private _original_job_duration As System.Nullable(Of Integer)
	
	Private _npr_tool_flag As Boolean
	
	Private _aux_unit As String
	
	Private _max_temperature As System.Nullable(Of Single)
	
	Private _temperature_measurement_unit As String
	
	Private _max_pressure As System.Nullable(Of Single)
	
	Private _wellhead_pressure As System.Nullable(Of Single)
	
	Private _sea_floor_depth As System.Nullable(Of Single)
	
	Private _fluid_type As String
	
	Private _fluid_weight As System.Nullable(Of Single)
	
	Private _hole_size As System.Nullable(Of Single)
	
	Private _hole_size_measurement_unit As String
	
	Private _crew_finished_job_datetime As System.Nullable(Of Date)
	
	Private _max_depth As System.Nullable(Of Single)
	
	Private _revenue As System.Nullable(Of Decimal)
	
	Private _engineer_count As Integer
	
	Private _operator_count As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub OnpslChanging(value As String)
    End Sub
    Partial Private Sub OnpslChanged()
    End Sub
    Partial Private Sub Onformatted_disp_idChanging(value As String)
    End Sub
    Partial Private Sub Onformatted_disp_idChanged()
    End Sub
    Partial Private Sub Onjob_start_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onjob_start_dateChanged()
    End Sub
    Partial Private Sub Onjob_end_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onjob_end_dateChanged()
    End Sub
    Partial Private Sub Onjob_durationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onjob_durationChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As Short)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub Onstatus_descChanging(value As String)
    End Sub
    Partial Private Sub Onstatus_descChanged()
    End Sub
    Partial Private Sub Onwell_nameChanging(value As String)
    End Sub
    Partial Private Sub Onwell_nameChanged()
    End Sub
    Partial Private Sub OntruckChanging(value As String)
    End Sub
    Partial Private Sub OntruckChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub Ondispatch_offline_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ondispatch_offline_flagChanged()
    End Sub
    Partial Private Sub OncommentsChanging(value As String)
    End Sub
    Partial Private Sub OncommentsChanged()
    End Sub
    Partial Private Sub Onspec_reqChanging(value As String)
    End Sub
    Partial Private Sub Onspec_reqChanged()
    End Sub
    Partial Private Sub Oncritical_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncritical_job_flagChanged()
    End Sub
    Partial Private Sub Onservice_listChanging(value As String)
    End Sub
    Partial Private Sub Onservice_listChanged()
    End Sub
    Partial Private Sub Onjob_approved_stateChanging(value As Byte)
    End Sub
    Partial Private Sub Onjob_approved_stateChanged()
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncurrent_driller_depthChanged()
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ondepth_measurement_unitChanged()
    End Sub
    Partial Private Sub Onsales_order_numberChanging(value As String)
    End Sub
    Partial Private Sub Onsales_order_numberChanged()
    End Sub
    Partial Private Sub Onpersonnel_listChanging(value As String)
    End Sub
    Partial Private Sub Onpersonnel_listChanged()
    End Sub
    Partial Private Sub Ontotal_fso_countChanging(value As Integer)
    End Sub
    Partial Private Sub Ontotal_fso_countChanged()
    End Sub
    Partial Private Sub Onexported_fso_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onexported_fso_countChanged()
    End Sub
    Partial Private Sub Ontotal_quote_countChanging(value As Integer)
    End Sub
    Partial Private Sub Ontotal_quote_countChanged()
    End Sub
    Partial Private Sub Onexported_quote_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onexported_quote_countChanged()
    End Sub
    Partial Private Sub Onoperating_timeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onoperating_timeChanged()
    End Sub
    Partial Private Sub Onlost_timeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onlost_timeChanged()
    End Sub
    Partial Private Sub Onproductive_trip_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onproductive_trip_countChanged()
    End Sub
    Partial Private Sub Onlost_time_trip_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onlost_time_trip_countChanged()
    End Sub
    Partial Private Sub Onincident_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onincident_countChanged()
    End Sub
    Partial Private Sub Onasset_selection_statusChanging(value As String)
    End Sub
    Partial Private Sub Onasset_selection_statusChanged()
    End Sub
    Partial Private Sub Onpersonnel_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onpersonnel_countChanged()
    End Sub
    Partial Private Sub Onlqa_statusChanging(value As Short)
    End Sub
    Partial Private Sub Onlqa_statusChanged()
    End Sub
    Partial Private Sub Onrig_idChanging(value As String)
    End Sub
    Partial Private Sub Onrig_idChanged()
    End Sub
    Partial Private Sub Onoilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onoilcomp_idChanged()
    End Sub
    Partial Private Sub Onasset_pm_point_issue_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onasset_pm_point_issue_flagChanged()
    End Sub
    Partial Private Sub Ondata_changed_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ondata_changed_flagChanged()
    End Sub
    Partial Private Sub Onpersonnel_competency_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onpersonnel_competency_statusChanged()
    End Sub
    Partial Private Sub Onoriginal_job_start_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onoriginal_job_start_dateChanged()
    End Sub
    Partial Private Sub Onoriginal_job_durationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onoriginal_job_durationChanged()
    End Sub
    Partial Private Sub Onnpr_tool_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onnpr_tool_flagChanged()
    End Sub
    Partial Private Sub Onaux_unitChanging(value As String)
    End Sub
    Partial Private Sub Onaux_unitChanged()
    End Sub
    Partial Private Sub Onmax_temperatureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_temperatureChanged()
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Ontemperature_measurement_unitChanged()
    End Sub
    Partial Private Sub Onmax_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_pressureChanged()
    End Sub
    Partial Private Sub Onwellhead_pressureChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onwellhead_pressureChanged()
    End Sub
    Partial Private Sub Onsea_floor_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onsea_floor_depthChanged()
    End Sub
    Partial Private Sub Onfluid_typeChanging(value As String)
    End Sub
    Partial Private Sub Onfluid_typeChanged()
    End Sub
    Partial Private Sub Onfluid_weightChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onfluid_weightChanged()
    End Sub
    Partial Private Sub Onhole_sizeChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onhole_sizeChanged()
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanging(value As String)
    End Sub
    Partial Private Sub Onhole_size_measurement_unitChanged()
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncrew_finished_job_datetimeChanged()
    End Sub
    Partial Private Sub Onmax_depthChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Onmax_depthChanged()
    End Sub
    Partial Private Sub OnrevenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnrevenueChanged()
    End Sub
    Partial Private Sub Onengineer_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onengineer_countChanged()
    End Sub
    Partial Private Sub Onoperator_countChanging(value As Integer)
    End Sub
    Partial Private Sub Onoperator_countChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="char(2)", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me.OnpslChanging(value)
				Me.SendPropertyChanging
				Me._psl = value
				Me.SendPropertyChanged("psl")
				Me.OnpslChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", CanBeNull:=false)>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me.Onformatted_disp_idChanging(value)
				Me.SendPropertyChanging
				Me._formatted_disp_id = value
				Me.SendPropertyChanged("formatted_disp_id")
				Me.Onformatted_disp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_start_date", DbType:="smalldatetime")>  _
	Public Property job_start_date() As System.Nullable(Of Date)
		Get
			Return Me._job_start_date
		End Get
		Set
			If (Me._job_start_date.Equals(value) = false) Then
				Me.Onjob_start_dateChanging(value)
				Me.SendPropertyChanging
				Me._job_start_date = value
				Me.SendPropertyChanged("job_start_date")
				Me.Onjob_start_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_end_date", DbType:="smalldatetime")>  _
	Public Property job_end_date() As System.Nullable(Of Date)
		Get
			Return Me._job_end_date
		End Get
		Set
			If (Me._job_end_date.Equals(value) = false) Then
				Me.Onjob_end_dateChanging(value)
				Me.SendPropertyChanging
				Me._job_end_date = value
				Me.SendPropertyChanged("job_end_date")
				Me.Onjob_end_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_duration", DbType:="int")>  _
	Public Property job_duration() As System.Nullable(Of Integer)
		Get
			Return Me._job_duration
		End Get
		Set
			If (Me._job_duration.Equals(value) = false) Then
				Me.Onjob_durationChanging(value)
				Me.SendPropertyChanging
				Me._job_duration = value
				Me.SendPropertyChanged("job_duration")
				Me.Onjob_durationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="smallint")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_desc", CanBeNull:=false)>  _
	Public Property status_desc() As String
		Get
			Return Me._status_desc
		End Get
		Set
			If (String.Equals(Me._status_desc, value) = false) Then
				Me.Onstatus_descChanging(value)
				Me.SendPropertyChanging
				Me._status_desc = value
				Me.SendPropertyChanged("status_desc")
				Me.Onstatus_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", CanBeNull:=false)>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me.Onwell_nameChanging(value)
				Me.SendPropertyChanging
				Me._well_name = value
				Me.SendPropertyChanged("well_name")
				Me.Onwell_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", CanBeNull:=false)>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me.OntruckChanging(value)
				Me.SendPropertyChanging
				Me._truck = value
				Me.SendPropertyChanged("truck")
				Me.OntruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="int")>  _
	Public Property dist_id() As Integer
		Get
			Return Me._dist_id
		End Get
		Set
			If ((Me._dist_id = value)  _
						= false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_offline_flag", DbType:="bit")>  _
	Public Property dispatch_offline_flag() As Boolean
		Get
			Return Me._dispatch_offline_flag
		End Get
		Set
			If ((Me._dispatch_offline_flag = value)  _
						= false) Then
				Me.Ondispatch_offline_flagChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_offline_flag = value
				Me.SendPropertyChanged("dispatch_offline_flag")
				Me.Ondispatch_offline_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comments", CanBeNull:=false)>  _
	Public Property comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (String.Equals(Me._comments, value) = false) Then
				Me.OncommentsChanging(value)
				Me.SendPropertyChanging
				Me._comments = value
				Me.SendPropertyChanged("comments")
				Me.OncommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_spec_req", CanBeNull:=false)>  _
	Public Property spec_req() As String
		Get
			Return Me._spec_req
		End Get
		Set
			If (String.Equals(Me._spec_req, value) = false) Then
				Me.Onspec_reqChanging(value)
				Me.SendPropertyChanging
				Me._spec_req = value
				Me.SendPropertyChanged("spec_req")
				Me.Onspec_reqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_critical_job_flag", DbType:="bit")>  _
	Public Property critical_job_flag() As Boolean
		Get
			Return Me._critical_job_flag
		End Get
		Set
			If ((Me._critical_job_flag = value)  _
						= false) Then
				Me.Oncritical_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._critical_job_flag = value
				Me.SendPropertyChanged("critical_job_flag")
				Me.Oncritical_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list", CanBeNull:=false)>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me.Onservice_listChanging(value)
				Me.SendPropertyChanging
				Me._service_list = value
				Me.SendPropertyChanged("service_list")
				Me.Onservice_listChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_approved_state", DbType:="tinyint")>  _
	Public Property job_approved_state() As Byte
		Get
			Return Me._job_approved_state
		End Get
		Set
			If ((Me._job_approved_state = value)  _
						= false) Then
				Me.Onjob_approved_stateChanging(value)
				Me.SendPropertyChanging
				Me._job_approved_state = value
				Me.SendPropertyChanged("job_approved_state")
				Me.Onjob_approved_stateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_driller_depth", DbType:="real")>  _
	Public Property current_driller_depth() As System.Nullable(Of Single)
		Get
			Return Me._current_driller_depth
		End Get
		Set
			If (Me._current_driller_depth.Equals(value) = false) Then
				Me.Oncurrent_driller_depthChanging(value)
				Me.SendPropertyChanging
				Me._current_driller_depth = value
				Me.SendPropertyChanged("current_driller_depth")
				Me.Oncurrent_driller_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_measurement_unit", CanBeNull:=false)>  _
	Public Property depth_measurement_unit() As String
		Get
			Return Me._depth_measurement_unit
		End Get
		Set
			If (String.Equals(Me._depth_measurement_unit, value) = false) Then
				Me.Ondepth_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._depth_measurement_unit = value
				Me.SendPropertyChanged("depth_measurement_unit")
				Me.Ondepth_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_order_number", CanBeNull:=false)>  _
	Public Property sales_order_number() As String
		Get
			Return Me._sales_order_number
		End Get
		Set
			If (String.Equals(Me._sales_order_number, value) = false) Then
				Me.Onsales_order_numberChanging(value)
				Me.SendPropertyChanging
				Me._sales_order_number = value
				Me.SendPropertyChanged("sales_order_number")
				Me.Onsales_order_numberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_engineer_list", CanBeNull:=false)>  _
	Public Property personnel_list() As String
		Get
			Return Me._engineer_list
		End Get
		Set
			If (String.Equals(Me._engineer_list, value) = false) Then
				Me.Onpersonnel_listChanging(value)
				Me.SendPropertyChanging
				Me._engineer_list = value
				Me.SendPropertyChanged("personnel_list")
				Me.Onpersonnel_listChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_fso_count", DbType:="int")>  _
	Public Property total_fso_count() As Integer
		Get
			Return Me._total_fso_count
		End Get
		Set
			If ((Me._total_fso_count = value)  _
						= false) Then
				Me.Ontotal_fso_countChanging(value)
				Me.SendPropertyChanging
				Me._total_fso_count = value
				Me.SendPropertyChanged("total_fso_count")
				Me.Ontotal_fso_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_fso_count", DbType:="int")>  _
	Public Property exported_fso_count() As Integer
		Get
			Return Me._exported_fso_count
		End Get
		Set
			If ((Me._exported_fso_count = value)  _
						= false) Then
				Me.Onexported_fso_countChanging(value)
				Me.SendPropertyChanging
				Me._exported_fso_count = value
				Me.SendPropertyChanged("exported_fso_count")
				Me.Onexported_fso_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_quote_count", DbType:="int")>  _
	Public Property total_quote_count() As Integer
		Get
			Return Me._total_quote_count
		End Get
		Set
			If ((Me._total_quote_count = value)  _
						= false) Then
				Me.Ontotal_quote_countChanging(value)
				Me.SendPropertyChanging
				Me._total_quote_count = value
				Me.SendPropertyChanged("total_quote_count")
				Me.Ontotal_quote_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_quote_count", DbType:="int")>  _
	Public Property exported_quote_count() As Integer
		Get
			Return Me._exported_quote_count
		End Get
		Set
			If ((Me._exported_quote_count = value)  _
						= false) Then
				Me.Onexported_quote_countChanging(value)
				Me.SendPropertyChanging
				Me._exported_quote_count = value
				Me.SendPropertyChanged("exported_quote_count")
				Me.Onexported_quote_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time", DbType:="decimal(6,2)")>  _
	Public Property operating_time() As System.Nullable(Of Decimal)
		Get
			Return Me._operating_time
		End Get
		Set
			If (Me._operating_time.Equals(value) = false) Then
				Me.Onoperating_timeChanging(value)
				Me.SendPropertyChanging
				Me._operating_time = value
				Me.SendPropertyChanged("operating_time")
				Me.Onoperating_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time", DbType:="decimal(6,2)")>  _
	Public Property lost_time() As System.Nullable(Of Decimal)
		Get
			Return Me._lost_time
		End Get
		Set
			If (Me._lost_time.Equals(value) = false) Then
				Me.Onlost_timeChanging(value)
				Me.SendPropertyChanging
				Me._lost_time = value
				Me.SendPropertyChanged("lost_time")
				Me.Onlost_timeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productive_trip_count", DbType:="int")>  _
	Public Property productive_trip_count() As Integer
		Get
			Return Me._productive_trip_count
		End Get
		Set
			If ((Me._productive_trip_count = value)  _
						= false) Then
				Me.Onproductive_trip_countChanging(value)
				Me.SendPropertyChanging
				Me._productive_trip_count = value
				Me.SendPropertyChanged("productive_trip_count")
				Me.Onproductive_trip_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_trip_count", DbType:="int")>  _
	Public Property lost_time_trip_count() As Integer
		Get
			Return Me._lost_time_trip_count
		End Get
		Set
			If ((Me._lost_time_trip_count = value)  _
						= false) Then
				Me.Onlost_time_trip_countChanging(value)
				Me.SendPropertyChanging
				Me._lost_time_trip_count = value
				Me.SendPropertyChanged("lost_time_trip_count")
				Me.Onlost_time_trip_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_count", DbType:="int")>  _
	Public Property incident_count() As Integer
		Get
			Return Me._incident_count
		End Get
		Set
			If ((Me._incident_count = value)  _
						= false) Then
				Me.Onincident_countChanging(value)
				Me.SendPropertyChanging
				Me._incident_count = value
				Me.SendPropertyChanged("incident_count")
				Me.Onincident_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_selection_status", CanBeNull:=false)>  _
	Public Property asset_selection_status() As String
		Get
			Return Me._asset_selection_status
		End Get
		Set
			If (String.Equals(Me._asset_selection_status, value) = false) Then
				Me.Onasset_selection_statusChanging(value)
				Me.SendPropertyChanging
				Me._asset_selection_status = value
				Me.SendPropertyChanged("asset_selection_status")
				Me.Onasset_selection_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_personnel_count", DbType:="int")>  _
	Public Property personnel_count() As Integer
		Get
			Return Me._personnel_count
		End Get
		Set
			If ((Me._personnel_count = value)  _
						= false) Then
				Me.Onpersonnel_countChanging(value)
				Me.SendPropertyChanging
				Me._personnel_count = value
				Me.SendPropertyChanged("personnel_count")
				Me.Onpersonnel_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_status", DbType:="smallint")>  _
	Public Property lqa_status() As Short
		Get
			Return Me._lqa_status
		End Get
		Set
			If ((Me._lqa_status = value)  _
						= false) Then
				Me.Onlqa_statusChanging(value)
				Me.SendPropertyChanging
				Me._lqa_status = value
				Me.SendPropertyChanged("lqa_status")
				Me.Onlqa_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_id", CanBeNull:=false)>  _
	Public Property rig_id() As String
		Get
			Return Me._rig_id
		End Get
		Set
			If (String.Equals(Me._rig_id, value) = false) Then
				Me.Onrig_idChanging(value)
				Me.SendPropertyChanging
				Me._rig_id = value
				Me.SendPropertyChanged("rig_id")
				Me.Onrig_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", CanBeNull:=false)>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me.Onoilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._oilcomp_id = value
				Me.SendPropertyChanged("oilcomp_id")
				Me.Onoilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_pm_point_issue_flag", DbType:="bit")>  _
	Public Property asset_pm_point_issue_flag() As Boolean
		Get
			Return Me._asset_pm_point_issue_flag
		End Get
		Set
			If ((Me._asset_pm_point_issue_flag = value)  _
						= false) Then
				Me.Onasset_pm_point_issue_flagChanging(value)
				Me.SendPropertyChanging
				Me._asset_pm_point_issue_flag = value
				Me.SendPropertyChanged("asset_pm_point_issue_flag")
				Me.Onasset_pm_point_issue_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_changed_flag")>  _
	Public Property data_changed_flag() As Boolean
		Get
			Return Me._data_changed_flag
		End Get
		Set
			If ((Me._data_changed_flag = value)  _
						= false) Then
				Me.Ondata_changed_flagChanging(value)
				Me.SendPropertyChanging
				Me._data_changed_flag = value
				Me.SendPropertyChanged("data_changed_flag")
				Me.Ondata_changed_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_personnel_competency_status", DbType:="int")>  _
	Public Property personnel_competency_status() As System.Nullable(Of Integer)
		Get
			Return Me._personnel_competency_status
		End Get
		Set
			If (Me._personnel_competency_status.Equals(value) = false) Then
				Me.Onpersonnel_competency_statusChanging(value)
				Me.SendPropertyChanging
				Me._personnel_competency_status = value
				Me.SendPropertyChanged("personnel_competency_status")
				Me.Onpersonnel_competency_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_job_start_date", DbType:="smalldatetime")>  _
	Public Property original_job_start_date() As System.Nullable(Of Date)
		Get
			Return Me._original_job_start_date
		End Get
		Set
			If (Me._original_job_start_date.Equals(value) = false) Then
				Me.Onoriginal_job_start_dateChanging(value)
				Me.SendPropertyChanging
				Me._original_job_start_date = value
				Me.SendPropertyChanged("original_job_start_date")
				Me.Onoriginal_job_start_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_job_duration", DbType:="int")>  _
	Public Property original_job_duration() As System.Nullable(Of Integer)
		Get
			Return Me._original_job_duration
		End Get
		Set
			If (Me._original_job_duration.Equals(value) = false) Then
				Me.Onoriginal_job_durationChanging(value)
				Me.SendPropertyChanging
				Me._original_job_duration = value
				Me.SendPropertyChanged("original_job_duration")
				Me.Onoriginal_job_durationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_npr_tool_flag", DbType:="bit")>  _
	Public Property npr_tool_flag() As Boolean
		Get
			Return Me._npr_tool_flag
		End Get
		Set
			If ((Me._npr_tool_flag = value)  _
						= false) Then
				Me.Onnpr_tool_flagChanging(value)
				Me.SendPropertyChanging
				Me._npr_tool_flag = value
				Me.SendPropertyChanged("npr_tool_flag")
				Me.Onnpr_tool_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aux_unit", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property aux_unit() As String
		Get
			Return Me._aux_unit
		End Get
		Set
			If (String.Equals(Me._aux_unit, value) = false) Then
				Me.Onaux_unitChanging(value)
				Me.SendPropertyChanging
				Me._aux_unit = value
				Me.SendPropertyChanged("aux_unit")
				Me.Onaux_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_temperature", DbType:="real")>  _
	Public Property max_temperature() As System.Nullable(Of Single)
		Get
			Return Me._max_temperature
		End Get
		Set
			If (Me._max_temperature.Equals(value) = false) Then
				Me.Onmax_temperatureChanging(value)
				Me.SendPropertyChanging
				Me._max_temperature = value
				Me.SendPropertyChanged("max_temperature")
				Me.Onmax_temperatureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_temperature_measurement_unit", CanBeNull:=false)>  _
	Public Property temperature_measurement_unit() As String
		Get
			Return Me._temperature_measurement_unit
		End Get
		Set
			If (String.Equals(Me._temperature_measurement_unit, value) = false) Then
				Me.Ontemperature_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._temperature_measurement_unit = value
				Me.SendPropertyChanged("temperature_measurement_unit")
				Me.Ontemperature_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_pressure", DbType:="real")>  _
	Public Property max_pressure() As System.Nullable(Of Single)
		Get
			Return Me._max_pressure
		End Get
		Set
			If (Me._max_pressure.Equals(value) = false) Then
				Me.Onmax_pressureChanging(value)
				Me.SendPropertyChanging
				Me._max_pressure = value
				Me.SendPropertyChanged("max_pressure")
				Me.Onmax_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wellhead_pressure", DbType:="real")>  _
	Public Property wellhead_pressure() As System.Nullable(Of Single)
		Get
			Return Me._wellhead_pressure
		End Get
		Set
			If (Me._wellhead_pressure.Equals(value) = false) Then
				Me.Onwellhead_pressureChanging(value)
				Me.SendPropertyChanging
				Me._wellhead_pressure = value
				Me.SendPropertyChanged("wellhead_pressure")
				Me.Onwellhead_pressureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sea_floor_depth", DbType:="real")>  _
	Public Property sea_floor_depth() As System.Nullable(Of Single)
		Get
			Return Me._sea_floor_depth
		End Get
		Set
			If (Me._sea_floor_depth.Equals(value) = false) Then
				Me.Onsea_floor_depthChanging(value)
				Me.SendPropertyChanging
				Me._sea_floor_depth = value
				Me.SendPropertyChanged("sea_floor_depth")
				Me.Onsea_floor_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_type", DbType:="varchar(50)", CanBeNull:=false)>  _
	Public Property fluid_type() As String
		Get
			Return Me._fluid_type
		End Get
		Set
			If (String.Equals(Me._fluid_type, value) = false) Then
				Me.Onfluid_typeChanging(value)
				Me.SendPropertyChanging
				Me._fluid_type = value
				Me.SendPropertyChanged("fluid_type")
				Me.Onfluid_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fluid_weight", DbType:="real")>  _
	Public Property fluid_weight() As System.Nullable(Of Single)
		Get
			Return Me._fluid_weight
		End Get
		Set
			If (Me._fluid_weight.Equals(value) = false) Then
				Me.Onfluid_weightChanging(value)
				Me.SendPropertyChanging
				Me._fluid_weight = value
				Me.SendPropertyChanged("fluid_weight")
				Me.Onfluid_weightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hole_size", DbType:="real")>  _
	Public Property hole_size() As System.Nullable(Of Single)
		Get
			Return Me._hole_size
		End Get
		Set
			If (Me._hole_size.Equals(value) = false) Then
				Me.Onhole_sizeChanging(value)
				Me.SendPropertyChanging
				Me._hole_size = value
				Me.SendPropertyChanged("hole_size")
				Me.Onhole_sizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hole_size_measurement_unit", CanBeNull:=false)>  _
	Public Property hole_size_measurement_unit() As String
		Get
			Return Me._hole_size_measurement_unit
		End Get
		Set
			If (String.Equals(Me._hole_size_measurement_unit, value) = false) Then
				Me.Onhole_size_measurement_unitChanging(value)
				Me.SendPropertyChanging
				Me._hole_size_measurement_unit = value
				Me.SendPropertyChanged("hole_size_measurement_unit")
				Me.Onhole_size_measurement_unitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_finished_job_datetime", DbType:="smalldatetime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_finished_job_datetime
		End Get
		Set
			If (Me._crew_finished_job_datetime.Equals(value) = false) Then
				Me.Oncrew_finished_job_datetimeChanging(value)
				Me.SendPropertyChanging
				Me._crew_finished_job_datetime = value
				Me.SendPropertyChanged("crew_finished_job_datetime")
				Me.Oncrew_finished_job_datetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_depth", DbType:="real")>  _
	Public Property max_depth() As System.Nullable(Of Single)
		Get
			Return Me._max_depth
		End Get
		Set
			If (Me._max_depth.Equals(value) = false) Then
				Me.Onmax_depthChanging(value)
				Me.SendPropertyChanging
				Me._max_depth = value
				Me.SendPropertyChanged("max_depth")
				Me.Onmax_depthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue", DbType:="decimal(15, 2)")>  _
	Public Property revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._revenue
		End Get
		Set
			If (Me._revenue.Equals(value) = false) Then
				Me.OnrevenueChanging(value)
				Me.SendPropertyChanging
				Me._revenue = value
				Me.SendPropertyChanged("revenue")
				Me.OnrevenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_engineer_count", DbType:="int")>  _
	Public Property engineer_count() As Integer
		Get
			Return Me._engineer_count
		End Get
		Set
			If ((Me._engineer_count = value)  _
						= false) Then
				Me.Onengineer_countChanging(value)
				Me.SendPropertyChanging
				Me._engineer_count = value
				Me.SendPropertyChanged("engineer_count")
				Me.Onengineer_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operator_count", DbType:="int")>  _
	Public Property operator_count() As Integer
		Get
			Return Me._operator_count
		End Get
		Set
			If ((Me._operator_count = value)  _
						= false) Then
				Me.Onoperator_countChanging(value)
				Me.SendPropertyChanging
				Me._operator_count = value
				Me.SendPropertyChanged("operator_count")
				Me.Onoperator_countChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class disp_equipment_header
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _disp_id As Integer
	
	Private _equipment_required_flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onequipment_required_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onequipment_required_flagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="int", IsPrimaryKey:=true)>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_required_flag", DbType:="bit")>  _
	Public Property equipment_required_flag() As Boolean
		Get
			Return Me._equipment_required_flag
		End Get
		Set
			If ((Me._equipment_required_flag = value)  _
						= false) Then
				Me.Onequipment_required_flagChanging(value)
				Me.SendPropertyChanging
				Me._equipment_required_flag = value
				Me.SendPropertyChanged("equipment_required_flag")
				Me.Onequipment_required_flagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.revenue_forecast_qmi")>  _
Partial Public Class revenue_forecast_qmi
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _year As Integer
	
	Private _quarter As Integer
	
	Private _dist_id As Integer
	
	Private _qmi As System.Nullable(Of Decimal)
	
	Private _new_rec_flag As Boolean
	
	Private _dist_name As String
	
	Private _previous_quarter_total As System.Nullable(Of Decimal)
	
	Private _period1_total As System.Nullable(Of Decimal)
	
	Private _period2_total As System.Nullable(Of Decimal)
	
	Private _period3_total As System.Nullable(Of Decimal)
	
	Private _quarter_total As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnyearChanging(value As Integer)
    End Sub
    Partial Private Sub OnyearChanged()
    End Sub
    Partial Private Sub OnquarterChanging(value As Integer)
    End Sub
    Partial Private Sub OnquarterChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub OnqmiChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnqmiChanged()
    End Sub
    Partial Private Sub Onnew_rec_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Onnew_rec_flagChanged()
    End Sub
    Partial Private Sub Ondist_nameChanging(value As String)
    End Sub
    Partial Private Sub Ondist_nameChanged()
    End Sub
    Partial Private Sub Onprevious_quarter_totalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onprevious_quarter_totalChanged()
    End Sub
    Partial Private Sub Onperiod1_totalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onperiod1_totalChanged()
    End Sub
    Partial Private Sub Onperiod2_totalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onperiod2_totalChanged()
    End Sub
    Partial Private Sub Onperiod3_totalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onperiod3_totalChanged()
    End Sub
    Partial Private Sub Onquarter_totalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onquarter_totalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_year", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property year() As Integer
		Get
			Return Me._year
		End Get
		Set
			If ((Me._year = value)  _
						= false) Then
				Me.OnyearChanging(value)
				Me.SendPropertyChanging
				Me._year = value
				Me.SendPropertyChanged("year")
				Me.OnyearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quarter", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property quarter() As Integer
		Get
			Return Me._quarter
		End Get
		Set
			If ((Me._quarter = value)  _
						= false) Then
				Me.OnquarterChanging(value)
				Me.SendPropertyChanging
				Me._quarter = value
				Me.SendPropertyChanged("quarter")
				Me.OnquarterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property dist_id() As Integer
		Get
			Return Me._dist_id
		End Get
		Set
			If ((Me._dist_id = value)  _
						= false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qmi", DbType:="Decimal(15,2) ")>  _
	Public Property qmi() As System.Nullable(Of Decimal)
		Get
			Return Me._qmi
		End Get
		Set
			If (Me._qmi.Equals(value) = false) Then
				Me.OnqmiChanging(value)
				Me.SendPropertyChanging
				Me._qmi = value
				Me.SendPropertyChanged("qmi")
				Me.OnqmiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_rec_flag", DbType:="bit")>  _
	Public Property new_rec_flag() As Boolean
		Get
			Return Me._new_rec_flag
		End Get
		Set
			If ((Me._new_rec_flag = value)  _
						= false) Then
				Me.Onnew_rec_flagChanging(value)
				Me.SendPropertyChanging
				Me._new_rec_flag = value
				Me.SendPropertyChanged("new_rec_flag")
				Me.Onnew_rec_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_name", CanBeNull:=false)>  _
	Public Property dist_name() As String
		Get
			Return Me._dist_name
		End Get
		Set
			If (String.Equals(Me._dist_name, value) = false) Then
				Me.Ondist_nameChanging(value)
				Me.SendPropertyChanging
				Me._dist_name = value
				Me.SendPropertyChanged("dist_name")
				Me.Ondist_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_previous_quarter_total")>  _
	Public Property previous_quarter_total() As System.Nullable(Of Decimal)
		Get
			Return Me._previous_quarter_total
		End Get
		Set
			If (Me._previous_quarter_total.Equals(value) = false) Then
				Me.Onprevious_quarter_totalChanging(value)
				Me.SendPropertyChanging
				Me._previous_quarter_total = value
				Me.SendPropertyChanged("previous_quarter_total")
				Me.Onprevious_quarter_totalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_period1_total")>  _
	Public Property period1_total() As System.Nullable(Of Decimal)
		Get
			Return Me._period1_total
		End Get
		Set
			If (Me._period1_total.Equals(value) = false) Then
				Me.Onperiod1_totalChanging(value)
				Me.SendPropertyChanging
				Me._period1_total = value
				Me.SendPropertyChanged("period1_total")
				Me.Onperiod1_totalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_period2_total")>  _
	Public Property period2_total() As System.Nullable(Of Decimal)
		Get
			Return Me._period2_total
		End Get
		Set
			If (Me._period2_total.Equals(value) = false) Then
				Me.Onperiod2_totalChanging(value)
				Me.SendPropertyChanging
				Me._period2_total = value
				Me.SendPropertyChanged("period2_total")
				Me.Onperiod2_totalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_period3_total")>  _
	Public Property period3_total() As System.Nullable(Of Decimal)
		Get
			Return Me._period3_total
		End Get
		Set
			If (Me._period3_total.Equals(value) = false) Then
				Me.Onperiod3_totalChanging(value)
				Me.SendPropertyChanging
				Me._period3_total = value
				Me.SendPropertyChanged("period3_total")
				Me.Onperiod3_totalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quarter_total")>  _
	Public Property quarter_total() As System.Nullable(Of Decimal)
		Get
			Return Me._quarter_total
		End Get
		Set
			If (Me._quarter_total.Equals(value) = false) Then
				Me.Onquarter_totalChanging(value)
				Me.SendPropertyChanging
				Me._quarter_total = value
				Me.SendPropertyChanged("quarter_total")
				Me.Onquarter_totalChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_esdisp_revenue_forecast")>  _
Partial Public Class revenue_forecast
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _psl As String
	
	Private _rec_id As Integer
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _formatted_disp_id As String
	
	Private _revenue_year As Integer
	
	Private _revenue_month As Integer
	
	Private _status As System.Nullable(Of Short)
	
	Private _status_desc As String
	
	Private _dist_id As Integer
	
	Private _oilcomp_id As String
	
	Private _well_name As String
	
	Private _service_list As String
	
	Private _sales_rep_employee_id As String
	
	Private _dispatch_offline_flag As Boolean
	
	Private _critical_job_flag As Boolean
	
	Private _job_approved_state As System.Nullable(Of Byte)
	
	Private _revenue As System.Nullable(Of Decimal)
	
	Private _optional_quote_revenue As System.Nullable(Of Decimal)
	
	Private _total_fso_count As System.Nullable(Of Integer)
	
	Private _exported_fso_count As System.Nullable(Of Integer)
	
	Private _total_quote_count As System.Nullable(Of Integer)
	
	Private _exported_quote_count As System.Nullable(Of Integer)
	
	Private _opportunity_revenue As System.Nullable(Of Decimal)
	
	Private _opportunity_probability As System.Nullable(Of Decimal)
	
	Private _risk_revenue As System.Nullable(Of Decimal)
	
	Private _risk_probability As System.Nullable(Of Decimal)
	
	Private _comment As String
	
	Private _main_quote_count As System.Nullable(Of Integer)
	
	Private _original_disp_revenue As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpslChanging(value As String)
    End Sub
    Partial Private Sub OnpslChanged()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Ondisp_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisp_idChanged()
    End Sub
    Partial Private Sub Onformatted_disp_idChanging(value As String)
    End Sub
    Partial Private Sub Onformatted_disp_idChanged()
    End Sub
    Partial Private Sub Onrevenue_yearChanging(value As Integer)
    End Sub
    Partial Private Sub Onrevenue_yearChanged()
    End Sub
    Partial Private Sub Onrevenue_monthChanging(value As Integer)
    End Sub
    Partial Private Sub Onrevenue_monthChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub Onstatus_descChanging(value As String)
    End Sub
    Partial Private Sub Onstatus_descChanged()
    End Sub
    Partial Private Sub Ondist_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondist_idChanged()
    End Sub
    Partial Private Sub Onoilcomp_idChanging(value As String)
    End Sub
    Partial Private Sub Onoilcomp_idChanged()
    End Sub
    Partial Private Sub Onwell_nameChanging(value As String)
    End Sub
    Partial Private Sub Onwell_nameChanged()
    End Sub
    Partial Private Sub Onservice_listChanging(value As String)
    End Sub
    Partial Private Sub Onservice_listChanged()
    End Sub
    Partial Private Sub Onsales_rep_employee_idChanging(value As String)
    End Sub
    Partial Private Sub Onsales_rep_employee_idChanged()
    End Sub
    Partial Private Sub Ondispatch_offline_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Ondispatch_offline_flagChanged()
    End Sub
    Partial Private Sub Oncritical_job_flagChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncritical_job_flagChanged()
    End Sub
    Partial Private Sub Onjob_approved_stateChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Onjob_approved_stateChanged()
    End Sub
    Partial Private Sub OnrevenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnrevenueChanged()
    End Sub
    Partial Private Sub Onoptional_revenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onoptional_revenueChanged()
    End Sub
    Partial Private Sub Ontotal_fso_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontotal_fso_countChanged()
    End Sub
    Partial Private Sub Onexported_fso_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onexported_fso_countChanged()
    End Sub
    Partial Private Sub Ontotal_quote_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontotal_quote_countChanged()
    End Sub
    Partial Private Sub Onexported_quote_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onexported_quote_countChanged()
    End Sub
    Partial Private Sub Onopportunity_revenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onopportunity_revenueChanged()
    End Sub
    Partial Private Sub Onopportunity_probabilityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onopportunity_probabilityChanged()
    End Sub
    Partial Private Sub Onrisk_revenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onrisk_revenueChanged()
    End Sub
    Partial Private Sub Onrisk_probabilityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onrisk_probabilityChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub Onmain_quote_countChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmain_quote_countChanged()
    End Sub
    Partial Private Sub Onoriginal_disp_revenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onoriginal_disp_revenueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="Char(2) ", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me.OnpslChanging(value)
				Me.SendPropertyChanging
				Me._psl = value
				Me.SendPropertyChanged("psl")
				Me.OnpslChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int", IsPrimaryKey:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me.Ondisp_idChanging(value)
				Me.SendPropertyChanging
				Me._disp_id = value
				Me.SendPropertyChanged("disp_id")
				Me.Ondisp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", CanBeNull:=false)>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me.Onformatted_disp_idChanging(value)
				Me.SendPropertyChanging
				Me._formatted_disp_id = value
				Me.SendPropertyChanged("formatted_disp_id")
				Me.Onformatted_disp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue_year", DbType:="int")>  _
	Public Property revenue_year() As Integer
		Get
			Return Me._revenue_year
		End Get
		Set
			If ((Me._revenue_year = value)  _
						= false) Then
				Me.Onrevenue_yearChanging(value)
				Me.SendPropertyChanging
				Me._revenue_year = value
				Me.SendPropertyChanged("revenue_year")
				Me.Onrevenue_yearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue_month", DbType:="int")>  _
	Public Property revenue_month() As Integer
		Get
			Return Me._revenue_month
		End Get
		Set
			If ((Me._revenue_month = value)  _
						= false) Then
				Me.Onrevenue_monthChanging(value)
				Me.SendPropertyChanging
				Me._revenue_month = value
				Me.SendPropertyChanged("revenue_month")
				Me.Onrevenue_monthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="smallint")>  _
	Public Property status() As System.Nullable(Of Short)
		Get
			Return Me._status
		End Get
		Set
			If (Me._status.Equals(value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_desc", CanBeNull:=false)>  _
	Public Property status_desc() As String
		Get
			Return Me._status_desc
		End Get
		Set
			If (String.Equals(Me._status_desc, value) = false) Then
				Me.Onstatus_descChanging(value)
				Me.SendPropertyChanging
				Me._status_desc = value
				Me.SendPropertyChanged("status_desc")
				Me.Onstatus_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="int")>  _
	Public Property dist_id() As Integer
		Get
			Return Me._dist_id
		End Get
		Set
			If ((Me._dist_id = value)  _
						= false) Then
				Me.Ondist_idChanging(value)
				Me.SendPropertyChanging
				Me._dist_id = value
				Me.SendPropertyChanged("dist_id")
				Me.Ondist_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", CanBeNull:=false)>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me.Onoilcomp_idChanging(value)
				Me.SendPropertyChanging
				Me._oilcomp_id = value
				Me.SendPropertyChanged("oilcomp_id")
				Me.Onoilcomp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", CanBeNull:=false)>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me.Onwell_nameChanging(value)
				Me.SendPropertyChanging
				Me._well_name = value
				Me.SendPropertyChanged("well_name")
				Me.Onwell_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_list", CanBeNull:=false)>  _
	Public Property service_list() As String
		Get
			Return Me._service_list
		End Get
		Set
			If (String.Equals(Me._service_list, value) = false) Then
				Me.Onservice_listChanging(value)
				Me.SendPropertyChanging
				Me._service_list = value
				Me.SendPropertyChanged("service_list")
				Me.Onservice_listChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_rep_employee_id", CanBeNull:=false)>  _
	Public Property sales_rep_employee_id() As String
		Get
			Return Me._sales_rep_employee_id
		End Get
		Set
			If (String.Equals(Me._sales_rep_employee_id, value) = false) Then
				Me.Onsales_rep_employee_idChanging(value)
				Me.SendPropertyChanging
				Me._sales_rep_employee_id = value
				Me.SendPropertyChanged("sales_rep_employee_id")
				Me.Onsales_rep_employee_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_offline_flag", DbType:="bit")>  _
	Public Property dispatch_offline_flag() As Boolean
		Get
			Return Me._dispatch_offline_flag
		End Get
		Set
			If ((Me._dispatch_offline_flag = value)  _
						= false) Then
				Me.Ondispatch_offline_flagChanging(value)
				Me.SendPropertyChanging
				Me._dispatch_offline_flag = value
				Me.SendPropertyChanged("dispatch_offline_flag")
				Me.Ondispatch_offline_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_critical_job_flag", DbType:="bit")>  _
	Public Property critical_job_flag() As Boolean
		Get
			Return Me._critical_job_flag
		End Get
		Set
			If ((Me._critical_job_flag = value)  _
						= false) Then
				Me.Oncritical_job_flagChanging(value)
				Me.SendPropertyChanging
				Me._critical_job_flag = value
				Me.SendPropertyChanged("critical_job_flag")
				Me.Oncritical_job_flagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_approved_state", DbType:="tinyint")>  _
	Public Property job_approved_state() As System.Nullable(Of Byte)
		Get
			Return Me._job_approved_state
		End Get
		Set
			If (Me._job_approved_state.Equals(value) = false) Then
				Me.Onjob_approved_stateChanging(value)
				Me.SendPropertyChanging
				Me._job_approved_state = value
				Me.SendPropertyChanged("job_approved_state")
				Me.Onjob_approved_stateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue", DbType:="decimal(15,2)")>  _
	Public Property revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._revenue
		End Get
		Set
			If (Me._revenue.Equals(value) = false) Then
				Me.OnrevenueChanging(value)
				Me.SendPropertyChanging
				Me._revenue = value
				Me.SendPropertyChanged("revenue")
				Me.OnrevenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optional_quote_revenue", DbType:="decimal(15,2)")>  _
	Public Property optional_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._optional_quote_revenue
		End Get
		Set
			If (Me._optional_quote_revenue.Equals(value) = false) Then
				Me.Onoptional_revenueChanging(value)
				Me.SendPropertyChanging
				Me._optional_quote_revenue = value
				Me.SendPropertyChanged("optional_revenue")
				Me.Onoptional_revenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_fso_count", DbType:="int")>  _
	Public Property total_fso_count() As System.Nullable(Of Integer)
		Get
			Return Me._total_fso_count
		End Get
		Set
			If (Me._total_fso_count.Equals(value) = false) Then
				Me.Ontotal_fso_countChanging(value)
				Me.SendPropertyChanging
				Me._total_fso_count = value
				Me.SendPropertyChanged("total_fso_count")
				Me.Ontotal_fso_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_fso_count", DbType:="int")>  _
	Public Property exported_fso_count() As System.Nullable(Of Integer)
		Get
			Return Me._exported_fso_count
		End Get
		Set
			If (Me._exported_fso_count.Equals(value) = false) Then
				Me.Onexported_fso_countChanging(value)
				Me.SendPropertyChanging
				Me._exported_fso_count = value
				Me.SendPropertyChanged("exported_fso_count")
				Me.Onexported_fso_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_quote_count", DbType:="int")>  _
	Public Property total_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._total_quote_count
		End Get
		Set
			If (Me._total_quote_count.Equals(value) = false) Then
				Me.Ontotal_quote_countChanging(value)
				Me.SendPropertyChanging
				Me._total_quote_count = value
				Me.SendPropertyChanged("total_quote_count")
				Me.Ontotal_quote_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_quote_count", DbType:="int")>  _
	Public Property exported_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._exported_quote_count
		End Get
		Set
			If (Me._exported_quote_count.Equals(value) = false) Then
				Me.Onexported_quote_countChanging(value)
				Me.SendPropertyChanging
				Me._exported_quote_count = value
				Me.SendPropertyChanged("exported_quote_count")
				Me.Onexported_quote_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_opportunity_revenue", DbType:="decimal(15, 2)")>  _
	Public Property opportunity_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._opportunity_revenue
		End Get
		Set
			If (Me._opportunity_revenue.Equals(value) = false) Then
				Me.Onopportunity_revenueChanging(value)
				Me.SendPropertyChanging
				Me._opportunity_revenue = value
				Me.SendPropertyChanged("opportunity_revenue")
				Me.Onopportunity_revenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_opportunity_probability", DbType:="decimal(5,2)")>  _
	Public Property opportunity_probability() As System.Nullable(Of Decimal)
		Get
			Return Me._opportunity_probability
		End Get
		Set
			If (Me._opportunity_probability.Equals(value) = false) Then
				Me.Onopportunity_probabilityChanging(value)
				Me.SendPropertyChanging
				Me._opportunity_probability = value
				Me.SendPropertyChanged("opportunity_probability")
				Me.Onopportunity_probabilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_risk_revenue", DbType:="decimal(15,2)")>  _
	Public Property risk_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._risk_revenue
		End Get
		Set
			If (Me._risk_revenue.Equals(value) = false) Then
				Me.Onrisk_revenueChanging(value)
				Me.SendPropertyChanging
				Me._risk_revenue = value
				Me.SendPropertyChanged("risk_revenue")
				Me.Onrisk_revenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_risk_probability", DbType:="decimal(5,2)")>  _
	Public Property risk_probability() As System.Nullable(Of Decimal)
		Get
			Return Me._risk_probability
		End Get
		Set
			If (Me._risk_probability.Equals(value) = false) Then
				Me.Onrisk_probabilityChanging(value)
				Me.SendPropertyChanging
				Me._risk_probability = value
				Me.SendPropertyChanged("risk_probability")
				Me.Onrisk_probabilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", CanBeNull:=false)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_main_quote_count", DbType:="int")>  _
	Public Property main_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._main_quote_count
		End Get
		Set
			If (Me._main_quote_count.Equals(value) = false) Then
				Me.Onmain_quote_countChanging(value)
				Me.SendPropertyChanging
				Me._main_quote_count = value
				Me.SendPropertyChanged("main_quote_count")
				Me.Onmain_quote_countChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_disp_revenue", DbType:="decimal(15, 2)")>  _
	Public Property original_disp_revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._original_disp_revenue
		End Get
		Set
			If (Me._original_disp_revenue.Equals(value) = false) Then
				Me.Onoriginal_disp_revenueChanging(value)
				Me.SendPropertyChanging
				Me._original_disp_revenue = value
				Me.SendPropertyChanged("original_disp_revenue")
				Me.Onoriginal_disp_revenueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class GetListResult
	
	Private _list_item As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_list_item", DbType:="VarChar(50)")>  _
	Public Property list_item() As String
		Get
			Return Me._list_item
		End Get
		Set
			If (String.Equals(Me._list_item, value) = false) Then
				Me._list_item = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetStatusListResult
	
	Private _status As Short
	
	Private _descrip As String
	
	Private _status_definition As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descrip", DbType:="Char(11) NOT NULL", CanBeNull:=false)>  _
	Public Property descrip() As String
		Get
			Return Me._descrip
		End Get
		Set
			If (String.Equals(Me._descrip, value) = false) Then
				Me._descrip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_definition", DbType:="VarChar(250)")>  _
	Public Property status_definition() As String
		Get
			Return Me._status_definition
		End Get
		Set
			If (String.Equals(Me._status_definition, value) = false) Then
				Me._status_definition = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEnvironmentListResult
	
	Private _environment_id As Short
	
	Private _environment_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_environment_id", DbType:="SmallInt NOT NULL")>  _
	Public Property environment_id() As Short
		Get
			Return Me._environment_id
		End Get
		Set
			If ((Me._environment_id = value)  _
						= false) Then
				Me._environment_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_environment_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property environment_desc() As String
		Get
			Return Me._environment_desc
		End Get
		Set
			If (String.Equals(Me._environment_desc, value) = false) Then
				Me._environment_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetContactTypeListResult
	
	Private _contact_type_id As String
	
	Private _contact_type_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_type_id", DbType:="VarChar(5)")>  _
	Public Property contact_type_id() As String
		Get
			Return Me._contact_type_id
		End Get
		Set
			If (String.Equals(Me._contact_type_id, value) = false) Then
				Me._contact_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_type_desc", DbType:="VarChar(50)")>  _
	Public Property contact_type_desc() As String
		Get
			Return Me._contact_type_desc
		End Get
		Set
			If (String.Equals(Me._contact_type_desc, value) = false) Then
				Me._contact_type_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAvailListResult
	
	Private _avail_id As Short
	
	Private _description As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="SmallInt NOT NULL")>  _
	Public Property avail_id() As Short
		Get
			Return Me._avail_id
		End Get
		Set
			If ((Me._avail_id = value)  _
						= false) Then
				Me._avail_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="Char(20)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRunFailCodesResult
	
	Private _rec_id As Integer
	
	Private _what_id As String
	
	Private _what_desc As String
	
	Private _how_id As String
	
	Private _how_desc As String
	
	Private _when_id As System.Nullable(Of Integer)
	
	Private _when_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_what_id", DbType:="VarChar(5)")>  _
	Public Property what_id() As String
		Get
			Return Me._what_id
		End Get
		Set
			If (String.Equals(Me._what_id, value) = false) Then
				Me._what_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_what_desc", DbType:="VarChar(30)")>  _
	Public Property what_desc() As String
		Get
			Return Me._what_desc
		End Get
		Set
			If (String.Equals(Me._what_desc, value) = false) Then
				Me._what_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_how_id", DbType:="VarChar(5)")>  _
	Public Property how_id() As String
		Get
			Return Me._how_id
		End Get
		Set
			If (String.Equals(Me._how_id, value) = false) Then
				Me._how_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_how_desc", DbType:="VarChar(30)")>  _
	Public Property how_desc() As String
		Get
			Return Me._how_desc
		End Get
		Set
			If (String.Equals(Me._how_desc, value) = false) Then
				Me._how_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_when_id", DbType:="Int")>  _
	Public Property when_id() As System.Nullable(Of Integer)
		Get
			Return Me._when_id
		End Get
		Set
			If (Me._when_id.Equals(value) = false) Then
				Me._when_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_when_desc", DbType:="VarChar(30)")>  _
	Public Property when_desc() As String
		Get
			Return Me._when_desc
		End Get
		Set
			If (String.Equals(Me._when_desc, value) = false) Then
				Me._when_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetJsaListResult
	
	Private _rec_id As Integer
	
	Private _jsa_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_jsa_desc", DbType:="VarChar(50)")>  _
	Public Property jsa_desc() As String
		Get
			Return Me._jsa_desc
		End Get
		Set
			If (String.Equals(Me._jsa_desc, value) = false) Then
				Me._jsa_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckFsoQuoteNumberExistsResult
	
	Private _quote_number_exists As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number_exists", DbType:="Int NOT NULL")>  _
	Public Property quote_number_exists() As Integer
		Get
			Return Me._quote_number_exists
		End Get
		Set
			If ((Me._quote_number_exists = value)  _
						= false) Then
				Me._quote_number_exists = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetGroupIdsResult
	
	Private _group_id As String
	
	Private _plant_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_id", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property group_id() As String
		Get
			Return Me._group_id
		End Get
		Set
			If (String.Equals(Me._group_id, value) = false) Then
				Me._group_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="VarChar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class DeletePSDispAccountingServiceOrderResult
	
	Private _status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertPSDispAccountingServiceOrderResult
	
	Private _rec_id As Integer
	
	Private _disp_id As Integer
	
	Private _multi_stage_service_order_rec_id As System.Nullable(Of Integer)
	
	Private _field_ticket_number As String
	
	Private _field_ticket_received_date As System.Nullable(Of Date)
	
	Private _field_ticket_type_id As String
	
	Private _total_operating_hours As System.Nullable(Of Single)
	
	Private _zero_operating_hours_explanation As String
	
	Private _accounting_notes As String
	
	Private _revenue_discrepancy_explanation As String
	
	Private _oilcomp_id As String
	
	Private _operations_mode As System.Nullable(Of Boolean)
	
	Private _misrun As System.Nullable(Of Boolean)
	
	Private _sap_sales_order_number As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_multi_stage_service_order_rec_id", DbType:="Int")>  _
	Public Property multi_stage_service_order_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._multi_stage_service_order_rec_id
		End Get
		Set
			If (Me._multi_stage_service_order_rec_id.Equals(value) = false) Then
				Me._multi_stage_service_order_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_ticket_number", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property field_ticket_number() As String
		Get
			Return Me._field_ticket_number
		End Get
		Set
			If (String.Equals(Me._field_ticket_number, value) = false) Then
				Me._field_ticket_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_ticket_received_date", DbType:="SmallDateTime")>  _
	Public Property field_ticket_received_date() As System.Nullable(Of Date)
		Get
			Return Me._field_ticket_received_date
		End Get
		Set
			If (Me._field_ticket_received_date.Equals(value) = false) Then
				Me._field_ticket_received_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_ticket_type_id", DbType:="Char(5)")>  _
	Public Property field_ticket_type_id() As String
		Get
			Return Me._field_ticket_type_id
		End Get
		Set
			If (String.Equals(Me._field_ticket_type_id, value) = false) Then
				Me._field_ticket_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total_operating_hours", DbType:="Real")>  _
	Public Property total_operating_hours() As System.Nullable(Of Single)
		Get
			Return Me._total_operating_hours
		End Get
		Set
			If (Me._total_operating_hours.Equals(value) = false) Then
				Me._total_operating_hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zero_operating_hours_explanation", DbType:="VarChar(250)")>  _
	Public Property zero_operating_hours_explanation() As String
		Get
			Return Me._zero_operating_hours_explanation
		End Get
		Set
			If (String.Equals(Me._zero_operating_hours_explanation, value) = false) Then
				Me._zero_operating_hours_explanation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accounting_notes", DbType:="VarChar(MAX)")>  _
	Public Property accounting_notes() As String
		Get
			Return Me._accounting_notes
		End Get
		Set
			If (String.Equals(Me._accounting_notes, value) = false) Then
				Me._accounting_notes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue_discrepancy_explanation", DbType:="VarChar(250)")>  _
	Public Property revenue_discrepancy_explanation() As String
		Get
			Return Me._revenue_discrepancy_explanation
		End Get
		Set
			If (String.Equals(Me._revenue_discrepancy_explanation, value) = false) Then
				Me._revenue_discrepancy_explanation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operations_mode", DbType:="Bit")>  _
	Public Property operations_mode() As System.Nullable(Of Boolean)
		Get
			Return Me._operations_mode
		End Get
		Set
			If (Me._operations_mode.Equals(value) = false) Then
				Me._operations_mode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_misrun", DbType:="Bit")>  _
	Public Property misrun() As System.Nullable(Of Boolean)
		Get
			Return Me._misrun
		End Get
		Set
			If (Me._misrun.Equals(value) = false) Then
				Me._misrun = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_sales_order_number", DbType:="VarChar(20)")>  _
	Public Property sap_sales_order_number() As String
		Get
			Return Me._sap_sales_order_number
		End Get
		Set
			If (String.Equals(Me._sap_sales_order_number, value) = false) Then
				Me._sap_sales_order_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class DeletePSDispatchRecordResult
	
	Private _status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPreJobBriefTemplateRecordResult
	
	Private _template_id As Integer
	
	Private _created_datetime As Date
	
	Private _created_by As String
	
	Private _published_datetime As System.Nullable(Of Date)
	
	Private _published_by As String
	
	Private _latest_version As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_id", DbType:="Int NOT NULL")>  _
	Public Property template_id() As Integer
		Get
			Return Me._template_id
		End Get
		Set
			If ((Me._template_id = value)  _
						= false) Then
				Me._template_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_datetime", DbType:="SmallDateTime NOT NULL")>  _
	Public Property created_datetime() As Date
		Get
			Return Me._created_datetime
		End Get
		Set
			If ((Me._created_datetime = value)  _
						= false) Then
				Me._created_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_created_by", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property created_by() As String
		Get
			Return Me._created_by
		End Get
		Set
			If (String.Equals(Me._created_by, value) = false) Then
				Me._created_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_published_datetime", DbType:="SmallDateTime")>  _
	Public Property published_datetime() As System.Nullable(Of Date)
		Get
			Return Me._published_datetime
		End Get
		Set
			If (Me._published_datetime.Equals(value) = false) Then
				Me._published_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_published_by", DbType:="VarChar(20)")>  _
	Public Property published_by() As String
		Get
			Return Me._published_by
		End Get
		Set
			If (String.Equals(Me._published_by, value) = false) Then
				Me._published_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latest_version", DbType:="Int")>  _
	Public Property latest_version() As System.Nullable(Of Integer)
		Get
			Return Me._latest_version
		End Get
		Set
			If (Me._latest_version.Equals(value) = false) Then
				Me._latest_version = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetLqaQuestionListResult
	
	Private _lqa_question_rec_id As Integer
	
	Private _question_text As String
	
	Private _lqa_type_id As Integer
	
	Private _lqa_section_id As Integer
	
	Private _point_value As System.Nullable(Of Integer)
	
	Private _display_order As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_question_rec_id", DbType:="Int NOT NULL")>  _
	Public Property lqa_question_rec_id() As Integer
		Get
			Return Me._lqa_question_rec_id
		End Get
		Set
			If ((Me._lqa_question_rec_id = value)  _
						= false) Then
				Me._lqa_question_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question_text", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property question_text() As String
		Get
			Return Me._question_text
		End Get
		Set
			If (String.Equals(Me._question_text, value) = false) Then
				Me._question_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_type_id", DbType:="Int NOT NULL")>  _
	Public Property lqa_type_id() As Integer
		Get
			Return Me._lqa_type_id
		End Get
		Set
			If ((Me._lqa_type_id = value)  _
						= false) Then
				Me._lqa_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_section_id", DbType:="Int NOT NULL")>  _
	Public Property lqa_section_id() As Integer
		Get
			Return Me._lqa_section_id
		End Get
		Set
			If ((Me._lqa_section_id = value)  _
						= false) Then
				Me._lqa_section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_point_value", DbType:="Int")>  _
	Public Property point_value() As System.Nullable(Of Integer)
		Get
			Return Me._point_value
		End Get
		Set
			If (Me._point_value.Equals(value) = false) Then
				Me._point_value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int")>  _
	Public Property display_order() As System.Nullable(Of Integer)
		Get
			Return Me._display_order
		End Get
		Set
			If (Me._display_order.Equals(value) = false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispLqaReviewerUserAccessResult
	
	Private _reviewer As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reviewer", DbType:="Int NOT NULL")>  _
	Public Property reviewer() As Integer
		Get
			Return Me._reviewer
		End Get
		Set
			If ((Me._reviewer = value)  _
						= false) Then
				Me._reviewer = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoServiceTemplateRecordsResult
	
	Private _template_id As String
	
	Private _template_created_by As String
	
	Private _template_description As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_id", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property template_id() As String
		Get
			Return Me._template_id
		End Get
		Set
			If (String.Equals(Me._template_id, value) = false) Then
				Me._template_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_created_by", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property template_created_by() As String
		Get
			Return Me._template_created_by
		End Get
		Set
			If (String.Equals(Me._template_created_by, value) = false) Then
				Me._template_created_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_description", DbType:="VarChar(250)")>  _
	Public Property template_description() As String
		Get
			Return Me._template_description
		End Get
		Set
			If (String.Equals(Me._template_description, value) = false) Then
				Me._template_description = value
			End If
		End Set
	End Property
End Class

Partial Public Class CreateFsoSapExportIdResult
	
	Private _export_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_export_id", DbType:="VarChar(30)")>  _
	Public Property export_id() As String
		Get
			Return Me._export_id
		End Get
		Set
			If (String.Equals(Me._export_id, value) = false) Then
				Me._export_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class LastDispUpdateResult
	
	Private _last_upd As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_upd", DbType:="rowversion")>  _
	Public Property last_upd() As System.Data.Linq.Binary
		Get
			Return Me._last_upd
		End Get
		Set
			If (Object.Equals(Me._last_upd, value) = false) Then
				Me._last_upd = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCalendarDisplayConfigResult
	
	Private _psl As String
	
	Private _field_name As String
	
	Private _display_format As String
	
	Private _label_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property field_name() As String
		Get
			Return Me._field_name
		End Get
		Set
			If (String.Equals(Me._field_name, value) = false) Then
				Me._field_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_format", DbType:="VarChar(50)")>  _
	Public Property display_format() As String
		Get
			Return Me._display_format
		End Get
		Set
			If (String.Equals(Me._display_format, value) = false) Then
				Me._display_format = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_label_flag", DbType:="Bit NOT NULL")>  _
	Public Property label_flag() As Boolean
		Get
			Return Me._label_flag
		End Get
		Set
			If ((Me._label_flag = value)  _
						= false) Then
				Me._label_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSpecialServiceToolListResult
	
	Private _tool_id As String
	
	Private _descrip As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tool_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property tool_id() As String
		Get
			Return Me._tool_id
		End Get
		Set
			If (String.Equals(Me._tool_id, value) = false) Then
				Me._tool_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descrip", DbType:="VarChar(50)")>  _
	Public Property descrip() As String
		Get
			Return Me._descrip
		End Get
		Set
			If (String.Equals(Me._descrip, value) = false) Then
				Me._descrip = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchLookupDataChangeLogResult
	
	Private _lookup_list_name As String
	
	Private _required_version_number As Integer
	
	Private _last_change_datetime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lookup_list_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property lookup_list_name() As String
		Get
			Return Me._lookup_list_name
		End Get
		Set
			If (String.Equals(Me._lookup_list_name, value) = false) Then
				Me._lookup_list_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required_version_number", DbType:="Int NOT NULL")>  _
	Public Property required_version_number() As Integer
		Get
			Return Me._required_version_number
		End Get
		Set
			If ((Me._required_version_number = value)  _
						= false) Then
				Me._required_version_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_change_datetime", DbType:="SmallDateTime")>  _
	Public Property last_change_datetime() As System.Nullable(Of Date)
		Get
			Return Me._last_change_datetime
		End Get
		Set
			If (Me._last_change_datetime.Equals(value) = false) Then
				Me._last_change_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCompanySoldToItemsResult
	
	Private _oilcomp_id As String
	
	Private _sold_to_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="Int NOT NULL")>  _
	Public Property sold_to_id() As Integer
		Get
			Return Me._sold_to_id
		End Get
		Set
			If ((Me._sold_to_id = value)  _
						= false) Then
				Me._sold_to_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoServiceTemplateItemListResult
	
	Private _fso_service_template_id As String
	
	Private _gpi As String
	
	Private _item As String
	
	Private _row_number As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_service_template_id", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property fso_service_template_id() As String
		Get
			Return Me._fso_service_template_id
		End Get
		Set
			If (String.Equals(Me._fso_service_template_id, value) = false) Then
				Me._fso_service_template_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property item() As String
		Get
			Return Me._item
		End Get
		Set
			If (String.Equals(Me._item, value) = false) Then
				Me._item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int NOT NULL")>  _
	Public Property row_number() As Integer
		Get
			Return Me._row_number
		End Get
		Set
			If ((Me._row_number = value)  _
						= false) Then
				Me._row_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetForecastLoadoutStatusesResult
	
	Private _loadout_status_id As Integer
	
	Private _loadout_status_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_status_id", DbType:="Int NOT NULL")>  _
	Public Property loadout_status_id() As Integer
		Get
			Return Me._loadout_status_id
		End Get
		Set
			If ((Me._loadout_status_id = value)  _
						= false) Then
				Me._loadout_status_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_status_desc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property loadout_status_desc() As String
		Get
			Return Me._loadout_status_desc
		End Get
		Set
			If (String.Equals(Me._loadout_status_desc, value) = false) Then
				Me._loadout_status_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class LastVehicleUpdateResult
	
	Private _last_upd As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_upd", DbType:="rowversion")>  _
	Public Property last_upd() As System.Data.Linq.Binary
		Get
			Return Me._last_upd
		End Get
		Set
			If (Object.Equals(Me._last_upd, value) = false) Then
				Me._last_upd = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAVLCurrentLocationResult
	
	Private _vdis_unit_id As String
	
	Private _latitude As System.Nullable(Of Decimal)
	
	Private _longitude As System.Nullable(Of Decimal)
	
	Private _speed As System.Nullable(Of Integer)
	
	Private _heading As System.Nullable(Of Integer)
	
	Private _street_address As String
	
	Private _city As String
	
	Private _province_state As String
	
	Private _country As String
	
	Private _postal_code As String
	
	Private _reported_datetime As System.Nullable(Of Date)
	
	Private _vdis_update_datetime As System.Nullable(Of Date)
	
	Private _reverse_geocoded_datetime As System.Nullable(Of Date)
	
	Private _vehicle_description As String
	
	Private _status As System.Nullable(Of Short)
	
	Private _journey_id As System.Nullable(Of Integer)
	
	Private _journey_status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vdis_unit_id", DbType:="Char(15) NOT NULL", CanBeNull:=false)>  _
	Public Property vdis_unit_id() As String
		Get
			Return Me._vdis_unit_id
		End Get
		Set
			If (String.Equals(Me._vdis_unit_id, value) = false) Then
				Me._vdis_unit_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Decimal(10,8)")>  _
	Public Property latitude() As System.Nullable(Of Decimal)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me._latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Decimal(11,8)")>  _
	Public Property longitude() As System.Nullable(Of Decimal)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me._longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_speed", DbType:="Int")>  _
	Public Property speed() As System.Nullable(Of Integer)
		Get
			Return Me._speed
		End Get
		Set
			If (Me._speed.Equals(value) = false) Then
				Me._speed = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_heading", DbType:="Int")>  _
	Public Property heading() As System.Nullable(Of Integer)
		Get
			Return Me._heading
		End Get
		Set
			If (Me._heading.Equals(value) = false) Then
				Me._heading = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_street_address", DbType:="VarChar(250)")>  _
	Public Property street_address() As String
		Get
			Return Me._street_address
		End Get
		Set
			If (String.Equals(Me._street_address, value) = false) Then
				Me._street_address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_province_state", DbType:="VarChar(50)")>  _
	Public Property province_state() As String
		Get
			Return Me._province_state
		End Get
		Set
			If (String.Equals(Me._province_state, value) = false) Then
				Me._province_state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country", DbType:="VarChar(50)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me._country = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postal_code", DbType:="VarChar(20)")>  _
	Public Property postal_code() As String
		Get
			Return Me._postal_code
		End Get
		Set
			If (String.Equals(Me._postal_code, value) = false) Then
				Me._postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reported_datetime", DbType:="DateTime")>  _
	Public Property reported_datetime() As System.Nullable(Of Date)
		Get
			Return Me._reported_datetime
		End Get
		Set
			If (Me._reported_datetime.Equals(value) = false) Then
				Me._reported_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vdis_update_datetime", DbType:="DateTime")>  _
	Public Property vdis_update_datetime() As System.Nullable(Of Date)
		Get
			Return Me._vdis_update_datetime
		End Get
		Set
			If (Me._vdis_update_datetime.Equals(value) = false) Then
				Me._vdis_update_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reverse_geocoded_datetime", DbType:="DateTime")>  _
	Public Property reverse_geocoded_datetime() As System.Nullable(Of Date)
		Get
			Return Me._reverse_geocoded_datetime
		End Get
		Set
			If (Me._reverse_geocoded_datetime.Equals(value) = false) Then
				Me._reverse_geocoded_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vehicle_description", DbType:="VarChar(50)")>  _
	Public Property vehicle_description() As String
		Get
			Return Me._vehicle_description
		End Get
		Set
			If (String.Equals(Me._vehicle_description, value) = false) Then
				Me._vehicle_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt")>  _
	Public Property status() As System.Nullable(Of Short)
		Get
			Return Me._status
		End Get
		Set
			If (Me._status.Equals(value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_journey_id", DbType:="Int")>  _
	Public Property journey_id() As System.Nullable(Of Integer)
		Get
			Return Me._journey_id
		End Get
		Set
			If (Me._journey_id.Equals(value) = false) Then
				Me._journey_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_journey_status", DbType:="VarChar(50)")>  _
	Public Property journey_status() As String
		Get
			Return Me._journey_status
		End Get
		Set
			If (String.Equals(Me._journey_status, value) = false) Then
				Me._journey_status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetLoggersTransmittingResult
	
	Private _truck As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_truck", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property truck() As String
		Get
			Return Me._truck
		End Get
		Set
			If (String.Equals(Me._truck, value) = false) Then
				Me._truck = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckDispatchServiceOrderNumberExistsResult
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetQuoteCoverLetterTypeRecordsResult
	
	Private _letter_type_id As String
	
	Private _letter_type_desc As String
	
	Private _additional_document_path As String
	
	Private _default_letter_type_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_letter_type_id", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property letter_type_id() As String
		Get
			Return Me._letter_type_id
		End Get
		Set
			If (String.Equals(Me._letter_type_id, value) = false) Then
				Me._letter_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_letter_type_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property letter_type_desc() As String
		Get
			Return Me._letter_type_desc
		End Get
		Set
			If (String.Equals(Me._letter_type_desc, value) = false) Then
				Me._letter_type_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_document_path", DbType:="VarChar(500)")>  _
	Public Property additional_document_path() As String
		Get
			Return Me._additional_document_path
		End Get
		Set
			If (String.Equals(Me._additional_document_path, value) = false) Then
				Me._additional_document_path = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_default_letter_type_flag", DbType:="Bit NOT NULL")>  _
	Public Property default_letter_type_flag() As Boolean
		Get
			Return Me._default_letter_type_flag
		End Get
		Set
			If ((Me._default_letter_type_flag = value)  _
						= false) Then
				Me._default_letter_type_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppScheduledMaintenanceResult
	
	Private _scheduled_maintenance_datetime As String
	
	Private _server_current_datetime As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_scheduled_maintenance_datetime", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property scheduled_maintenance_datetime() As String
		Get
			Return Me._scheduled_maintenance_datetime
		End Get
		Set
			If (String.Equals(Me._scheduled_maintenance_datetime, value) = false) Then
				Me._scheduled_maintenance_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_server_current_datetime", DbType:="DateTime NOT NULL")>  _
	Public Property server_current_datetime() As Date
		Get
			Return Me._server_current_datetime
		End Get
		Set
			If ((Me._server_current_datetime = value)  _
						= false) Then
				Me._server_current_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetParamValResult
	
	Private _param_val As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_val", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property param_val() As String
		Get
			Return Me._param_val
		End Get
		Set
			If (String.Equals(Me._param_val, value) = false) Then
				Me._param_val = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPreJobBriefComplexityTypesResult
	
	Private _complexity_type_id As Integer
	
	Private _complexity_type_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_complexity_type_id", DbType:="Int NOT NULL")>  _
	Public Property complexity_type_id() As Integer
		Get
			Return Me._complexity_type_id
		End Get
		Set
			If ((Me._complexity_type_id = value)  _
						= false) Then
				Me._complexity_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_complexity_type_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property complexity_type_desc() As String
		Get
			Return Me._complexity_type_desc
		End Get
		Set
			If (String.Equals(Me._complexity_type_desc, value) = false) Then
				Me._complexity_type_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRcorCoreSoldStatusesResult
	
	Private _sold_status_id As String
	
	Private _sold_status_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_status_id", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property sold_status_id() As String
		Get
			Return Me._sold_status_id
		End Get
		Set
			If (String.Equals(Me._sold_status_id, value) = false) Then
				Me._sold_status_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_status_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sold_status_desc() As String
		Get
			Return Me._sold_status_desc
		End Get
		Set
			If (String.Equals(Me._sold_status_desc, value) = false) Then
				Me._sold_status_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchServiceListResult
	
	Private _service_id As String
	
	Private _descrip As String
	
	Private _general_lqa_flag As Boolean
	
	Private _rci_lqa_flag As Boolean
	
	Private _seismic_lqa_flag As Boolean
	
	Private _group_of_tools_flag As Boolean
	
	Private _group_names As String
	
	Private _selected As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property service_id() As String
		Get
			Return Me._service_id
		End Get
		Set
			If (String.Equals(Me._service_id, value) = false) Then
				Me._service_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descrip", DbType:="VarChar(50)")>  _
	Public Property descrip() As String
		Get
			Return Me._descrip
		End Get
		Set
			If (String.Equals(Me._descrip, value) = false) Then
				Me._descrip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_general_lqa_flag", DbType:="Bit NOT NULL")>  _
	Public Property general_lqa_flag() As Boolean
		Get
			Return Me._general_lqa_flag
		End Get
		Set
			If ((Me._general_lqa_flag = value)  _
						= false) Then
				Me._general_lqa_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rci_lqa_flag", DbType:="Bit NOT NULL")>  _
	Public Property rci_lqa_flag() As Boolean
		Get
			Return Me._rci_lqa_flag
		End Get
		Set
			If ((Me._rci_lqa_flag = value)  _
						= false) Then
				Me._rci_lqa_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seismic_lqa_flag", DbType:="Bit NOT NULL")>  _
	Public Property seismic_lqa_flag() As Boolean
		Get
			Return Me._seismic_lqa_flag
		End Get
		Set
			If ((Me._seismic_lqa_flag = value)  _
						= false) Then
				Me._seismic_lqa_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_of_tools_flag", DbType:="Bit NOT NULL")>  _
	Public Property group_of_tools_flag() As Boolean
		Get
			Return Me._group_of_tools_flag
		End Get
		Set
			If ((Me._group_of_tools_flag = value)  _
						= false) Then
				Me._group_of_tools_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_names", DbType:="VarChar(500)")>  _
	Public Property group_names() As String
		Get
			Return Me._group_names
		End Get
		Set
			If (String.Equals(Me._group_names, value) = false) Then
				Me._group_names = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property selected() As String
		Get
			Return Me._selected
		End Get
		Set
			If (String.Equals(Me._selected, value) = false) Then
				Me._selected = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCountryListResult
	
	Private _iso_country_code As String
	
	Private _iso_country_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iso_country_code", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property iso_country_code() As String
		Get
			Return Me._iso_country_code
		End Get
		Set
			If (String.Equals(Me._iso_country_code, value) = false) Then
				Me._iso_country_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iso_country_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property iso_country_name() As String
		Get
			Return Me._iso_country_name
		End Get
		Set
			If (String.Equals(Me._iso_country_name, value) = false) Then
				Me._iso_country_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetEquipmentDetailUrlResult
	
	Private _equipment_detail_url As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipment_detail_url", DbType:="VarChar(255)")>  _
	Public Property equipment_detail_url() As String
		Get
			Return Me._equipment_detail_url
		End Get
		Set
			If (String.Equals(Me._equipment_detail_url, value) = false) Then
				Me._equipment_detail_url = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckAssetOrderTemplateIdExistsResult
	
	Private _found As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_found", DbType:="Int NOT NULL")>  _
	Public Property found() As Integer
		Get
			Return Me._found
		End Get
		Set
			If ((Me._found = value)  _
						= false) Then
				Me._found = value
			End If
		End Set
	End Property
End Class

Partial Public Class CopyAssetOrderTemplateResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckImpactIncidentRecordInUseResult
	
	Private _impact_incident_in_use As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_impact_incident_in_use", DbType:="Bit")>  _
	Public Property impact_incident_in_use() As System.Nullable(Of Boolean)
		Get
			Return Me._impact_incident_in_use
		End Get
		Set
			If (Me._impact_incident_in_use.Equals(value) = false) Then
				Me._impact_incident_in_use = value
			End If
		End Set
	End Property
End Class

Partial Public Class ModifyRigIDResult
	
	Private _status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispConfigByCountryRecordByDistIdResult
	
	Private _country_code As String
	
	Private _location_type As String
	
	Private _api_uwi_digits_only_flag As Boolean
	
	Private _display_well_license_flag As Boolean
	
	Private _display_legal_desc_flag As Boolean
	
	Private _display_province_flag As Boolean
	
	Private _display_gross_revenue_flag As Boolean
	
	Private _t_and_c_filepath As String
	
	Private _email_rcvr_secure_forwarding_email As String
	
	Private _currency_code As String
	
	Private _report_language As String
	
	Private _has_cmpl_svc_auth_report_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me._country_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location_type", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property location_type() As String
		Get
			Return Me._location_type
		End Get
		Set
			If (String.Equals(Me._location_type, value) = false) Then
				Me._location_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_api_uwi_digits_only_flag", DbType:="Bit NOT NULL")>  _
	Public Property api_uwi_digits_only_flag() As Boolean
		Get
			Return Me._api_uwi_digits_only_flag
		End Get
		Set
			If ((Me._api_uwi_digits_only_flag = value)  _
						= false) Then
				Me._api_uwi_digits_only_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_well_license_flag", DbType:="Bit NOT NULL")>  _
	Public Property display_well_license_flag() As Boolean
		Get
			Return Me._display_well_license_flag
		End Get
		Set
			If ((Me._display_well_license_flag = value)  _
						= false) Then
				Me._display_well_license_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_legal_desc_flag", DbType:="Bit NOT NULL")>  _
	Public Property display_legal_desc_flag() As Boolean
		Get
			Return Me._display_legal_desc_flag
		End Get
		Set
			If ((Me._display_legal_desc_flag = value)  _
						= false) Then
				Me._display_legal_desc_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_province_flag", DbType:="Bit NOT NULL")>  _
	Public Property display_province_flag() As Boolean
		Get
			Return Me._display_province_flag
		End Get
		Set
			If ((Me._display_province_flag = value)  _
						= false) Then
				Me._display_province_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_gross_revenue_flag", DbType:="Bit NOT NULL")>  _
	Public Property display_gross_revenue_flag() As Boolean
		Get
			Return Me._display_gross_revenue_flag
		End Get
		Set
			If ((Me._display_gross_revenue_flag = value)  _
						= false) Then
				Me._display_gross_revenue_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t_and_c_filepath", DbType:="VarChar(200)")>  _
	Public Property t_and_c_filepath() As String
		Get
			Return Me._t_and_c_filepath
		End Get
		Set
			If (String.Equals(Me._t_and_c_filepath, value) = false) Then
				Me._t_and_c_filepath = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email_rcvr_secure_forwarding_email", DbType:="VarChar(200)")>  _
	Public Property email_rcvr_secure_forwarding_email() As String
		Get
			Return Me._email_rcvr_secure_forwarding_email
		End Get
		Set
			If (String.Equals(Me._email_rcvr_secure_forwarding_email, value) = false) Then
				Me._email_rcvr_secure_forwarding_email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency_code", DbType:="VarChar(5)")>  _
	Public Property currency_code() As String
		Get
			Return Me._currency_code
		End Get
		Set
			If (String.Equals(Me._currency_code, value) = false) Then
				Me._currency_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_report_language", DbType:="Char(2)")>  _
	Public Property report_language() As String
		Get
			Return Me._report_language
		End Get
		Set
			If (String.Equals(Me._report_language, value) = false) Then
				Me._report_language = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_has_cmpl_svc_auth_report_flag", DbType:="Bit")>  _
	Public Property has_cmpl_svc_auth_report_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._has_cmpl_svc_auth_report_flag
		End Get
		Set
			If (Me._has_cmpl_svc_auth_report_flag.Equals(value) = false) Then
				Me._has_cmpl_svc_auth_report_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetStateProvinceIDResult
	
	Private _state_province_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state_province_id", DbType:="VarChar(10)")>  _
	Public Property state_province_id() As String
		Get
			Return Me._state_province_id
		End Get
		Set
			If (String.Equals(Me._state_province_id, value) = false) Then
				Me._state_province_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSoldToCompanyRecordsResult
	
	Private _sold_to_id As Integer
	
	Private _sold_to_name As String
	
	Private _sold_to_address_rec_id As System.Nullable(Of Integer)
	
	Private _address As String
	
	Private _city As String
	
	Private _state_province As String
	
	Private _postal_code As String
	
	Private _po_box As String
	
	Private _po_box_city As String
	
	Private _po_box_postal_code As String
	
	Private _country As String
	
	Private _phone As String
	
	Private _fax As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="Int NOT NULL")>  _
	Public Property sold_to_id() As Integer
		Get
			Return Me._sold_to_id
		End Get
		Set
			If ((Me._sold_to_id = value)  _
						= false) Then
				Me._sold_to_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_name", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property sold_to_name() As String
		Get
			Return Me._sold_to_name
		End Get
		Set
			If (String.Equals(Me._sold_to_name, value) = false) Then
				Me._sold_to_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_address_rec_id", DbType:="Int")>  _
	Public Property sold_to_address_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_address_rec_id
		End Get
		Set
			If (Me._sold_to_address_rec_id.Equals(value) = false) Then
				Me._sold_to_address_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(80)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state_province", DbType:="VarChar(10)")>  _
	Public Property state_province() As String
		Get
			Return Me._state_province
		End Get
		Set
			If (String.Equals(Me._state_province, value) = false) Then
				Me._state_province = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postal_code", DbType:="VarChar(15)")>  _
	Public Property postal_code() As String
		Get
			Return Me._postal_code
		End Get
		Set
			If (String.Equals(Me._postal_code, value) = false) Then
				Me._postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_po_box", DbType:="VarChar(10)")>  _
	Public Property po_box() As String
		Get
			Return Me._po_box
		End Get
		Set
			If (String.Equals(Me._po_box, value) = false) Then
				Me._po_box = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_po_box_city", DbType:="VarChar(50)")>  _
	Public Property po_box_city() As String
		Get
			Return Me._po_box_city
		End Get
		Set
			If (String.Equals(Me._po_box_city, value) = false) Then
				Me._po_box_city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_po_box_postal_code", DbType:="VarChar(15)")>  _
	Public Property po_box_postal_code() As String
		Get
			Return Me._po_box_postal_code
		End Get
		Set
			If (String.Equals(Me._po_box_postal_code, value) = false) Then
				Me._po_box_postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country", DbType:="VarChar(5)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me._country = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(30)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me._phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fax", DbType:="VarChar(30)")>  _
	Public Property fax() As String
		Get
			Return Me._fax
		End Get
		Set
			If (String.Equals(Me._fax, value) = false) Then
				Me._fax = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoAdditionalChargeByAreaRecordsResult
	
	Private _area As String
	
	Private _additional_charge_item As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_area", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property area() As String
		Get
			Return Me._area
		End Get
		Set
			If (String.Equals(Me._area, value) = false) Then
				Me._area = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_charge_item", DbType:="VarChar(10)")>  _
	Public Property additional_charge_item() As String
		Get
			Return Me._additional_charge_item
		End Get
		Set
			If (String.Equals(Me._additional_charge_item, value) = false) Then
				Me._additional_charge_item = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDistrictCountryListResult
	
	Private _country_code As String
	
	Private _country_name As String
	
	Private _territory_list As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", DbType:="Char(2)")>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me._country_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property country_name() As String
		Get
			Return Me._country_name
		End Get
		Set
			If (String.Equals(Me._country_name, value) = false) Then
				Me._country_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory_list", DbType:="NVarChar(MAX)")>  _
	Public Property territory_list() As String
		Get
			Return Me._territory_list
		End Get
		Set
			If (String.Equals(Me._territory_list, value) = false) Then
				Me._territory_list = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPlantsResult
	
	Private _plant_id As String
	
	Private _plant_name As String
	
	Private _territory As String
	
	Private _inactive_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="VarChar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property plant_name() As String
		Get
			Return Me._plant_name
		End Get
		Set
			If (String.Equals(Me._plant_name, value) = false) Then
				Me._plant_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory", DbType:="VarChar(40)")>  _
	Public Property territory() As String
		Get
			Return Me._territory
		End Get
		Set
			If (String.Equals(Me._territory, value) = false) Then
				Me._territory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="Bit NOT NULL")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me._inactive_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertAssetOrderTemplateRecordResult
	
	Private _rec_id As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Decimal(38,0)")>  _
	Public Property rec_id() As System.Nullable(Of Decimal)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPreJobBriefAssignedToTitleListResult
	
	Private _member_title_id As String
	
	Private _member_title_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="VarChar(5)")>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", DbType:="VarChar(20)")>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me._member_title_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetPmPointCalculationFunctionRecordsResult
	
	Private _rec_id As Byte
	
	Private _function_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="TinyInt NOT NULL")>  _
	Public Property rec_id() As Byte
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_function_name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property function_name() As String
		Get
			Return Me._function_name
		End Get
		Set
			If (String.Equals(Me._function_name, value) = false) Then
				Me._function_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetTruckCableInfoResult
	
	Private _cable1_length As Integer
	
	Private _cable2_length As Integer
	
	Private _cable3_length As Integer
	
	Private _cable1_max_temperature As Integer
	
	Private _cable2_max_temperature As Integer
	
	Private _cable3_max_temperature As Integer
	
	Private _cable_max_temp_threhsold As System.Nullable(Of Integer)
	
	Private _cable1_has_splices_flag As System.Nullable(Of Boolean)
	
	Private _cable2_has_splices_flag As System.Nullable(Of Boolean)
	
	Private _cable3_has_splices_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable1_length", DbType:="Int NOT NULL")>  _
	Public Property cable1_length() As Integer
		Get
			Return Me._cable1_length
		End Get
		Set
			If ((Me._cable1_length = value)  _
						= false) Then
				Me._cable1_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_length", DbType:="Int NOT NULL")>  _
	Public Property cable2_length() As Integer
		Get
			Return Me._cable2_length
		End Get
		Set
			If ((Me._cable2_length = value)  _
						= false) Then
				Me._cable2_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_length", DbType:="Int NOT NULL")>  _
	Public Property cable3_length() As Integer
		Get
			Return Me._cable3_length
		End Get
		Set
			If ((Me._cable3_length = value)  _
						= false) Then
				Me._cable3_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable1_max_temperature", DbType:="Int NOT NULL")>  _
	Public Property cable1_max_temperature() As Integer
		Get
			Return Me._cable1_max_temperature
		End Get
		Set
			If ((Me._cable1_max_temperature = value)  _
						= false) Then
				Me._cable1_max_temperature = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_max_temperature", DbType:="Int NOT NULL")>  _
	Public Property cable2_max_temperature() As Integer
		Get
			Return Me._cable2_max_temperature
		End Get
		Set
			If ((Me._cable2_max_temperature = value)  _
						= false) Then
				Me._cable2_max_temperature = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_max_temperature", DbType:="Int NOT NULL")>  _
	Public Property cable3_max_temperature() As Integer
		Get
			Return Me._cable3_max_temperature
		End Get
		Set
			If ((Me._cable3_max_temperature = value)  _
						= false) Then
				Me._cable3_max_temperature = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_max_temp_threhsold", DbType:="Int")>  _
	Public Property cable_max_temp_threhsold() As System.Nullable(Of Integer)
		Get
			Return Me._cable_max_temp_threhsold
		End Get
		Set
			If (Me._cable_max_temp_threhsold.Equals(value) = false) Then
				Me._cable_max_temp_threhsold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable1_has_splices_flag", DbType:="Bit")>  _
	Public Property cable1_has_splices_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._cable1_has_splices_flag
		End Get
		Set
			If (Me._cable1_has_splices_flag.Equals(value) = false) Then
				Me._cable1_has_splices_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable2_has_splices_flag", DbType:="Bit")>  _
	Public Property cable2_has_splices_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._cable2_has_splices_flag
		End Get
		Set
			If (Me._cable2_has_splices_flag.Equals(value) = false) Then
				Me._cable2_has_splices_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable3_has_splices_flag", DbType:="Bit")>  _
	Public Property cable3_has_splices_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._cable3_has_splices_flag
		End Get
		Set
			If (Me._cable3_has_splices_flag.Equals(value) = false) Then
				Me._cable3_has_splices_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchByAssetSeriesListResult
	
	Private _disp_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchUsingServiceListResult
	
	Private _disp_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetForecastDetailDataResult
	
	Private _disp_id As Integer
	
	Private _series_id As String
	
	Private _plant_id As String
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _approx_end As System.Nullable(Of Date)
	
	Private _loadout_start_datetime As System.Nullable(Of Date)
	
	Private _loadout_end_datetime As System.Nullable(Of Date)
	
	Private _series_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30)")>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="VarChar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start", DbType:="SmallDateTime")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me._approx_start = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_end", DbType:="DateTime")>  _
	Public Property approx_end() As System.Nullable(Of Date)
		Get
			Return Me._approx_end
		End Get
		Set
			If (Me._approx_end.Equals(value) = false) Then
				Me._approx_end = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_start_datetime", DbType:="SmallDateTime")>  _
	Public Property loadout_start_datetime() As System.Nullable(Of Date)
		Get
			Return Me._loadout_start_datetime
		End Get
		Set
			If (Me._loadout_start_datetime.Equals(value) = false) Then
				Me._loadout_start_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_end_datetime", DbType:="SmallDateTime")>  _
	Public Property loadout_end_datetime() As System.Nullable(Of Date)
		Get
			Return Me._loadout_end_datetime
		End Get
		Set
			If (Me._loadout_end_datetime.Equals(value) = false) Then
				Me._loadout_end_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_count", DbType:="Int")>  _
	Public Property series_count() As System.Nullable(Of Integer)
		Get
			Return Me._series_count
		End Get
		Set
			If (Me._series_count.Equals(value) = false) Then
				Me._series_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetContactRecordsResult
	
	Private _rec_id As Integer
	
	Private _employee_id As String
	
	Private _user_id As String
	
	Private _contact_type_id As String
	
	Private _name As String
	
	Private _phone_type1 As String
	
	Private _phone1 As String
	
	Private _phone_type2 As String
	
	Private _phone2 As String
	
	Private _email As String
	
	Private _sales_office_rec_id As System.Nullable(Of Integer)
	
	Private _ecrm_user_id As String
	
	Private _sales_office_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20)")>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me._user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_type_id", DbType:="Char(5)")>  _
	Public Property contact_type_id() As String
		Get
			Return Me._contact_type_id
		End Get
		Set
			If (String.Equals(Me._contact_type_id, value) = false) Then
				Me._contact_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(30)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone_type1", DbType:="VarChar(10)")>  _
	Public Property phone_type1() As String
		Get
			Return Me._phone_type1
		End Get
		Set
			If (String.Equals(Me._phone_type1, value) = false) Then
				Me._phone_type1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone1", DbType:="VarChar(30)")>  _
	Public Property phone1() As String
		Get
			Return Me._phone1
		End Get
		Set
			If (String.Equals(Me._phone1, value) = false) Then
				Me._phone1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone_type2", DbType:="VarChar(10)")>  _
	Public Property phone_type2() As String
		Get
			Return Me._phone_type2
		End Get
		Set
			If (String.Equals(Me._phone_type2, value) = false) Then
				Me._phone_type2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone2", DbType:="VarChar(30)")>  _
	Public Property phone2() As String
		Get
			Return Me._phone2
		End Get
		Set
			If (String.Equals(Me._phone2, value) = false) Then
				Me._phone2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_office_rec_id", DbType:="Int")>  _
	Public Property sales_office_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._sales_office_rec_id
		End Get
		Set
			If (Me._sales_office_rec_id.Equals(value) = false) Then
				Me._sales_office_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ecrm_user_id", DbType:="VarChar(30)")>  _
	Public Property ecrm_user_id() As String
		Get
			Return Me._ecrm_user_id
		End Get
		Set
			If (String.Equals(Me._ecrm_user_id, value) = false) Then
				Me._ecrm_user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_office_name", DbType:="VarChar(50)")>  _
	Public Property sales_office_name() As String
		Get
			Return Me._sales_office_name
		End Get
		Set
			If (String.Equals(Me._sales_office_name, value) = false) Then
				Me._sales_office_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetGeoscientistListResult
	
	Private _employee_id As String
	
	Private _employee_name As String
	
	Private _email As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_name() As String
		Get
			Return Me._employee_name
		End Get
		Set
			If (String.Equals(Me._employee_name, value) = false) Then
				Me._employee_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetWirelinePersonnelSelectionListResult
	
	Private _employee_id As String
	
	Private _name As String
	
	Private _member_title_id As String
	
	Private _title As String
	
	Private _include_in_run_engineer_list_flag As Boolean
	
	Private _member_subtitle_id As String
	
	Private _member_subtitle_desc As String
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _phone As String
	
	Private _email As String
	
	Private _comment As String
	
	Private _dist_name As String
	
	Private _territory As String
	
	Private _selected As String
	
	Private _job_count As Integer
	
	Private _operating_time As Decimal
	
	Private _non_productive_time As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5)")>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="VarChar(20)")>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me._title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_include_in_run_engineer_list_flag", DbType:="Bit NOT NULL")>  _
	Public Property include_in_run_engineer_list_flag() As Boolean
		Get
			Return Me._include_in_run_engineer_list_flag
		End Get
		Set
			If ((Me._include_in_run_engineer_list_flag = value)  _
						= false) Then
				Me._include_in_run_engineer_list_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_subtitle_id", DbType:="VarChar(5)")>  _
	Public Property member_subtitle_id() As String
		Get
			Return Me._member_subtitle_id
		End Get
		Set
			If (String.Equals(Me._member_subtitle_id, value) = false) Then
				Me._member_subtitle_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_subtitle_desc", DbType:="VarChar(40)")>  _
	Public Property member_subtitle_desc() As String
		Get
			Return Me._member_subtitle_desc
		End Get
		Set
			If (String.Equals(Me._member_subtitle_desc, value) = false) Then
				Me._member_subtitle_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(14)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me._phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(255)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me._comment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_name", DbType:="Char(40)")>  _
	Public Property dist_name() As String
		Get
			Return Me._dist_name
		End Get
		Set
			If (String.Equals(Me._dist_name, value) = false) Then
				Me._dist_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_territory", DbType:="VarChar(40)")>  _
	Public Property territory() As String
		Get
			Return Me._territory
		End Get
		Set
			If (String.Equals(Me._territory, value) = false) Then
				Me._territory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_selected", DbType:="VarChar(30)")>  _
	Public Property selected() As String
		Get
			Return Me._selected
		End Get
		Set
			If (String.Equals(Me._selected, value) = false) Then
				Me._selected = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_count", DbType:="Int NOT NULL")>  _
	Public Property job_count() As Integer
		Get
			Return Me._job_count
		End Get
		Set
			If ((Me._job_count = value)  _
						= false) Then
				Me._job_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property operating_time() As Decimal
		Get
			Return Me._operating_time
		End Get
		Set
			If ((Me._operating_time = value)  _
						= false) Then
				Me._operating_time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_non_productive_time", DbType:="Decimal(5,2) NOT NULL")>  _
	Public Property non_productive_time() As Decimal
		Get
			Return Me._non_productive_time
		End Get
		Set
			If ((Me._non_productive_time = value)  _
						= false) Then
				Me._non_productive_time = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetTeamUtilizationDataResult
	
	Private _disp_psl As String
	
	Private _employee_id As String
	
	Private _disp_id As Integer
	
	Private _status As Short
	
	Private _job_start As System.Nullable(Of Date)
	
	Private _job_end As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_psl", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property disp_psl() As String
		Get
			Return Me._disp_psl
		End Get
		Set
			If (String.Equals(Me._disp_psl, value) = false) Then
				Me._disp_psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_start", DbType:="SmallDateTime")>  _
	Public Property job_start() As System.Nullable(Of Date)
		Get
			Return Me._job_start
		End Get
		Set
			If (Me._job_start.Equals(value) = false) Then
				Me._job_start = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_end", DbType:="DateTime")>  _
	Public Property job_end() As System.Nullable(Of Date)
		Get
			Return Me._job_end
		End Get
		Set
			If (Me._job_end.Equals(value) = false) Then
				Me._job_end = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetTeamScheduleDataResult
	
	Private _employee_id As String
	
	Private _name As String
	
	Private _member_title_desc As String
	
	Private _member_title_id As String
	
	Private _schedule_date As System.Nullable(Of Date)
	
	Private _shift_status_id As System.Nullable(Of Integer)
	
	Private _scheduled_shift_status_color As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", DbType:="VarChar(20)")>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me._member_title_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5)")>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_schedule_date", DbType:="SmallDateTime")>  _
	Public Property schedule_date() As System.Nullable(Of Date)
		Get
			Return Me._schedule_date
		End Get
		Set
			If (Me._schedule_date.Equals(value) = false) Then
				Me._schedule_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shift_status_id", DbType:="Int")>  _
	Public Property shift_status_id() As System.Nullable(Of Integer)
		Get
			Return Me._shift_status_id
		End Get
		Set
			If (Me._shift_status_id.Equals(value) = false) Then
				Me._shift_status_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_scheduled_shift_status_color", DbType:="Int")>  _
	Public Property scheduled_shift_status_color() As System.Nullable(Of Integer)
		Get
			Return Me._scheduled_shift_status_color
		End Get
		Set
			If (Me._scheduled_shift_status_color.Equals(value) = false) Then
				Me._scheduled_shift_status_color = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetGeoscienceGpiListResult
	
	Private _gpi As String
	
	Private _description As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetWirelinePersonnelMemberTitleListResult
	
	Private _member_title_id As String
	
	Private _member_title_desc As String
	
	Private _include_in_run_engineer_list_flag As Boolean
	
	Private _applicable_competencies As String
	
	Private _include_in_pjb_assigned_to_title_list_flag As Boolean
	
	Private _calculate_statistics_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", DbType:="VarChar(20)")>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me._member_title_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_include_in_run_engineer_list_flag", DbType:="Bit NOT NULL")>  _
	Public Property include_in_run_engineer_list_flag() As Boolean
		Get
			Return Me._include_in_run_engineer_list_flag
		End Get
		Set
			If ((Me._include_in_run_engineer_list_flag = value)  _
						= false) Then
				Me._include_in_run_engineer_list_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_applicable_competencies", DbType:="VarChar(5)")>  _
	Public Property applicable_competencies() As String
		Get
			Return Me._applicable_competencies
		End Get
		Set
			If (String.Equals(Me._applicable_competencies, value) = false) Then
				Me._applicable_competencies = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_include_in_pjb_assigned_to_title_list_flag", DbType:="Bit NOT NULL")>  _
	Public Property include_in_pjb_assigned_to_title_list_flag() As Boolean
		Get
			Return Me._include_in_pjb_assigned_to_title_list_flag
		End Get
		Set
			If ((Me._include_in_pjb_assigned_to_title_list_flag = value)  _
						= false) Then
				Me._include_in_pjb_assigned_to_title_list_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calculate_statistics_flag", DbType:="Bit NOT NULL")>  _
	Public Property calculate_statistics_flag() As Boolean
		Get
			Return Me._calculate_statistics_flag
		End Get
		Set
			If ((Me._calculate_statistics_flag = value)  _
						= false) Then
				Me._calculate_statistics_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchByGeoscientistResult
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetStandbyTypesResult
	
	Private _rec_id As Integer
	
	Private _standby_type_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_standby_type_desc", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property standby_type_desc() As String
		Get
			Return Me._standby_type_desc
		End Get
		Set
			If (String.Equals(Me._standby_type_desc, value) = false) Then
				Me._standby_type_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispGeoscientistSelectionListResult
	
	Private _employee_sap_id As String
	
	Private _name As String
	
	Private _email As String
	
	Private _gpi As String
	
	Private _competency_assigned_date As System.Nullable(Of Date)
	
	Private _competency_acquired_date As System.Nullable(Of Date)
	
	Private _competency_expiry_date As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_sap_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_sap_id() As String
		Get
			Return Me._employee_sap_id
		End Get
		Set
			If (String.Equals(Me._employee_sap_id, value) = false) Then
				Me._employee_sap_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_assigned_date", DbType:="Date")>  _
	Public Property competency_assigned_date() As System.Nullable(Of Date)
		Get
			Return Me._competency_assigned_date
		End Get
		Set
			If (Me._competency_assigned_date.Equals(value) = false) Then
				Me._competency_assigned_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_acquired_date", DbType:="Date")>  _
	Public Property competency_acquired_date() As System.Nullable(Of Date)
		Get
			Return Me._competency_acquired_date
		End Get
		Set
			If (Me._competency_acquired_date.Equals(value) = false) Then
				Me._competency_acquired_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_expiry_date", DbType:="Date")>  _
	Public Property competency_expiry_date() As System.Nullable(Of Date)
		Get
			Return Me._competency_expiry_date
		End Get
		Set
			If (Me._competency_expiry_date.Equals(value) = false) Then
				Me._competency_expiry_date = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetTruckCableListResult
	
	Private _cable_id As String
	
	Private _cable_length As System.Nullable(Of Integer)
	
	Private _splice1_depth As System.Nullable(Of Integer)
	
	Private _splice2_depth As System.Nullable(Of Integer)
	
	Private _plant_id As String
	
	Private _cable_type As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property cable_id() As String
		Get
			Return Me._cable_id
		End Get
		Set
			If (String.Equals(Me._cable_id, value) = false) Then
				Me._cable_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_length", DbType:="Int")>  _
	Public Property cable_length() As System.Nullable(Of Integer)
		Get
			Return Me._cable_length
		End Get
		Set
			If (Me._cable_length.Equals(value) = false) Then
				Me._cable_length = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_splice1_depth", DbType:="Int")>  _
	Public Property splice1_depth() As System.Nullable(Of Integer)
		Get
			Return Me._splice1_depth
		End Get
		Set
			If (Me._splice1_depth.Equals(value) = false) Then
				Me._splice1_depth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_splice2_depth", DbType:="Int")>  _
	Public Property splice2_depth() As System.Nullable(Of Integer)
		Get
			Return Me._splice2_depth
		End Get
		Set
			If (Me._splice2_depth.Equals(value) = false) Then
				Me._splice2_depth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="VarChar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cable_type", DbType:="VarChar(25)")>  _
	Public Property cable_type() As String
		Get
			Return Me._cable_type
		End Get
		Set
			If (String.Equals(Me._cable_type, value) = false) Then
				Me._cable_type = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetSeriesListResult
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Private _code_type_rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_type_rec_id", DbType:="Int")>  _
	Public Property code_type_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._code_type_rec_id
		End Get
		Set
			If (Me._code_type_rec_id.Equals(value) = false) Then
				Me._code_type_rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetGroupItemsResult
	
	Private _asset_group_id As String
	
	Private _asset_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_group_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_group_id() As String
		Get
			Return Me._asset_group_id
		End Get
		Set
			If (String.Equals(Me._asset_group_id, value) = false) Then
				Me._asset_group_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckAssetSubassemblyHistoryRecordExistsResult
	
	Private _found As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_found", DbType:="Bit")>  _
	Public Property found() As System.Nullable(Of Boolean)
		Get
			Return Me._found
		End Get
		Set
			If (Me._found.Equals(value) = false) Then
				Me._found = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetSubassemblyParentAssetIdListResult
	
	Private _asset_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class AcquireDispatchEditingLockResult
	
	Private _lock_status As String
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lock_status", DbType:="VarChar(16) NOT NULL", CanBeNull:=false)>  _
	Public Property lock_status() As String
		Get
			Return Me._lock_status
		End Get
		Set
			If (String.Equals(Me._lock_status, value) = false) Then
				Me._lock_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me._locked_for_edit_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="VarChar(20)")>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me._locked_for_edit_by = value
			End If
		End Set
	End Property
End Class

Partial Public Class AcquireDispatchEditingLockForExportAndUploadResult
	
	Private _lock_status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lock_status", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property lock_status() As String
		Get
			Return Me._lock_status
		End Get
		Set
			If (String.Equals(Me._lock_status, value) = false) Then
				Me._lock_status = value
			End If
		End Set
	End Property
End Class

Partial Public Class AcquireFsoEditingLockResult
	
	Private _lock_status As String
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lock_status", DbType:="VarChar(16) NOT NULL", CanBeNull:=false)>  _
	Public Property lock_status() As String
		Get
			Return Me._lock_status
		End Get
		Set
			If (String.Equals(Me._lock_status, value) = false) Then
				Me._lock_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me._locked_for_edit_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="VarChar(20)")>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me._locked_for_edit_by = value
			End If
		End Set
	End Property
End Class

Partial Public Class AcquireGeoscienceEditingLockResult
	
	Private _lock_status As String
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Private _locked_for_edit_by As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lock_status", DbType:="VarChar(16) NOT NULL", CanBeNull:=false)>  _
	Public Property lock_status() As String
		Get
			Return Me._lock_status
		End Get
		Set
			If (String.Equals(Me._lock_status, value) = false) Then
				Me._lock_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me._locked_for_edit_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_by", DbType:="VarChar(20)")>  _
	Public Property locked_for_edit_by() As String
		Get
			Return Me._locked_for_edit_by
		End Get
		Set
			If (String.Equals(Me._locked_for_edit_by, value) = false) Then
				Me._locked_for_edit_by = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchEditingLockTimeElapsedResult
	
	Private _edit_lock_time_elapsed As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_edit_lock_time_elapsed", DbType:="Int")>  _
	Public Property edit_lock_time_elapsed() As System.Nullable(Of Integer)
		Get
			Return Me._edit_lock_time_elapsed
		End Get
		Set
			If (Me._edit_lock_time_elapsed.Equals(value) = false) Then
				Me._edit_lock_time_elapsed = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoEditingLockTimeElapsedResult
	
	Private _edit_lock_time_elapsed As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_edit_lock_time_elapsed", DbType:="Int")>  _
	Public Property edit_lock_time_elapsed() As System.Nullable(Of Integer)
		Get
			Return Me._edit_lock_time_elapsed
		End Get
		Set
			If (Me._edit_lock_time_elapsed.Equals(value) = false) Then
				Me._edit_lock_time_elapsed = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetGeoscienceEditingLockTimeElapsedResult
	
	Private _edit_lock_time_elapsed As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_edit_lock_time_elapsed", DbType:="Int")>  _
	Public Property edit_lock_time_elapsed() As System.Nullable(Of Integer)
		Get
			Return Me._edit_lock_time_elapsed
		End Get
		Set
			If (Me._edit_lock_time_elapsed.Equals(value) = false) Then
				Me._edit_lock_time_elapsed = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispGeoscienceDefaultGpiItemsResult
	
	Private _gpi As String
	
	Private _description As String
	
	Private _requirement As String
	
	Private _prerequisite_gpis As String
	
	Private _discipline As String
	
	Private _primary_sort_order As System.Nullable(Of Integer)
	
	Private _archive_number As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirement", DbType:="VarChar(50)")>  _
	Public Property requirement() As String
		Get
			Return Me._requirement
		End Get
		Set
			If (String.Equals(Me._requirement, value) = false) Then
				Me._requirement = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite_gpis", DbType:="NVarChar(MAX)")>  _
	Public Property prerequisite_gpis() As String
		Get
			Return Me._prerequisite_gpis
		End Get
		Set
			If (String.Equals(Me._prerequisite_gpis, value) = false) Then
				Me._prerequisite_gpis = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discipline", DbType:="VarChar(50)")>  _
	Public Property discipline() As String
		Get
			Return Me._discipline
		End Get
		Set
			If (String.Equals(Me._discipline, value) = false) Then
				Me._discipline = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_primary_sort_order", DbType:="Int")>  _
	Public Property primary_sort_order() As System.Nullable(Of Integer)
		Get
			Return Me._primary_sort_order
		End Get
		Set
			If (Me._primary_sort_order.Equals(value) = false) Then
				Me._primary_sort_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_archive_number", DbType:="VarChar(60)")>  _
	Public Property archive_number() As String
		Get
			Return Me._archive_number
		End Get
		Set
			If (String.Equals(Me._archive_number, value) = false) Then
				Me._archive_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispGeoscienceGpiSelectionListResult
	
	Private _gpi As String
	
	Private _description As String
	
	Private _requirement As String
	
	Private _prerequisite_gpis As String
	
	Private _discipline As String
	
	Private _primary_sort_order As System.Nullable(Of Integer)
	
	Private _archive_number As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirement", DbType:="VarChar(50)")>  _
	Public Property requirement() As String
		Get
			Return Me._requirement
		End Get
		Set
			If (String.Equals(Me._requirement, value) = false) Then
				Me._requirement = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite_gpis", DbType:="NVarChar(MAX)")>  _
	Public Property prerequisite_gpis() As String
		Get
			Return Me._prerequisite_gpis
		End Get
		Set
			If (String.Equals(Me._prerequisite_gpis, value) = false) Then
				Me._prerequisite_gpis = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discipline", DbType:="VarChar(50)")>  _
	Public Property discipline() As String
		Get
			Return Me._discipline
		End Get
		Set
			If (String.Equals(Me._discipline, value) = false) Then
				Me._discipline = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_primary_sort_order", DbType:="Int")>  _
	Public Property primary_sort_order() As System.Nullable(Of Integer)
		Get
			Return Me._primary_sort_order
		End Get
		Set
			If (Me._primary_sort_order.Equals(value) = false) Then
				Me._primary_sort_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_archive_number", DbType:="VarChar(60)")>  _
	Public Property archive_number() As String
		Get
			Return Me._archive_number
		End Get
		Set
			If (String.Equals(Me._archive_number, value) = false) Then
				Me._archive_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispGeoscienceGpisFromQuotesResult
	
	Private _gpi As String
	
	Private _description As String
	
	Private _requirement As String
	
	Private _prerequisite_gpis As String
	
	Private _discipline As String
	
	Private _primary_sort_order As System.Nullable(Of Integer)
	
	Private _archive_number As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirement", DbType:="VarChar(50)")>  _
	Public Property requirement() As String
		Get
			Return Me._requirement
		End Get
		Set
			If (String.Equals(Me._requirement, value) = false) Then
				Me._requirement = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite_gpis", DbType:="NVarChar(MAX)")>  _
	Public Property prerequisite_gpis() As String
		Get
			Return Me._prerequisite_gpis
		End Get
		Set
			If (String.Equals(Me._prerequisite_gpis, value) = false) Then
				Me._prerequisite_gpis = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discipline", DbType:="VarChar(50)")>  _
	Public Property discipline() As String
		Get
			Return Me._discipline
		End Get
		Set
			If (String.Equals(Me._discipline, value) = false) Then
				Me._discipline = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_primary_sort_order", DbType:="Int")>  _
	Public Property primary_sort_order() As System.Nullable(Of Integer)
		Get
			Return Me._primary_sort_order
		End Get
		Set
			If (Me._primary_sort_order.Equals(value) = false) Then
				Me._primary_sort_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_archive_number", DbType:="VarChar(60)")>  _
	Public Property archive_number() As String
		Get
			Return Me._archive_number
		End Get
		Set
			If (String.Equals(Me._archive_number, value) = false) Then
				Me._archive_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispGeoscienceEmailDetailsResult
	
	Private _formatted_disp_id As String
	
	Private _well_name As String
	
	Private _company_name As String
	
	Private _geoscience_email As String
	
	Private _gsc_manager_email As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me._company_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_geoscience_email", DbType:="VarChar(128)")>  _
	Public Property geoscience_email() As String
		Get
			Return Me._geoscience_email
		End Get
		Set
			If (String.Equals(Me._geoscience_email, value) = false) Then
				Me._geoscience_email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gsc_manager_email", DbType:="VarChar(128)")>  _
	Public Property gsc_manager_email() As String
		Get
			Return Me._gsc_manager_email
		End Get
		Set
			If (String.Equals(Me._gsc_manager_email, value) = false) Then
				Me._gsc_manager_email = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchDepthUnitResult
	
	Private _depth_measurement_unit As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property depth_measurement_unit() As String
		Get
			Return Me._depth_measurement_unit
		End Get
		Set
			If (String.Equals(Me._depth_measurement_unit, value) = false) Then
				Me._depth_measurement_unit = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckDispHasFSOsInFinanceModeResult
	
	Private _found As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_found", DbType:="Int NOT NULL")>  _
	Public Property found() As Integer
		Get
			Return Me._found
		End Get
		Set
			If ((Me._found = value)  _
						= false) Then
				Me._found = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckDispatchHasApprovedBonusDataResult
	
	Private _bonus_data_approved As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bonus_data_approved", DbType:="Int NOT NULL")>  _
	Public Property bonus_data_approved() As Integer
		Get
			Return Me._bonus_data_approved
		End Get
		Set
			If ((Me._bonus_data_approved = value)  _
						= false) Then
				Me._bonus_data_approved = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispContactListResult
	
	Private _rec_id As Integer
	
	Private _name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(30)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertDispDocRecordResult
	
	Private _rec_id As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Decimal(38,0)")>  _
	Public Property rec_id() As System.Nullable(Of Decimal)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchServicesRequestedItemsResult
	
	Private _service_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property service_id() As String
		Get
			Return Me._service_id
		End Get
		Set
			If (String.Equals(Me._service_id, value) = false) Then
				Me._service_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class UpdateGeoscienceEditingLockDatetimeResult
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me._locked_for_edit_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class UpdateDispatchEditingLockDatetimeResult
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me._locked_for_edit_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class UpdateFsoEditingLockDatetimeResult
	
	Private _locked_for_edit_datetime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locked_for_edit_datetime", DbType:="SmallDateTime")>  _
	Public Property locked_for_edit_datetime() As System.Nullable(Of Date)
		Get
			Return Me._locked_for_edit_datetime
		End Get
		Set
			If (Me._locked_for_edit_datetime.Equals(value) = false) Then
				Me._locked_for_edit_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class RemoveFsoQuoteFromCallSheetResult
	
	Private _status As String
	
	Private _fso_number As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(19) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_number", DbType:="VarChar(20)")>  _
	Public Property fso_number() As String
		Get
			Return Me._fso_number
		End Get
		Set
			If (String.Equals(Me._fso_number, value) = false) Then
				Me._fso_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoRecIdByFsoNumberResult
	
	Private _rec_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetQuotesLinksSelectionListResult
	
	Private _rec_id As Integer
	
	Private _quote_number As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number", DbType:="VarChar(40)")>  _
	Public Property quote_number() As String
		Get
			Return Me._quote_number
		End Get
		Set
			If (String.Equals(Me._quote_number, value) = false) Then
				Me._quote_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoQuoteListResult
	
	Private _rec_id As Integer
	
	Private _quote_number As String
	
	Private _sap_export_id As String
	
	Private _sold_to_customer As String
	
	Private _update_quote_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number", DbType:="VarChar(40)")>  _
	Public Property quote_number() As String
		Get
			Return Me._quote_number
		End Get
		Set
			If (String.Equals(Me._quote_number, value) = false) Then
				Me._quote_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_id", DbType:="VarChar(30)")>  _
	Public Property sap_export_id() As String
		Get
			Return Me._sap_export_id
		End Get
		Set
			If (String.Equals(Me._sap_export_id, value) = false) Then
				Me._sap_export_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_customer", DbType:="VarChar(113)")>  _
	Public Property sold_to_customer() As String
		Get
			Return Me._sold_to_customer
		End Get
		Set
			If (String.Equals(Me._sold_to_customer, value) = false) Then
				Me._sold_to_customer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_quote_flag", DbType:="Bit")>  _
	Public Property update_quote_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._update_quote_flag
		End Get
		Set
			If (Me._update_quote_flag.Equals(value) = false) Then
				Me._update_quote_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispLqaQuestionsByLqaTypeResult
	
	Private _disp_id As Integer
	
	Private _lqa_question_rec_id As Integer
	
	Private _lqa_type_id As System.Nullable(Of Integer)
	
	Private _lqa_section_id As System.Nullable(Of Integer)
	
	Private _question_text As String
	
	Private _point_value As System.Nullable(Of Integer)
	
	Private _display_order As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_question_rec_id", DbType:="Int NOT NULL")>  _
	Public Property lqa_question_rec_id() As Integer
		Get
			Return Me._lqa_question_rec_id
		End Get
		Set
			If ((Me._lqa_question_rec_id = value)  _
						= false) Then
				Me._lqa_question_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_type_id", DbType:="Int")>  _
	Public Property lqa_type_id() As System.Nullable(Of Integer)
		Get
			Return Me._lqa_type_id
		End Get
		Set
			If (Me._lqa_type_id.Equals(value) = false) Then
				Me._lqa_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_section_id", DbType:="Int")>  _
	Public Property lqa_section_id() As System.Nullable(Of Integer)
		Get
			Return Me._lqa_section_id
		End Get
		Set
			If (Me._lqa_section_id.Equals(value) = false) Then
				Me._lqa_section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question_text", DbType:="VarChar(150)")>  _
	Public Property question_text() As String
		Get
			Return Me._question_text
		End Get
		Set
			If (String.Equals(Me._question_text, value) = false) Then
				Me._question_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_point_value", DbType:="Int")>  _
	Public Property point_value() As System.Nullable(Of Integer)
		Get
			Return Me._point_value
		End Get
		Set
			If (Me._point_value.Equals(value) = false) Then
				Me._point_value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int")>  _
	Public Property display_order() As System.Nullable(Of Integer)
		Get
			Return Me._display_order
		End Get
		Set
			If (Me._display_order.Equals(value) = false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispLqaServiceListByLqaTypeResult
	
	Private _service_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property service_id() As String
		Get
			Return Me._service_id
		End Get
		Set
			If (String.Equals(Me._service_id, value) = false) Then
				Me._service_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbSubsectionRecordsResult
	
	Private _subsection_id As Integer
	
	Private _section_id As Integer
	
	Private _sequence_number As Integer
	
	Private _subsection_name As String
	
	Private _map_to As String
	
	Private _traffic_light_type As String
	
	Private _regular_hyperlink_count As System.Nullable(Of Integer)
	
	Private _manual_hyperlink_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subsection_id", DbType:="Int NOT NULL")>  _
	Public Property subsection_id() As Integer
		Get
			Return Me._subsection_id
		End Get
		Set
			If ((Me._subsection_id = value)  _
						= false) Then
				Me._subsection_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="Int NOT NULL")>  _
	Public Property section_id() As Integer
		Get
			Return Me._section_id
		End Get
		Set
			If ((Me._section_id = value)  _
						= false) Then
				Me._section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int NOT NULL")>  _
	Public Property sequence_number() As Integer
		Get
			Return Me._sequence_number
		End Get
		Set
			If ((Me._sequence_number = value)  _
						= false) Then
				Me._sequence_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subsection_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property subsection_name() As String
		Get
			Return Me._subsection_name
		End Get
		Set
			If (String.Equals(Me._subsection_name, value) = false) Then
				Me._subsection_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_map_to", DbType:="VarChar(10)")>  _
	Public Property map_to() As String
		Get
			Return Me._map_to
		End Get
		Set
			If (String.Equals(Me._map_to, value) = false) Then
				Me._map_to = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_traffic_light_type", DbType:="VarChar(10)")>  _
	Public Property traffic_light_type() As String
		Get
			Return Me._traffic_light_type
		End Get
		Set
			If (String.Equals(Me._traffic_light_type, value) = false) Then
				Me._traffic_light_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_regular_hyperlink_count", DbType:="Int")>  _
	Public Property regular_hyperlink_count() As System.Nullable(Of Integer)
		Get
			Return Me._regular_hyperlink_count
		End Get
		Set
			If (Me._regular_hyperlink_count.Equals(value) = false) Then
				Me._regular_hyperlink_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manual_hyperlink_count", DbType:="Int")>  _
	Public Property manual_hyperlink_count() As System.Nullable(Of Integer)
		Get
			Return Me._manual_hyperlink_count
		End Get
		Set
			If (Me._manual_hyperlink_count.Equals(value) = false) Then
				Me._manual_hyperlink_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbEquipmentSubsectionTrafficLightDataResult
	
	Private _count As System.Nullable(Of Integer)
	
	Private _pm_point_threshold_level As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_count", DbType:="Int")>  _
	Public Property count() As System.Nullable(Of Integer)
		Get
			Return Me._count
		End Get
		Set
			If (Me._count.Equals(value) = false) Then
				Me._count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="VarChar(10)")>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me._pm_point_threshold_level = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbSectionRecordsResult
	
	Private _section_id As Integer
	
	Private _template_id As Integer
	
	Private _sequence_number As Integer
	
	Private _section_name As String
	
	Private _hyperlink_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="Int NOT NULL")>  _
	Public Property section_id() As Integer
		Get
			Return Me._section_id
		End Get
		Set
			If ((Me._section_id = value)  _
						= false) Then
				Me._section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_template_id", DbType:="Int NOT NULL")>  _
	Public Property template_id() As Integer
		Get
			Return Me._template_id
		End Get
		Set
			If ((Me._template_id = value)  _
						= false) Then
				Me._template_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int NOT NULL")>  _
	Public Property sequence_number() As Integer
		Get
			Return Me._sequence_number
		End Get
		Set
			If ((Me._sequence_number = value)  _
						= false) Then
				Me._sequence_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property section_name() As String
		Get
			Return Me._section_name
		End Get
		Set
			If (String.Equals(Me._section_name, value) = false) Then
				Me._section_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hyperlink_count", DbType:="Int")>  _
	Public Property hyperlink_count() As System.Nullable(Of Integer)
		Get
			Return Me._hyperlink_count
		End Get
		Set
			If (Me._hyperlink_count.Equals(value) = false) Then
				Me._hyperlink_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbLoadoutChecklistRecordsResult
	
	Private _loadout_checklist_id As Integer
	
	Private _subsection_id As Integer
	
	Private _sequence_number As Integer
	
	Private _loadout_checklist_text As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_checklist_id", DbType:="Int NOT NULL")>  _
	Public Property loadout_checklist_id() As Integer
		Get
			Return Me._loadout_checklist_id
		End Get
		Set
			If ((Me._loadout_checklist_id = value)  _
						= false) Then
				Me._loadout_checklist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subsection_id", DbType:="Int NOT NULL")>  _
	Public Property subsection_id() As Integer
		Get
			Return Me._subsection_id
		End Get
		Set
			If ((Me._subsection_id = value)  _
						= false) Then
				Me._subsection_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int NOT NULL")>  _
	Public Property sequence_number() As Integer
		Get
			Return Me._sequence_number
		End Get
		Set
			If ((Me._sequence_number = value)  _
						= false) Then
				Me._sequence_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loadout_checklist_text", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property loadout_checklist_text() As String
		Get
			Return Me._loadout_checklist_text
		End Get
		Set
			If (String.Equals(Me._loadout_checklist_text, value) = false) Then
				Me._loadout_checklist_text = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbHyperlinkRecordsResult
	
	Private _hyperlink_name As String
	
	Private _hyperlink_url As String
	
	Private _hyperlink_type As String
	
	Private _hyperlink_type_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hyperlink_name", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property hyperlink_name() As String
		Get
			Return Me._hyperlink_name
		End Get
		Set
			If (String.Equals(Me._hyperlink_name, value) = false) Then
				Me._hyperlink_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hyperlink_url", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property hyperlink_url() As String
		Get
			Return Me._hyperlink_url
		End Get
		Set
			If (String.Equals(Me._hyperlink_url, value) = false) Then
				Me._hyperlink_url = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hyperlink_type", DbType:="VarChar(10)")>  _
	Public Property hyperlink_type() As String
		Get
			Return Me._hyperlink_type
		End Get
		Set
			If (String.Equals(Me._hyperlink_type, value) = false) Then
				Me._hyperlink_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hyperlink_type_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property hyperlink_type_desc() As String
		Get
			Return Me._hyperlink_type_desc
		End Get
		Set
			If (String.Equals(Me._hyperlink_type_desc, value) = false) Then
				Me._hyperlink_type_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispServiceCompetenciesResult
	
	Private _competency_id As String
	
	Private _member_title_id As String
	
	Private _competency_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_id() As String
		Get
			Return Me._competency_id
		End Get
		Set
			If (String.Equals(Me._competency_id, value) = false) Then
				Me._competency_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_desc", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_desc() As String
		Get
			Return Me._competency_desc
		End Get
		Set
			If (String.Equals(Me._competency_desc, value) = false) Then
				Me._competency_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbReferencedPersonnelListResult
	
	Private _employee_id As String
	
	Private _name As String
	
	Private _referenced_employee_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referenced_employee_id", DbType:="VarChar(20)")>  _
	Public Property referenced_employee_id() As String
		Get
			Return Me._referenced_employee_id
		End Get
		Set
			If (String.Equals(Me._referenced_employee_id, value) = false) Then
				Me._referenced_employee_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbReferencedServiceListResult
	
	Private _service_id As String
	
	Private _referenced_service_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property service_id() As String
		Get
			Return Me._service_id
		End Get
		Set
			If (String.Equals(Me._service_id, value) = false) Then
				Me._service_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referenced_service_id", DbType:="VarChar(15)")>  _
	Public Property referenced_service_id() As String
		Get
			Return Me._referenced_service_id
		End Get
		Set
			If (String.Equals(Me._referenced_service_id, value) = false) Then
				Me._referenced_service_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchExportDatetimeResult
	
	Private _dispatch_export_datetime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_export_datetime", DbType:="SmallDateTime")>  _
	Public Property dispatch_export_datetime() As System.Nullable(Of Date)
		Get
			Return Me._dispatch_export_datetime
		End Get
		Set
			If (Me._dispatch_export_datetime.Equals(value) = false) Then
				Me._dispatch_export_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoItemSapRowNumbersResult
	
	Private _sap_export_row_number As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_row_number", DbType:="Int")>  _
	Public Property sap_export_row_number() As System.Nullable(Of Integer)
		Get
			Return Me._sap_export_row_number
		End Get
		Set
			If (Me._sap_export_row_number.Equals(value) = false) Then
				Me._sap_export_row_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoSapExportRequiredFieldsResult
	
	Private _well_name As String
	
	Private _sold_to_id As System.Nullable(Of Integer)
	
	Private _sap_sales_document_number As String
	
	Private _quote_number As String
	
	Private _exported_to_sap_flag As Boolean
	
	Private _country_code As String
	
	Private _billing_email As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="Int")>  _
	Public Property sold_to_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_id
		End Get
		Set
			If (Me._sold_to_id.Equals(value) = false) Then
				Me._sold_to_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_sales_document_number", DbType:="VarChar(30)")>  _
	Public Property sap_sales_document_number() As String
		Get
			Return Me._sap_sales_document_number
		End Get
		Set
			If (String.Equals(Me._sap_sales_document_number, value) = false) Then
				Me._sap_sales_document_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number", DbType:="VarChar(40)")>  _
	Public Property quote_number() As String
		Get
			Return Me._quote_number
		End Get
		Set
			If (String.Equals(Me._quote_number, value) = false) Then
				Me._quote_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_to_sap_flag", DbType:="Bit NOT NULL")>  _
	Public Property exported_to_sap_flag() As Boolean
		Get
			Return Me._exported_to_sap_flag
		End Get
		Set
			If ((Me._exported_to_sap_flag = value)  _
						= false) Then
				Me._exported_to_sap_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", DbType:="Char(2)")>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me._country_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billing_email", DbType:="VarChar(128)")>  _
	Public Property billing_email() As String
		Get
			Return Me._billing_email
		End Get
		Set
			If (String.Equals(Me._billing_email, value) = false) Then
				Me._billing_email = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetExportedQuotesLinkedToFsoCountResult
	
	Private _exported_quote_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_quote_count", DbType:="Int")>  _
	Public Property exported_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._exported_quote_count
		End Get
		Set
			If (Me._exported_quote_count.Equals(value) = false) Then
				Me._exported_quote_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class ImportSapMasterQuoteDataResult
	
	Private _import_status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_import_status", DbType:="VarChar(22) NOT NULL", CanBeNull:=false)>  _
	Public Property import_status() As String
		Get
			Return Me._import_status
		End Get
		Set
			If (String.Equals(Me._import_status, value) = false) Then
				Me._import_status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispRemoteServiceEmailAddressesResult
	
	Private _service_id As String
	
	Private _email As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property service_id() As String
		Get
			Return Me._service_id
		End Get
		Set
			If (String.Equals(Me._service_id, value) = false) Then
				Me._service_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispRemoteServiceEmailDispatchDetailsResult
	
	Private _formatted_disp_id As String
	
	Private _well_name As String
	
	Private _company_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me._company_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchAssetSelectionConflictDetailsResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _avail_desc As String
	
	Private _formatted_disp_id As String
	
	Private _work_order As System.Nullable(Of Integer)
	
	Private _asset_exists_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30)")>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="Int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me._avail_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_desc", DbType:="VarChar(25)")>  _
	Public Property avail_desc() As String
		Get
			Return Me._avail_desc
		End Get
		Set
			If (String.Equals(Me._avail_desc, value) = false) Then
				Me._avail_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_work_order", DbType:="Int")>  _
	Public Property work_order() As System.Nullable(Of Integer)
		Get
			Return Me._work_order
		End Get
		Set
			If (Me._work_order.Equals(value) = false) Then
				Me._work_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_exists_flag", DbType:="Bit")>  _
	Public Property asset_exists_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_exists_flag
		End Get
		Set
			If (Me._asset_exists_flag.Equals(value) = false) Then
				Me._asset_exists_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoQuoteCommentRecordsResult
	
	Private _rec_id As Integer
	
	Private _comment As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(1500) NOT NULL", CanBeNull:=false)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me._comment = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetSeriesSubassemblySeriesListResult
	
	Private _parent_series_id As String
	
	Private _series_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property parent_series_id() As String
		Get
			Return Me._parent_series_id
		End Get
		Set
			If (String.Equals(Me._parent_series_id, value) = false) Then
				Me._parent_series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetExportXrefDataResult
	
	Private _rec_id As Integer
	
	Private _item_row_order As Integer
	
	Private _item_column_number As Integer
	
	Private _export_section_name As String
	
	Private _vdis_field_name As String
	
	Private _literal_value As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_row_order", DbType:="Int NOT NULL")>  _
	Public Property item_row_order() As Integer
		Get
			Return Me._item_row_order
		End Get
		Set
			If ((Me._item_row_order = value)  _
						= false) Then
				Me._item_row_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_column_number", DbType:="Int NOT NULL")>  _
	Public Property item_column_number() As Integer
		Get
			Return Me._item_column_number
		End Get
		Set
			If ((Me._item_column_number = value)  _
						= false) Then
				Me._item_column_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_export_section_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property export_section_name() As String
		Get
			Return Me._export_section_name
		End Get
		Set
			If (String.Equals(Me._export_section_name, value) = false) Then
				Me._export_section_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vdis_field_name", DbType:="VarChar(50)")>  _
	Public Property vdis_field_name() As String
		Get
			Return Me._vdis_field_name
		End Get
		Set
			If (String.Equals(Me._vdis_field_name, value) = false) Then
				Me._vdis_field_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_literal_value", DbType:="VarChar(50)")>  _
	Public Property literal_value() As String
		Get
			Return Me._literal_value
		End Get
		Set
			If (String.Equals(Me._literal_value, value) = false) Then
				Me._literal_value = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRunParameterResponseTypesResult
	
	Private _response_type_id As String
	
	Private _response_type_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me._response_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_desc() As String
		Get
			Return Me._response_type_desc
		End Get
		Set
			If (String.Equals(Me._response_type_desc, value) = false) Then
				Me._response_type_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispRunParameterImportRunListResult
	
	Private _run_rec_id As Integer
	
	Private _op_trip As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_run_rec_id", DbType:="Int NOT NULL")>  _
	Public Property run_rec_id() As Integer
		Get
			Return Me._run_rec_id
		End Get
		Set
			If ((Me._run_rec_id = value)  _
						= false) Then
				Me._run_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op_trip", DbType:="VarChar(32)")>  _
	Public Property op_trip() As String
		Get
			Return Me._op_trip
		End Get
		Set
			If (String.Equals(Me._op_trip, value) = false) Then
				Me._op_trip = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailureEventLikelihoodListResult
	
	Private _likelihood_id As Char
	
	Private _likelihood_desc As String
	
	Private _event_history As String
	
	Private _event_frequency As String
	
	Private _event_probability As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_likelihood_id", DbType:="Char(1) NOT NULL")>  _
	Public Property likelihood_id() As Char
		Get
			Return Me._likelihood_id
		End Get
		Set
			If ((Me._likelihood_id = value)  _
						= false) Then
				Me._likelihood_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_likelihood_desc", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property likelihood_desc() As String
		Get
			Return Me._likelihood_desc
		End Get
		Set
			If (String.Equals(Me._likelihood_desc, value) = false) Then
				Me._likelihood_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_history", DbType:="VarChar(80)")>  _
	Public Property event_history() As String
		Get
			Return Me._event_history
		End Get
		Set
			If (String.Equals(Me._event_history, value) = false) Then
				Me._event_history = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_frequency", DbType:="VarChar(80)")>  _
	Public Property event_frequency() As String
		Get
			Return Me._event_frequency
		End Get
		Set
			If (String.Equals(Me._event_frequency, value) = false) Then
				Me._event_frequency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_probability", DbType:="VarChar(30)")>  _
	Public Property event_probability() As String
		Get
			Return Me._event_probability
		End Get
		Set
			If (String.Equals(Me._event_probability, value) = false) Then
				Me._event_probability = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailureEventSeverityListResult
	
	Private _severity_id As Integer
	
	Private _severity_desc As String
	
	Private _ponc_desc As String
	
	Private _npt_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_id", DbType:="Int NOT NULL")>  _
	Public Property severity_id() As Integer
		Get
			Return Me._severity_id
		End Get
		Set
			If ((Me._severity_id = value)  _
						= false) Then
				Me._severity_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_desc", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property severity_desc() As String
		Get
			Return Me._severity_desc
		End Get
		Set
			If (String.Equals(Me._severity_desc, value) = false) Then
				Me._severity_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ponc_desc", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ponc_desc() As String
		Get
			Return Me._ponc_desc
		End Get
		Set
			If (String.Equals(Me._ponc_desc, value) = false) Then
				Me._ponc_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_npt_desc", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property npt_desc() As String
		Get
			Return Me._npt_desc
		End Get
		Set
			If (String.Equals(Me._npt_desc, value) = false) Then
				Me._npt_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispRunAssetsResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFimpJobStageListResult
	
	Private _section_id As Integer
	
	Private _section_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="Int NOT NULL")>  _
	Public Property section_id() As Integer
		Get
			Return Me._section_id
		End Get
		Set
			If ((Me._section_id = value)  _
						= false) Then
				Me._section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property section_name() As String
		Get
			Return Me._section_name
		End Get
		Set
			If (String.Equals(Me._section_name, value) = false) Then
				Me._section_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFimpAssetIdListResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _current_plant_id As String
	
	Private _series_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="VarChar(10)")>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me._current_plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispAssetIdListResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPoncCategoriesResult
	
	Private _rec_id As Integer
	
	Private _section_id As Integer
	
	Private _category_text As String
	
	Private _display_order As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="Int NOT NULL")>  _
	Public Property section_id() As Integer
		Get
			Return Me._section_id
		End Get
		Set
			If ((Me._section_id = value)  _
						= false) Then
				Me._section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_text", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property category_text() As String
		Get
			Return Me._category_text
		End Get
		Set
			If (String.Equals(Me._category_text, value) = false) Then
				Me._category_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int NOT NULL")>  _
	Public Property display_order() As Integer
		Get
			Return Me._display_order
		End Get
		Set
			If ((Me._display_order = value)  _
						= false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPoncCategorySectionsResult
	
	Private _rec_id As Integer
	
	Private _section_name As String
	
	Private _display_order As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property section_name() As String
		Get
			Return Me._section_name
		End Get
		Set
			If (String.Equals(Me._section_name, value) = false) Then
				Me._section_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int NOT NULL")>  _
	Public Property display_order() As Integer
		Get
			Return Me._display_order
		End Get
		Set
			If ((Me._display_order = value)  _
						= false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetProcedureDocumentTypesResult
	
	Private _rec_id As Integer
	
	Private _document_type As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property document_type() As String
		Get
			Return Me._document_type
		End Get
		Set
			If (String.Equals(Me._document_type, value) = false) Then
				Me._document_type = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCaseWorkerListResult
	
	Private _user_id As String
	
	Private _name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me._user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFimpNotificationEmailListResult
	
	Private _name As String
	
	Private _email As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetNotificationConfigItemsResult
	
	Private _notification_type_id As Integer
	
	Private _notification_section As String
	
	Private _vdis_field_name As String
	
	Private _friendly_field_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_type_id", DbType:="Int NOT NULL")>  _
	Public Property notification_type_id() As Integer
		Get
			Return Me._notification_type_id
		End Get
		Set
			If ((Me._notification_type_id = value)  _
						= false) Then
				Me._notification_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_section", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property notification_section() As String
		Get
			Return Me._notification_section
		End Get
		Set
			If (String.Equals(Me._notification_section, value) = false) Then
				Me._notification_section = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vdis_field_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property vdis_field_name() As String
		Get
			Return Me._vdis_field_name
		End Get
		Set
			If (String.Equals(Me._vdis_field_name, value) = false) Then
				Me._vdis_field_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_friendly_field_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property friendly_field_name() As String
		Get
			Return Me._friendly_field_name
		End Get
		Set
			If (String.Equals(Me._friendly_field_name, value) = false) Then
				Me._friendly_field_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetNotificationSectionListResult
	
	Private _notification_type_id As Integer
	
	Private _notification_section_id As String
	
	Private _notification_section As String
	
	Private _display_order As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_type_id", DbType:="Int NOT NULL")>  _
	Public Property notification_type_id() As Integer
		Get
			Return Me._notification_type_id
		End Get
		Set
			If ((Me._notification_type_id = value)  _
						= false) Then
				Me._notification_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_section_id", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property notification_section_id() As String
		Get
			Return Me._notification_section_id
		End Get
		Set
			If (String.Equals(Me._notification_section_id, value) = false) Then
				Me._notification_section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notification_section", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property notification_section() As String
		Get
			Return Me._notification_section
		End Get
		Set
			If (String.Equals(Me._notification_section, value) = false) Then
				Me._notification_section = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int NOT NULL")>  _
	Public Property display_order() As Integer
		Get
			Return Me._display_order
		End Get
		Set
			If ((Me._display_order = value)  _
						= false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPriceScheduleRecordsResult
	
	Private _price_schedule_id As String
	
	Private _price_schedule_desc As String
	
	Private _sap_price_schedule_id As String
	
	Private _sap_export_code As String
	
	Private _gpi_code As String
	
	Private _material As String
	
	Private _description As String
	
	Private _item As String
	
	Private _contract As String
	
	Private _special_report_flag As Boolean
	
	Private _inactive_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_schedule_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property price_schedule_id() As String
		Get
			Return Me._price_schedule_id
		End Get
		Set
			If (String.Equals(Me._price_schedule_id, value) = false) Then
				Me._price_schedule_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_schedule_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property price_schedule_desc() As String
		Get
			Return Me._price_schedule_desc
		End Get
		Set
			If (String.Equals(Me._price_schedule_desc, value) = false) Then
				Me._price_schedule_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_price_schedule_id", DbType:="VarChar(20)")>  _
	Public Property sap_price_schedule_id() As String
		Get
			Return Me._sap_price_schedule_id
		End Get
		Set
			If (String.Equals(Me._sap_price_schedule_id, value) = false) Then
				Me._sap_price_schedule_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_code", DbType:="VarChar(10)")>  _
	Public Property sap_export_code() As String
		Get
			Return Me._sap_export_code
		End Get
		Set
			If (String.Equals(Me._sap_export_code, value) = false) Then
				Me._sap_export_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi_code", DbType:="VarChar(30)")>  _
	Public Property gpi_code() As String
		Get
			Return Me._gpi_code
		End Get
		Set
			If (String.Equals(Me._gpi_code, value) = false) Then
				Me._gpi_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(30)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(50)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item", DbType:="VarChar(30)")>  _
	Public Property item() As String
		Get
			Return Me._item
		End Get
		Set
			If (String.Equals(Me._item, value) = false) Then
				Me._item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract", DbType:="VarChar(10)")>  _
	Public Property contract() As String
		Get
			Return Me._contract
		End Get
		Set
			If (String.Equals(Me._contract, value) = false) Then
				Me._contract = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_special_report_flag", DbType:="Bit NOT NULL")>  _
	Public Property special_report_flag() As Boolean
		Get
			Return Me._special_report_flag
		End Get
		Set
			If ((Me._special_report_flag = value)  _
						= false) Then
				Me._special_report_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="Bit NOT NULL")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me._inactive_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailedItemListResult
	
	Private _rec_id As Integer
	
	Private _failed_item_desc As String
	
	Private _user_description_required_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failed_item_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property failed_item_desc() As String
		Get
			Return Me._failed_item_desc
		End Get
		Set
			If (String.Equals(Me._failed_item_desc, value) = false) Then
				Me._failed_item_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_description_required_flag", DbType:="Bit NOT NULL")>  _
	Public Property user_description_required_flag() As Boolean
		Get
			Return Me._user_description_required_flag
		End Get
		Set
			If ((Me._user_description_required_flag = value)  _
						= false) Then
				Me._user_description_required_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailureGroupListResult
	
	Private _rec_id As Integer
	
	Private _failure_group_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_group_desc", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property failure_group_desc() As String
		Get
			Return Me._failure_group_desc
		End Get
		Set
			If (String.Equals(Me._failure_group_desc, value) = false) Then
				Me._failure_group_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailureMechanismCategoryListResult
	
	Private _rec_id As Integer
	
	Private _category_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_desc", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property category_desc() As String
		Get
			Return Me._category_desc
		End Get
		Set
			If (String.Equals(Me._category_desc, value) = false) Then
				Me._category_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailureMechanismListResult
	
	Private _rec_id As Integer
	
	Private _mechanism_desc As String
	
	Private _failure_mechanism_category_id As Integer
	
	Private _user_description_required_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mechanism_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mechanism_desc() As String
		Get
			Return Me._mechanism_desc
		End Get
		Set
			If (String.Equals(Me._mechanism_desc, value) = false) Then
				Me._mechanism_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_failure_mechanism_category_id", DbType:="Int NOT NULL")>  _
	Public Property failure_mechanism_category_id() As Integer
		Get
			Return Me._failure_mechanism_category_id
		End Get
		Set
			If ((Me._failure_mechanism_category_id = value)  _
						= false) Then
				Me._failure_mechanism_category_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_description_required_flag", DbType:="Bit NOT NULL")>  _
	Public Property user_description_required_flag() As Boolean
		Get
			Return Me._user_description_required_flag
		End Get
		Set
			If ((Me._user_description_required_flag = value)  _
						= false) Then
				Me._user_description_required_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetImmediateCauseListResult
	
	Private _rec_id As Integer
	
	Private _immediate_cause_desc As String
	
	Private _user_description_required_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_immediate_cause_desc", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property immediate_cause_desc() As String
		Get
			Return Me._immediate_cause_desc
		End Get
		Set
			If (String.Equals(Me._immediate_cause_desc, value) = false) Then
				Me._immediate_cause_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_description_required_flag", DbType:="Bit NOT NULL")>  _
	Public Property user_description_required_flag() As Boolean
		Get
			Return Me._user_description_required_flag
		End Get
		Set
			If ((Me._user_description_required_flag = value)  _
						= false) Then
				Me._user_description_required_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetImmediateCauseCategoryListResult
	
	Private _rec_id As Integer
	
	Private _category_desc As String
	
	Private _category_type_id As String
	
	Private _category_type_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property category_desc() As String
		Get
			Return Me._category_desc
		End Get
		Set
			If (String.Equals(Me._category_desc, value) = false) Then
				Me._category_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_type_id", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property category_type_id() As String
		Get
			Return Me._category_type_id
		End Get
		Set
			If (String.Equals(Me._category_type_id, value) = false) Then
				Me._category_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_type_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property category_type_desc() As String
		Get
			Return Me._category_type_desc
		End Get
		Set
			If (String.Equals(Me._category_type_desc, value) = false) Then
				Me._category_type_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCompanyListResult
	
	Private _oilcomp_id As String
	
	Private _name As String
	
	Private _parent1 As String
	
	Private _country As String
	
	Private _inactive_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent1", DbType:="VarChar(20)")>  _
	Public Property parent1() As String
		Get
			Return Me._parent1
		End Get
		Set
			If (String.Equals(Me._parent1, value) = false) Then
				Me._parent1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country", DbType:="VarChar(5)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me._country = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="Bit NOT NULL")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me._inactive_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailureRiskMatrixRecordsResult
	
	Private _likelihood_id As Char
	
	Private _severity_id As Integer
	
	Private _risk_level As Char
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_likelihood_id", DbType:="Char(1) NOT NULL")>  _
	Public Property likelihood_id() As Char
		Get
			Return Me._likelihood_id
		End Get
		Set
			If ((Me._likelihood_id = value)  _
						= false) Then
				Me._likelihood_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_id", DbType:="Int NOT NULL")>  _
	Public Property severity_id() As Integer
		Get
			Return Me._severity_id
		End Get
		Set
			If ((Me._severity_id = value)  _
						= false) Then
				Me._severity_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_risk_level", DbType:="Char(1) NOT NULL")>  _
	Public Property risk_level() As Char
		Get
			Return Me._risk_level
		End Get
		Set
			If ((Me._risk_level = value)  _
						= false) Then
				Me._risk_level = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckFimpUserCanAccessDispatchResult
	
	Private _user_can_access_dispatch As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_can_access_dispatch", DbType:="Bit")>  _
	Public Property user_can_access_dispatch() As System.Nullable(Of Boolean)
		Get
			Return Me._user_can_access_dispatch
		End Get
		Set
			If (Me._user_can_access_dispatch.Equals(value) = false) Then
				Me._user_can_access_dispatch = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispJobCompletedDateResult
	
	Private _crew_finished_job_datetime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_finished_job_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_finished_job_datetime
		End Get
		Set
			If (Me._crew_finished_job_datetime.Equals(value) = false) Then
				Me._crew_finished_job_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispRunOpTripListResult
	
	Private _rec_id As Integer
	
	Private _op_trip As String
	
	Private _op_num As System.Nullable(Of Integer)
	
	Private _trip_num As System.Nullable(Of Integer)
	
	Private _operating_time_hours As System.Nullable(Of Single)
	
	Private _lost_time_hours As System.Nullable(Of Single)
	
	Private _out_datetime As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op_trip", DbType:="VarChar(32)")>  _
	Public Property op_trip() As String
		Get
			Return Me._op_trip
		End Get
		Set
			If (String.Equals(Me._op_trip, value) = false) Then
				Me._op_trip = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op_num", DbType:="Int")>  _
	Public Property op_num() As System.Nullable(Of Integer)
		Get
			Return Me._op_num
		End Get
		Set
			If (Me._op_num.Equals(value) = false) Then
				Me._op_num = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trip_num", DbType:="Int")>  _
	Public Property trip_num() As System.Nullable(Of Integer)
		Get
			Return Me._trip_num
		End Get
		Set
			If (Me._trip_num.Equals(value) = false) Then
				Me._trip_num = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time_hours", DbType:="Real")>  _
	Public Property operating_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._operating_time_hours
		End Get
		Set
			If (Me._operating_time_hours.Equals(value) = false) Then
				Me._operating_time_hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_hours", DbType:="Real")>  _
	Public Property lost_time_hours() As System.Nullable(Of Single)
		Get
			Return Me._lost_time_hours
		End Get
		Set
			If (Me._lost_time_hours.Equals(value) = false) Then
				Me._lost_time_hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_out_datetime", DbType:="SmallDateTime")>  _
	Public Property out_datetime() As System.Nullable(Of Date)
		Get
			Return Me._out_datetime
		End Get
		Set
			If (Me._out_datetime.Equals(value) = false) Then
				Me._out_datetime = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRootCauseCategoryListResult
	
	Private _rec_id As Integer
	
	Private _category_desc As String
	
	Private _category_type_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_desc", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property category_desc() As String
		Get
			Return Me._category_desc
		End Get
		Set
			If (String.Equals(Me._category_desc, value) = false) Then
				Me._category_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_type_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property category_type_desc() As String
		Get
			Return Me._category_type_desc
		End Get
		Set
			If (String.Equals(Me._category_type_desc, value) = false) Then
				Me._category_type_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRootCauseListResult
	
	Private _rec_id As Integer
	
	Private _root_cause_desc As String
	
	Private _user_description_required_flag As Boolean
	
	Private _has_procedure_documents_flag As System.Nullable(Of Boolean)
	
	Private _has_failed_component_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_desc", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property root_cause_desc() As String
		Get
			Return Me._root_cause_desc
		End Get
		Set
			If (String.Equals(Me._root_cause_desc, value) = false) Then
				Me._root_cause_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_description_required_flag", DbType:="Bit NOT NULL")>  _
	Public Property user_description_required_flag() As Boolean
		Get
			Return Me._user_description_required_flag
		End Get
		Set
			If ((Me._user_description_required_flag = value)  _
						= false) Then
				Me._user_description_required_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_has_procedure_documents_flag", DbType:="Bit")>  _
	Public Property has_procedure_documents_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._has_procedure_documents_flag
		End Get
		Set
			If (Me._has_procedure_documents_flag.Equals(value) = false) Then
				Me._has_procedure_documents_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_has_failed_component_flag", DbType:="Bit")>  _
	Public Property has_failed_component_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._has_failed_component_flag
		End Get
		Set
			If (Me._has_failed_component_flag.Equals(value) = false) Then
				Me._has_failed_component_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetReportLinksResult
	
	Private _name As String
	
	Private _uri As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uri", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property uri() As String
		Get
			Return Me._uri
		End Get
		Set
			If (String.Equals(Me._uri, value) = false) Then
				Me._uri = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCaseWorkerDetailsResult
	
	Private _user_can_approve_irb As System.Nullable(Of Boolean)
	
	Private _user_can_close_other_cw_incident As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_can_approve_irb", DbType:="Bit")>  _
	Public Property user_can_approve_irb() As System.Nullable(Of Boolean)
		Get
			Return Me._user_can_approve_irb
		End Get
		Set
			If (Me._user_can_approve_irb.Equals(value) = false) Then
				Me._user_can_approve_irb = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_can_close_other_cw_incident", DbType:="Bit")>  _
	Public Property user_can_close_other_cw_incident() As System.Nullable(Of Boolean)
		Get
			Return Me._user_can_close_other_cw_incident
		End Get
		Set
			If (Me._user_can_close_other_cw_incident.Equals(value) = false) Then
				Me._user_can_close_other_cw_incident = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPerfServiceToolListResult
	
	Private _tool_id As String
	
	Private _descrip As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tool_id", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property tool_id() As String
		Get
			Return Me._tool_id
		End Get
		Set
			If (String.Equals(Me._tool_id, value) = false) Then
				Me._tool_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descrip", DbType:="VarChar(50)")>  _
	Public Property descrip() As String
		Get
			Return Me._descrip
		End Get
		Set
			If (String.Equals(Me._descrip, value) = false) Then
				Me._descrip = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispFimpRecordsResult
	
	Private _rec_id As Integer
	
	Private _asset_id As String
	
	Private _subject As String
	
	Private _op_num As System.Nullable(Of Integer)
	
	Private _trip_num As System.Nullable(Of Integer)
	
	Private _user_can_delete_incident_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="VarChar(50)")>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me._subject = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_op_num", DbType:="Int")>  _
	Public Property op_num() As System.Nullable(Of Integer)
		Get
			Return Me._op_num
		End Get
		Set
			If (Me._op_num.Equals(value) = false) Then
				Me._op_num = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trip_num", DbType:="Int")>  _
	Public Property trip_num() As System.Nullable(Of Integer)
		Get
			Return Me._trip_num
		End Get
		Set
			If (Me._trip_num.Equals(value) = false) Then
				Me._trip_num = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_can_delete_incident_flag", DbType:="Bit")>  _
	Public Property user_can_delete_incident_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._user_can_delete_incident_flag
		End Get
		Set
			If (Me._user_can_delete_incident_flag.Equals(value) = false) Then
				Me._user_can_delete_incident_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCorrectiveActionOwnersListResult
	
	Private _rec_id As Integer
	
	Private _owner_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owner_name", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property owner_name() As String
		Get
			Return Me._owner_name
		End Get
		Set
			If (String.Equals(Me._owner_name, value) = false) Then
				Me._owner_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFimpCorrectiveActionRecordResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFailureEventListResult
	
	Private _rec_id As Integer
	
	Private _event_desc As String
	
	Private _severity_id As Integer
	
	Private _user_description_required_flag As System.Nullable(Of Boolean)
	
	Private _can_be_exported_flag As System.Nullable(Of Boolean)
	
	Private _exclusive_to_dist_ids As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_desc", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property event_desc() As String
		Get
			Return Me._event_desc
		End Get
		Set
			If (String.Equals(Me._event_desc, value) = false) Then
				Me._event_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_id", DbType:="Int NOT NULL")>  _
	Public Property severity_id() As Integer
		Get
			Return Me._severity_id
		End Get
		Set
			If ((Me._severity_id = value)  _
						= false) Then
				Me._severity_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_description_required_flag", DbType:="Bit")>  _
	Public Property user_description_required_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._user_description_required_flag
		End Get
		Set
			If (Me._user_description_required_flag.Equals(value) = false) Then
				Me._user_description_required_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_can_be_exported_flag", DbType:="Bit")>  _
	Public Property can_be_exported_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._can_be_exported_flag
		End Get
		Set
			If (Me._can_be_exported_flag.Equals(value) = false) Then
				Me._can_be_exported_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exclusive_to_dist_ids", DbType:="VarChar(1000)")>  _
	Public Property exclusive_to_dist_ids() As String
		Get
			Return Me._exclusive_to_dist_ids
		End Get
		Set
			If (String.Equals(Me._exclusive_to_dist_ids, value) = false) Then
				Me._exclusive_to_dist_ids = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckFimpDocRecordExistsResult
	
	Private _found As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_found", DbType:="Bit")>  _
	Public Property found() As System.Nullable(Of Boolean)
		Get
			Return Me._found
		End Get
		Set
			If (Me._found.Equals(value) = false) Then
				Me._found = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFimpCommunicationRecordResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFimpCommunicationLogItemResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFimpContributingFactorRecordResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetPmPointCalculationTriggerRecordsResult
	
	Private _rec_id As Byte
	
	Private _trigger_name As String
	
	Private _trigger_description As String
	
	Private _value_origin As String
	
	Private _value_range_is_exclusive_flag As Boolean
	
	Private _value_additional_criteria_flag As Boolean
	
	Private _apply_op_time_modifier_flag As Boolean
	
	Private _required_function_rec_id As System.Nullable(Of Byte)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="TinyInt NOT NULL")>  _
	Public Property rec_id() As Byte
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trigger_name", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property trigger_name() As String
		Get
			Return Me._trigger_name
		End Get
		Set
			If (String.Equals(Me._trigger_name, value) = false) Then
				Me._trigger_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trigger_description", DbType:="VarChar(200)")>  _
	Public Property trigger_description() As String
		Get
			Return Me._trigger_description
		End Get
		Set
			If (String.Equals(Me._trigger_description, value) = false) Then
				Me._trigger_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_origin", DbType:="VarChar(50)")>  _
	Public Property value_origin() As String
		Get
			Return Me._value_origin
		End Get
		Set
			If (String.Equals(Me._value_origin, value) = false) Then
				Me._value_origin = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_range_is_exclusive_flag", DbType:="Bit NOT NULL")>  _
	Public Property value_range_is_exclusive_flag() As Boolean
		Get
			Return Me._value_range_is_exclusive_flag
		End Get
		Set
			If ((Me._value_range_is_exclusive_flag = value)  _
						= false) Then
				Me._value_range_is_exclusive_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value_additional_criteria_flag", DbType:="Bit NOT NULL")>  _
	Public Property value_additional_criteria_flag() As Boolean
		Get
			Return Me._value_additional_criteria_flag
		End Get
		Set
			If ((Me._value_additional_criteria_flag = value)  _
						= false) Then
				Me._value_additional_criteria_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apply_op_time_modifier_flag", DbType:="Bit NOT NULL")>  _
	Public Property apply_op_time_modifier_flag() As Boolean
		Get
			Return Me._apply_op_time_modifier_flag
		End Get
		Set
			If ((Me._apply_op_time_modifier_flag = value)  _
						= false) Then
				Me._apply_op_time_modifier_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_required_function_rec_id", DbType:="TinyInt")>  _
	Public Property required_function_rec_id() As System.Nullable(Of Byte)
		Get
			Return Me._required_function_rec_id
		End Get
		Set
			If (Me._required_function_rec_id.Equals(value) = false) Then
				Me._required_function_rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckDispPjbReferenceIsValidResult
	
	Private _current_pjb_template_status As String
	
	Private _current_pjb_reference_count As System.Nullable(Of Integer)
	
	Private _current_pjb_psl As String
	
	Private _current_pjb_dist_id As System.Nullable(Of Integer)
	
	Private _referenced_pjb_template_status As String
	
	Private _referenced_pjb_referenced_disp_id As System.Nullable(Of Integer)
	
	Private _referenced_pjb_psl As String
	
	Private _referenced_pjb_dist_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_pjb_template_status", DbType:="VarChar(20)")>  _
	Public Property current_pjb_template_status() As String
		Get
			Return Me._current_pjb_template_status
		End Get
		Set
			If (String.Equals(Me._current_pjb_template_status, value) = false) Then
				Me._current_pjb_template_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_pjb_reference_count", DbType:="Int")>  _
	Public Property current_pjb_reference_count() As System.Nullable(Of Integer)
		Get
			Return Me._current_pjb_reference_count
		End Get
		Set
			If (Me._current_pjb_reference_count.Equals(value) = false) Then
				Me._current_pjb_reference_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_pjb_psl", DbType:="Char(2)")>  _
	Public Property current_pjb_psl() As String
		Get
			Return Me._current_pjb_psl
		End Get
		Set
			If (String.Equals(Me._current_pjb_psl, value) = false) Then
				Me._current_pjb_psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_pjb_dist_id", DbType:="Int")>  _
	Public Property current_pjb_dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._current_pjb_dist_id
		End Get
		Set
			If (Me._current_pjb_dist_id.Equals(value) = false) Then
				Me._current_pjb_dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referenced_pjb_template_status", DbType:="VarChar(20)")>  _
	Public Property referenced_pjb_template_status() As String
		Get
			Return Me._referenced_pjb_template_status
		End Get
		Set
			If (String.Equals(Me._referenced_pjb_template_status, value) = false) Then
				Me._referenced_pjb_template_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referenced_pjb_referenced_disp_id", DbType:="Int")>  _
	Public Property referenced_pjb_referenced_disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._referenced_pjb_referenced_disp_id
		End Get
		Set
			If (Me._referenced_pjb_referenced_disp_id.Equals(value) = false) Then
				Me._referenced_pjb_referenced_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referenced_pjb_psl", DbType:="Char(2)")>  _
	Public Property referenced_pjb_psl() As String
		Get
			Return Me._referenced_pjb_psl
		End Get
		Set
			If (String.Equals(Me._referenced_pjb_psl, value) = false) Then
				Me._referenced_pjb_psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referenced_pjb_dist_id", DbType:="Int")>  _
	Public Property referenced_pjb_dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._referenced_pjb_dist_id
		End Get
		Set
			If (Me._referenced_pjb_dist_id.Equals(value) = false) Then
				Me._referenced_pjb_dist_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPerfParametersResult
	
	Private _param_id As Integer
	
	Private _param_text As String
	
	Private _response_type_id As String
	
	Private _sequence_number As Integer
	
	Private _response_meta_data As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_id", DbType:="Int NOT NULL")>  _
	Public Property param_id() As Integer
		Get
			Return Me._param_id
		End Get
		Set
			If ((Me._param_id = value)  _
						= false) Then
				Me._param_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_text", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property param_text() As String
		Get
			Return Me._param_text
		End Get
		Set
			If (String.Equals(Me._param_text, value) = false) Then
				Me._param_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me._response_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int NOT NULL")>  _
	Public Property sequence_number() As Integer
		Get
			Return Me._sequence_number
		End Get
		Set
			If ((Me._sequence_number = value)  _
						= false) Then
				Me._sequence_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_meta_data", DbType:="VarChar(100)")>  _
	Public Property response_meta_data() As String
		Get
			Return Me._response_meta_data
		End Get
		Set
			If (String.Equals(Me._response_meta_data, value) = false) Then
				Me._response_meta_data = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispAssetSubassemblyItemsResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPerfParameterTypeListResult
	
	Private _rec_id As Integer
	
	Private _param_text As String
	
	Private _response_type_id As String
	
	Private _add_to_stage_report_flag As System.Nullable(Of Boolean)
	
	Private _has_meta_data_flag As Boolean
	
	Private _can_add_to_stage_report_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_text", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property param_text() As String
		Get
			Return Me._param_text
		End Get
		Set
			If (String.Equals(Me._param_text, value) = false) Then
				Me._param_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me._response_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_add_to_stage_report_flag", DbType:="Bit")>  _
	Public Property add_to_stage_report_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._add_to_stage_report_flag
		End Get
		Set
			If (Me._add_to_stage_report_flag.Equals(value) = false) Then
				Me._add_to_stage_report_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_has_meta_data_flag", DbType:="Bit NOT NULL")>  _
	Public Property has_meta_data_flag() As Boolean
		Get
			Return Me._has_meta_data_flag
		End Get
		Set
			If ((Me._has_meta_data_flag = value)  _
						= false) Then
				Me._has_meta_data_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_can_add_to_stage_report_flag", DbType:="Bit NOT NULL")>  _
	Public Property can_add_to_stage_report_flag() As Boolean
		Get
			Return Me._can_add_to_stage_report_flag
		End Get
		Set
			If ((Me._can_add_to_stage_report_flag = value)  _
						= false) Then
				Me._can_add_to_stage_report_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPerfParameterResponseTypesResult
	
	Private _response_type_id As String
	
	Private _response_type_desc As String
	
	Private _has_meta_data_flag As Boolean
	
	Private _single_entry_flag As Boolean
	
	Private _can_add_to_stage_report_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me._response_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_desc() As String
		Get
			Return Me._response_type_desc
		End Get
		Set
			If (String.Equals(Me._response_type_desc, value) = false) Then
				Me._response_type_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_has_meta_data_flag", DbType:="Bit NOT NULL")>  _
	Public Property has_meta_data_flag() As Boolean
		Get
			Return Me._has_meta_data_flag
		End Get
		Set
			If ((Me._has_meta_data_flag = value)  _
						= false) Then
				Me._has_meta_data_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_single_entry_flag", DbType:="Bit NOT NULL")>  _
	Public Property single_entry_flag() As Boolean
		Get
			Return Me._single_entry_flag
		End Get
		Set
			If ((Me._single_entry_flag = value)  _
						= false) Then
				Me._single_entry_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_can_add_to_stage_report_flag", DbType:="Bit NOT NULL")>  _
	Public Property can_add_to_stage_report_flag() As Boolean
		Get
			Return Me._can_add_to_stage_report_flag
		End Get
		Set
			If ((Me._can_add_to_stage_report_flag = value)  _
						= false) Then
				Me._can_add_to_stage_report_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispCompanyManResult
	
	Private _company_man_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_man_name", DbType:="VarChar(30)")>  _
	Public Property company_man_name() As String
		Get
			Return Me._company_man_name
		End Get
		Set
			If (String.Equals(Me._company_man_name, value) = false) Then
				Me._company_man_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetCountyListResult
	
	Private _county_id As String
	
	Private _county_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_id", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property county_id() As String
		Get
			Return Me._county_id
		End Get
		Set
			If (String.Equals(Me._county_id, value) = false) Then
				Me._county_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_county_desc", DbType:="VarChar(50)")>  _
	Public Property county_desc() As String
		Get
			Return Me._county_desc
		End Get
		Set
			If (String.Equals(Me._county_desc, value) = false) Then
				Me._county_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoQuoteExportDataResult
	
	Private _quote_number As String
	
	Private _contract_number As String
	
	Private _gpi_code As String
	
	Private _material As String
	
	Private _category_code As String
	
	Private _category_desc As String
	
	Private _sold_to_id As System.Nullable(Of Integer)
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _well_name As String
	
	Private _psl As String
	
	Private _field As String
	
	Private _api_number As String
	
	Private _currency As String
	
	Private _well_master_number As String
	
	Private _profit_center_id As System.Nullable(Of Integer)
	
	Private _dist_address As String
	
	Private _dist_city As String
	
	Private _dist_state As String
	
	Private _dist_postal_code As String
	
	Private _dist_manager As String
	
	Private _dist_phone As String
	
	Private _dist_fax As String
	
	Private _plant_id As String
	
	Private _billing_email As String
	
	Private _psl_indicator As String
	
	Private _sales_org As System.Nullable(Of Integer)
	
	Private _multi_psl_starting_row As System.Nullable(Of Integer)
	
	Private _sales_group_code As String
	
	Private _contact_employee_id As String
	
	Private _job_master_code As String
	
	Private _export_line_item_multiplier As System.Nullable(Of Integer)
	
	Private _user_id As String
	
	Private _number_of_times_exported As System.Nullable(Of Integer)
	
	Private _sap_export_id As String
	
	Private _sap_sales_document_number As String
	
	Private _sap_export_last_used_row_number As Integer
	
	Private _quote_rec_ids As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_number", DbType:="VarChar(20)")>  _
	Public Property quote_number() As String
		Get
			Return Me._quote_number
		End Get
		Set
			If (String.Equals(Me._quote_number, value) = false) Then
				Me._quote_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_number", DbType:="VarChar(10)")>  _
	Public Property contract_number() As String
		Get
			Return Me._contract_number
		End Get
		Set
			If (String.Equals(Me._contract_number, value) = false) Then
				Me._contract_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi_code", DbType:="VarChar(30)")>  _
	Public Property gpi_code() As String
		Get
			Return Me._gpi_code
		End Get
		Set
			If (String.Equals(Me._gpi_code, value) = false) Then
				Me._gpi_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(30)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_code", DbType:="VarChar(10)")>  _
	Public Property category_code() As String
		Get
			Return Me._category_code
		End Get
		Set
			If (String.Equals(Me._category_code, value) = false) Then
				Me._category_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_desc", DbType:="VarChar(20)")>  _
	Public Property category_desc() As String
		Get
			Return Me._category_desc
		End Get
		Set
			If (String.Equals(Me._category_desc, value) = false) Then
				Me._category_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="Int")>  _
	Public Property sold_to_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_id
		End Get
		Set
			If (Me._sold_to_id.Equals(value) = false) Then
				Me._sold_to_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start", DbType:="SmallDateTime")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me._approx_start = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field", DbType:="VarChar(30)")>  _
	Public Property field() As String
		Get
			Return Me._field
		End Get
		Set
			If (String.Equals(Me._field, value) = false) Then
				Me._field = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_api_number", DbType:="VarChar(30)")>  _
	Public Property api_number() As String
		Get
			Return Me._api_number
		End Get
		Set
			If (String.Equals(Me._api_number, value) = false) Then
				Me._api_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency", DbType:="VarChar(10)")>  _
	Public Property currency() As String
		Get
			Return Me._currency
		End Get
		Set
			If (String.Equals(Me._currency, value) = false) Then
				Me._currency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_master_number", DbType:="VarChar(20)")>  _
	Public Property well_master_number() As String
		Get
			Return Me._well_master_number
		End Get
		Set
			If (String.Equals(Me._well_master_number, value) = false) Then
				Me._well_master_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profit_center_id", DbType:="Int")>  _
	Public Property profit_center_id() As System.Nullable(Of Integer)
		Get
			Return Me._profit_center_id
		End Get
		Set
			If (Me._profit_center_id.Equals(value) = false) Then
				Me._profit_center_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_address", DbType:="VarChar(80)")>  _
	Public Property dist_address() As String
		Get
			Return Me._dist_address
		End Get
		Set
			If (String.Equals(Me._dist_address, value) = false) Then
				Me._dist_address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_city", DbType:="VarChar(50)")>  _
	Public Property dist_city() As String
		Get
			Return Me._dist_city
		End Get
		Set
			If (String.Equals(Me._dist_city, value) = false) Then
				Me._dist_city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_state", DbType:="VarChar(10)")>  _
	Public Property dist_state() As String
		Get
			Return Me._dist_state
		End Get
		Set
			If (String.Equals(Me._dist_state, value) = false) Then
				Me._dist_state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_postal_code", DbType:="VarChar(10)")>  _
	Public Property dist_postal_code() As String
		Get
			Return Me._dist_postal_code
		End Get
		Set
			If (String.Equals(Me._dist_postal_code, value) = false) Then
				Me._dist_postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_manager", DbType:="VarChar(50)")>  _
	Public Property dist_manager() As String
		Get
			Return Me._dist_manager
		End Get
		Set
			If (String.Equals(Me._dist_manager, value) = false) Then
				Me._dist_manager = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_phone", DbType:="VarChar(30)")>  _
	Public Property dist_phone() As String
		Get
			Return Me._dist_phone
		End Get
		Set
			If (String.Equals(Me._dist_phone, value) = false) Then
				Me._dist_phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_fax", DbType:="VarChar(30)")>  _
	Public Property dist_fax() As String
		Get
			Return Me._dist_fax
		End Get
		Set
			If (String.Equals(Me._dist_fax, value) = false) Then
				Me._dist_fax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="VarChar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billing_email", DbType:="VarChar(128)")>  _
	Public Property billing_email() As String
		Get
			Return Me._billing_email
		End Get
		Set
			If (String.Equals(Me._billing_email, value) = false) Then
				Me._billing_email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_indicator", DbType:="VarChar(5)")>  _
	Public Property psl_indicator() As String
		Get
			Return Me._psl_indicator
		End Get
		Set
			If (String.Equals(Me._psl_indicator, value) = false) Then
				Me._psl_indicator = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_org", DbType:="Int")>  _
	Public Property sales_org() As System.Nullable(Of Integer)
		Get
			Return Me._sales_org
		End Get
		Set
			If (Me._sales_org.Equals(value) = false) Then
				Me._sales_org = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_multi_psl_starting_row", DbType:="Int")>  _
	Public Property multi_psl_starting_row() As System.Nullable(Of Integer)
		Get
			Return Me._multi_psl_starting_row
		End Get
		Set
			If (Me._multi_psl_starting_row.Equals(value) = false) Then
				Me._multi_psl_starting_row = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_group_code", DbType:="VarChar(10)")>  _
	Public Property sales_group_code() As String
		Get
			Return Me._sales_group_code
		End Get
		Set
			If (String.Equals(Me._sales_group_code, value) = false) Then
				Me._sales_group_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_employee_id", DbType:="VarChar(20)")>  _
	Public Property contact_employee_id() As String
		Get
			Return Me._contact_employee_id
		End Get
		Set
			If (String.Equals(Me._contact_employee_id, value) = false) Then
				Me._contact_employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_master_code", DbType:="VarChar(10)")>  _
	Public Property job_master_code() As String
		Get
			Return Me._job_master_code
		End Get
		Set
			If (String.Equals(Me._job_master_code, value) = false) Then
				Me._job_master_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_export_line_item_multiplier", DbType:="Int")>  _
	Public Property export_line_item_multiplier() As System.Nullable(Of Integer)
		Get
			Return Me._export_line_item_multiplier
		End Get
		Set
			If (Me._export_line_item_multiplier.Equals(value) = false) Then
				Me._export_line_item_multiplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20)")>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me._user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_number_of_times_exported", DbType:="Int")>  _
	Public Property number_of_times_exported() As System.Nullable(Of Integer)
		Get
			Return Me._number_of_times_exported
		End Get
		Set
			If (Me._number_of_times_exported.Equals(value) = false) Then
				Me._number_of_times_exported = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_id", DbType:="VarChar(30)")>  _
	Public Property sap_export_id() As String
		Get
			Return Me._sap_export_id
		End Get
		Set
			If (String.Equals(Me._sap_export_id, value) = false) Then
				Me._sap_export_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_sales_document_number", DbType:="VarChar(30)")>  _
	Public Property sap_sales_document_number() As String
		Get
			Return Me._sap_sales_document_number
		End Get
		Set
			If (String.Equals(Me._sap_sales_document_number, value) = false) Then
				Me._sap_sales_document_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_last_used_row_number", DbType:="Int NOT NULL")>  _
	Public Property sap_export_last_used_row_number() As Integer
		Get
			Return Me._sap_export_last_used_row_number
		End Get
		Set
			If ((Me._sap_export_last_used_row_number = value)  _
						= false) Then
				Me._sap_export_last_used_row_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_rec_ids", DbType:="VarChar(100)")>  _
	Public Property quote_rec_ids() As String
		Get
			Return Me._quote_rec_ids
		End Get
		Set
			If (String.Equals(Me._quote_rec_ids, value) = false) Then
				Me._quote_rec_ids = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckDupAssetPmPointCalculationConfigRecordResult
	
	Private _found As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_found", DbType:="Bit")>  _
	Public Property found() As System.Nullable(Of Boolean)
		Get
			Return Me._found
		End Get
		Set
			If (Me._found.Equals(value) = false) Then
				Me._found = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFimpExportIdResult
	
	Private _export_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_export_id", DbType:="VarChar(20)")>  _
	Public Property export_id() As String
		Get
			Return Me._export_id
		End Get
		Set
			If (String.Equals(Me._export_id, value) = false) Then
				Me._export_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPerfIntervalPolarityListResult
	
	Private _polarity_id As String
	
	Private _polarity_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_polarity_id", DbType:="VarChar(1)")>  _
	Public Property polarity_id() As String
		Get
			Return Me._polarity_id
		End Get
		Set
			If (String.Equals(Me._polarity_id, value) = false) Then
				Me._polarity_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_polarity_desc", DbType:="VarChar(50)")>  _
	Public Property polarity_desc() As String
		Get
			Return Me._polarity_desc
		End Get
		Set
			If (String.Equals(Me._polarity_desc, value) = false) Then
				Me._polarity_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPerfResponsePrintDataResult
	
	Private _param_text As String
	
	Private _response_type_id As String
	
	Private _response_data As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_text", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property param_text() As String
		Get
			Return Me._param_text
		End Get
		Set
			If (String.Equals(Me._param_text, value) = false) Then
				Me._param_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me._response_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_data", DbType:="VarChar(MAX)")>  _
	Public Property response_data() As String
		Get
			Return Me._response_data
		End Get
		Set
			If (String.Equals(Me._response_data, value) = false) Then
				Me._response_data = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertDispPerfResponseResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRigRecordsResult
	
	Private _rig_id As String
	
	Private _rig_name As String
	
	Private _country_code As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property rig_id() As String
		Get
			Return Me._rig_id
		End Get
		Set
			If (String.Equals(Me._rig_id, value) = false) Then
				Me._rig_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_name", DbType:="VarChar(100)")>  _
	Public Property rig_name() As String
		Get
			Return Me._rig_name
		End Get
		Set
			If (String.Equals(Me._rig_name, value) = false) Then
				Me._rig_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country_code", DbType:="Char(2)")>  _
	Public Property country_code() As String
		Get
			Return Me._country_code
		End Get
		Set
			If (String.Equals(Me._country_code, value) = false) Then
				Me._country_code = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPjbQuestionRecordsResult
	
	Private _question_id As Integer
	
	Private _subsection_id As Integer
	
	Private _sequence_number As Integer
	
	Private _question_text As String
	
	Private _response_type_id As String
	
	Private _response_meta_data As String
	
	Private _traffic_light_severity_level As String
	
	Private _assigned_title_ids As String
	
	Private _hyperlink_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question_id", DbType:="Int NOT NULL")>  _
	Public Property question_id() As Integer
		Get
			Return Me._question_id
		End Get
		Set
			If ((Me._question_id = value)  _
						= false) Then
				Me._question_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subsection_id", DbType:="Int NOT NULL")>  _
	Public Property subsection_id() As Integer
		Get
			Return Me._subsection_id
		End Get
		Set
			If ((Me._subsection_id = value)  _
						= false) Then
				Me._subsection_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int NOT NULL")>  _
	Public Property sequence_number() As Integer
		Get
			Return Me._sequence_number
		End Get
		Set
			If ((Me._sequence_number = value)  _
						= false) Then
				Me._sequence_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_question_text", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property question_text() As String
		Get
			Return Me._question_text
		End Get
		Set
			If (String.Equals(Me._question_text, value) = false) Then
				Me._question_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me._response_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_meta_data", DbType:="VarChar(2000)")>  _
	Public Property response_meta_data() As String
		Get
			Return Me._response_meta_data
		End Get
		Set
			If (String.Equals(Me._response_meta_data, value) = false) Then
				Me._response_meta_data = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_traffic_light_severity_level", DbType:="VarChar(10)")>  _
	Public Property traffic_light_severity_level() As String
		Get
			Return Me._traffic_light_severity_level
		End Get
		Set
			If (String.Equals(Me._traffic_light_severity_level, value) = false) Then
				Me._traffic_light_severity_level = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned_title_ids", DbType:="NVarChar(MAX)")>  _
	Public Property assigned_title_ids() As String
		Get
			Return Me._assigned_title_ids
		End Get
		Set
			If (String.Equals(Me._assigned_title_ids, value) = false) Then
				Me._assigned_title_ids = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hyperlink_count", DbType:="Int")>  _
	Public Property hyperlink_count() As System.Nullable(Of Integer)
		Get
			Return Me._hyperlink_count
		End Get
		Set
			If (Me._hyperlink_count.Equals(value) = false) Then
				Me._hyperlink_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchLengthUnitResult
	
	Private _length_measurement_unit As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_length_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property length_measurement_unit() As String
		Get
			Return Me._length_measurement_unit
		End Get
		Set
			If (String.Equals(Me._length_measurement_unit, value) = false) Then
				Me._length_measurement_unit = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispAssetMultiSelectListResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Private _down_hole_tool_flag As Boolean
	
	Private _tech_ident_no As String
	
	Private _code_type_rec_id As System.Nullable(Of Integer)
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _pm_point_threshold_level As String
	
	Private _asset_has_subassembly_flag As System.Nullable(Of Boolean)
	
	Private _parent_asset_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_down_hole_tool_flag", DbType:="Bit NOT NULL")>  _
	Public Property down_hole_tool_flag() As Boolean
		Get
			Return Me._down_hole_tool_flag
		End Get
		Set
			If ((Me._down_hole_tool_flag = value)  _
						= false) Then
				Me._down_hole_tool_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tech_ident_no", DbType:="VarChar(30)")>  _
	Public Property tech_ident_no() As String
		Get
			Return Me._tech_ident_no
		End Get
		Set
			If (String.Equals(Me._tech_ident_no, value) = false) Then
				Me._tech_ident_no = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code_type_rec_id", DbType:="Int")>  _
	Public Property code_type_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._code_type_rec_id
		End Get
		Set
			If (Me._code_type_rec_id.Equals(value) = false) Then
				Me._code_type_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="VarChar(10)")>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me._current_plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me._current_plant_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="Int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me._avail_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(25)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="Int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me._pm_points = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="VarChar(10)")>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me._pm_point_threshold_level = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_has_subassembly_flag", DbType:="Bit")>  _
	Public Property asset_has_subassembly_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_has_subassembly_flag
		End Get
		Set
			If (Me._asset_has_subassembly_flag.Equals(value) = false) Then
				Me._asset_has_subassembly_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent_asset_id", DbType:="VarChar(40)")>  _
	Public Property parent_asset_id() As String
		Get
			Return Me._parent_asset_id
		End Get
		Set
			If (String.Equals(Me._parent_asset_id, value) = false) Then
				Me._parent_asset_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispAssetsByAssetGroupIdResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Private _down_hole_tool_flag As Boolean
	
	Private _tech_ident_no As String
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _pm_point_threshold_level As String
	
	Private _asset_has_subassembly_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_down_hole_tool_flag", DbType:="Bit NOT NULL")>  _
	Public Property down_hole_tool_flag() As Boolean
		Get
			Return Me._down_hole_tool_flag
		End Get
		Set
			If ((Me._down_hole_tool_flag = value)  _
						= false) Then
				Me._down_hole_tool_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tech_ident_no", DbType:="VarChar(30)")>  _
	Public Property tech_ident_no() As String
		Get
			Return Me._tech_ident_no
		End Get
		Set
			If (String.Equals(Me._tech_ident_no, value) = false) Then
				Me._tech_ident_no = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="VarChar(10)")>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me._current_plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me._current_plant_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="Int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me._avail_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(25)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="Int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me._pm_points = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="VarChar(10)")>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me._pm_point_threshold_level = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_has_subassembly_flag", DbType:="Bit")>  _
	Public Property asset_has_subassembly_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_has_subassembly_flag
		End Get
		Set
			If (Me._asset_has_subassembly_flag.Equals(value) = false) Then
				Me._asset_has_subassembly_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispAssetsByImportedAssetIdsResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Private _down_hole_tool_flag As Boolean
	
	Private _tech_ident_no As String
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _pm_point_threshold_level As String
	
	Private _asset_has_subassembly_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="NChar(50)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30)")>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_down_hole_tool_flag", DbType:="Bit NOT NULL")>  _
	Public Property down_hole_tool_flag() As Boolean
		Get
			Return Me._down_hole_tool_flag
		End Get
		Set
			If ((Me._down_hole_tool_flag = value)  _
						= false) Then
				Me._down_hole_tool_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tech_ident_no", DbType:="VarChar(30)")>  _
	Public Property tech_ident_no() As String
		Get
			Return Me._tech_ident_no
		End Get
		Set
			If (String.Equals(Me._tech_ident_no, value) = false) Then
				Me._tech_ident_no = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="VarChar(10)")>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me._current_plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="VarChar(50)")>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me._current_plant_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="Int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me._avail_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(25)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="Int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me._pm_points = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="VarChar(10)")>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me._pm_point_threshold_level = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_has_subassembly_flag", DbType:="Bit")>  _
	Public Property asset_has_subassembly_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_has_subassembly_flag
		End Get
		Set
			If (Me._asset_has_subassembly_flag.Equals(value) = false) Then
				Me._asset_has_subassembly_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispAssetsToCopyResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _series_desc As String
	
	Private _down_hole_tool_flag As Boolean
	
	Private _tech_ident_no As String
	
	Private _current_plant_id As String
	
	Private _current_plant_name As String
	
	Private _avail_id As System.Nullable(Of Integer)
	
	Private _status As String
	
	Private _pm_points As System.Nullable(Of Integer)
	
	Private _pm_point_threshold_level As String
	
	Private _asset_has_subassembly_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_desc", DbType:="VarChar(100)")>  _
	Public Property series_desc() As String
		Get
			Return Me._series_desc
		End Get
		Set
			If (String.Equals(Me._series_desc, value) = false) Then
				Me._series_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_down_hole_tool_flag", DbType:="Bit NOT NULL")>  _
	Public Property down_hole_tool_flag() As Boolean
		Get
			Return Me._down_hole_tool_flag
		End Get
		Set
			If ((Me._down_hole_tool_flag = value)  _
						= false) Then
				Me._down_hole_tool_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tech_ident_no", DbType:="VarChar(30)")>  _
	Public Property tech_ident_no() As String
		Get
			Return Me._tech_ident_no
		End Get
		Set
			If (String.Equals(Me._tech_ident_no, value) = false) Then
				Me._tech_ident_no = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_id", DbType:="VarChar(10)")>  _
	Public Property current_plant_id() As String
		Get
			Return Me._current_plant_id
		End Get
		Set
			If (String.Equals(Me._current_plant_id, value) = false) Then
				Me._current_plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_current_plant_name", DbType:="VarChar(50)")>  _
	Public Property current_plant_name() As String
		Get
			Return Me._current_plant_name
		End Get
		Set
			If (String.Equals(Me._current_plant_name, value) = false) Then
				Me._current_plant_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avail_id", DbType:="Int")>  _
	Public Property avail_id() As System.Nullable(Of Integer)
		Get
			Return Me._avail_id
		End Get
		Set
			If (Me._avail_id.Equals(value) = false) Then
				Me._avail_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(25)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="Int")>  _
	Public Property pm_points() As System.Nullable(Of Integer)
		Get
			Return Me._pm_points
		End Get
		Set
			If (Me._pm_points.Equals(value) = false) Then
				Me._pm_points = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="VarChar(10)")>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me._pm_point_threshold_level = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_has_subassembly_flag", DbType:="Bit")>  _
	Public Property asset_has_subassembly_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_has_subassembly_flag
		End Get
		Set
			If (Me._asset_has_subassembly_flag.Equals(value) = false) Then
				Me._asset_has_subassembly_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertOrUpdateDispAssetResult
	
	Private _asset_inserted_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_inserted_flag", DbType:="Bit")>  _
	Public Property asset_inserted_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_inserted_flag
		End Get
		Set
			If (Me._asset_inserted_flag.Equals(value) = false) Then
				Me._asset_inserted_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchSoldToCompanySelectionListResult
	
	Private _sold_to_id As Integer
	
	Private _sold_to_name As String
	
	Private _language As String
	
	Private _parent As String
	
	Private _inactive_flag As Boolean
	
	Private _sold_to_address_rec_id As System.Nullable(Of Integer)
	
	Private _address As String
	
	Private _city As String
	
	Private _state_province As String
	
	Private _postal_code As String
	
	Private _po_box As String
	
	Private _po_box_city As String
	
	Private _po_box_postal_code As String
	
	Private _country As String
	
	Private _phone As String
	
	Private _fax As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="Int NOT NULL")>  _
	Public Property sold_to_id() As Integer
		Get
			Return Me._sold_to_id
		End Get
		Set
			If ((Me._sold_to_id = value)  _
						= false) Then
				Me._sold_to_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_name", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property sold_to_name() As String
		Get
			Return Me._sold_to_name
		End Get
		Set
			If (String.Equals(Me._sold_to_name, value) = false) Then
				Me._sold_to_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_language", DbType:="VarChar(5)")>  _
	Public Property language() As String
		Get
			Return Me._language
		End Get
		Set
			If (String.Equals(Me._language, value) = false) Then
				Me._language = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent", DbType:="VarChar(80)")>  _
	Public Property parent() As String
		Get
			Return Me._parent
		End Get
		Set
			If (String.Equals(Me._parent, value) = false) Then
				Me._parent = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="Bit NOT NULL")>  _
	Public Property inactive_flag() As Boolean
		Get
			Return Me._inactive_flag
		End Get
		Set
			If ((Me._inactive_flag = value)  _
						= false) Then
				Me._inactive_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_address_rec_id", DbType:="Int")>  _
	Public Property sold_to_address_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_address_rec_id
		End Get
		Set
			If (Me._sold_to_address_rec_id.Equals(value) = false) Then
				Me._sold_to_address_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(80)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me._address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(50)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me._city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state_province", DbType:="VarChar(10)")>  _
	Public Property state_province() As String
		Get
			Return Me._state_province
		End Get
		Set
			If (String.Equals(Me._state_province, value) = false) Then
				Me._state_province = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_postal_code", DbType:="VarChar(15)")>  _
	Public Property postal_code() As String
		Get
			Return Me._postal_code
		End Get
		Set
			If (String.Equals(Me._postal_code, value) = false) Then
				Me._postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_po_box", DbType:="VarChar(10)")>  _
	Public Property po_box() As String
		Get
			Return Me._po_box
		End Get
		Set
			If (String.Equals(Me._po_box, value) = false) Then
				Me._po_box = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_po_box_city", DbType:="VarChar(50)")>  _
	Public Property po_box_city() As String
		Get
			Return Me._po_box_city
		End Get
		Set
			If (String.Equals(Me._po_box_city, value) = false) Then
				Me._po_box_city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_po_box_postal_code", DbType:="VarChar(15)")>  _
	Public Property po_box_postal_code() As String
		Get
			Return Me._po_box_postal_code
		End Get
		Set
			If (String.Equals(Me._po_box_postal_code, value) = false) Then
				Me._po_box_postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country", DbType:="VarChar(5)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me._country = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="VarChar(30)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me._phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fax", DbType:="VarChar(30)")>  _
	Public Property fax() As String
		Get
			Return Me._fax
		End Get
		Set
			If (String.Equals(Me._fax, value) = false) Then
				Me._fax = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetXrefDispPerfImportItemsResult
	
	Private _tab_type_id As String
	
	Private _tab_order As Integer
	
	Private _tab_name As String
	
	Private _row_order As Integer
	
	Private _label_column As Integer
	
	Private _label As String
	
	Private _vdis_field_column As System.Nullable(Of Integer)
	
	Private _vdis_field_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tab_type_id", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property tab_type_id() As String
		Get
			Return Me._tab_type_id
		End Get
		Set
			If (String.Equals(Me._tab_type_id, value) = false) Then
				Me._tab_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tab_order", DbType:="Int NOT NULL")>  _
	Public Property tab_order() As Integer
		Get
			Return Me._tab_order
		End Get
		Set
			If ((Me._tab_order = value)  _
						= false) Then
				Me._tab_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tab_name", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property tab_name() As String
		Get
			Return Me._tab_name
		End Get
		Set
			If (String.Equals(Me._tab_name, value) = false) Then
				Me._tab_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_order", DbType:="Int NOT NULL")>  _
	Public Property row_order() As Integer
		Get
			Return Me._row_order
		End Get
		Set
			If ((Me._row_order = value)  _
						= false) Then
				Me._row_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_label_column", DbType:="Int NOT NULL")>  _
	Public Property label_column() As Integer
		Get
			Return Me._label_column
		End Get
		Set
			If ((Me._label_column = value)  _
						= false) Then
				Me._label_column = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_label", DbType:="VarChar(50)")>  _
	Public Property label() As String
		Get
			Return Me._label
		End Get
		Set
			If (String.Equals(Me._label, value) = false) Then
				Me._label = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vdis_field_column", DbType:="Int")>  _
	Public Property vdis_field_column() As System.Nullable(Of Integer)
		Get
			Return Me._vdis_field_column
		End Get
		Set
			If (Me._vdis_field_column.Equals(value) = false) Then
				Me._vdis_field_column = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vdis_field_name", DbType:="VarChar(50)")>  _
	Public Property vdis_field_name() As String
		Get
			Return Me._vdis_field_name
		End Get
		Set
			If (String.Equals(Me._vdis_field_name, value) = false) Then
				Me._vdis_field_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetPmPointCalculationTriggerDispFieldsResult
	
	Private _disp_section As String
	
	Private _disp_field_name As String
	
	Private _input_range_low As System.Nullable(Of Single)
	
	Private _input_range_high As System.Nullable(Of Single)
	
	Private _input_range_is_exclusive_flag As Boolean
	
	Private _measurement_unit_type As String
	
	Private _measurement_unit As String
	
	Private _tool_tip_text As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_section", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property disp_section() As String
		Get
			Return Me._disp_section
		End Get
		Set
			If (String.Equals(Me._disp_section, value) = false) Then
				Me._disp_section = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_field_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property disp_field_name() As String
		Get
			Return Me._disp_field_name
		End Get
		Set
			If (String.Equals(Me._disp_field_name, value) = false) Then
				Me._disp_field_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_input_range_low", DbType:="Real")>  _
	Public Property input_range_low() As System.Nullable(Of Single)
		Get
			Return Me._input_range_low
		End Get
		Set
			If (Me._input_range_low.Equals(value) = false) Then
				Me._input_range_low = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_input_range_high", DbType:="Real")>  _
	Public Property input_range_high() As System.Nullable(Of Single)
		Get
			Return Me._input_range_high
		End Get
		Set
			If (Me._input_range_high.Equals(value) = false) Then
				Me._input_range_high = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_input_range_is_exclusive_flag", DbType:="Bit NOT NULL")>  _
	Public Property input_range_is_exclusive_flag() As Boolean
		Get
			Return Me._input_range_is_exclusive_flag
		End Get
		Set
			If ((Me._input_range_is_exclusive_flag = value)  _
						= false) Then
				Me._input_range_is_exclusive_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_measurement_unit_type", DbType:="VarChar(50)")>  _
	Public Property measurement_unit_type() As String
		Get
			Return Me._measurement_unit_type
		End Get
		Set
			If (String.Equals(Me._measurement_unit_type, value) = false) Then
				Me._measurement_unit_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_measurement_unit", DbType:="VarChar(10)")>  _
	Public Property measurement_unit() As String
		Get
			Return Me._measurement_unit
		End Get
		Set
			If (String.Equals(Me._measurement_unit, value) = false) Then
				Me._measurement_unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tool_tip_text", DbType:="VarChar(100)")>  _
	Public Property tool_tip_text() As String
		Get
			Return Me._tool_tip_text
		End Get
		Set
			If (String.Equals(Me._tool_tip_text, value) = false) Then
				Me._tool_tip_text = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckDispConfigSectionExistsResult
	
	Private _section_exists As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_exists", DbType:="Bit")>  _
	Public Property section_exists() As System.Nullable(Of Boolean)
		Get
			Return Me._section_exists
		End Get
		Set
			If (Me._section_exists.Equals(value) = false) Then
				Me._section_exists = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispConfigSectionTypesResult
	
	Private _section_id As String
	
	Private _section_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property section_id() As String
		Get
			Return Me._section_id
		End Get
		Set
			If (String.Equals(Me._section_id, value) = false) Then
				Me._section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property section_name() As String
		Get
			Return Me._section_name
		End Get
		Set
			If (String.Equals(Me._section_name, value) = false) Then
				Me._section_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispConfigSectionsResult
	
	Private _section_id As String
	
	Private _sequence_number As Integer
	
	Private _psl_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_section_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property section_id() As String
		Get
			Return Me._section_id
		End Get
		Set
			If (String.Equals(Me._section_id, value) = false) Then
				Me._section_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int NOT NULL")>  _
	Public Property sequence_number() As Integer
		Get
			Return Me._sequence_number
		End Get
		Set
			If ((Me._sequence_number = value)  _
						= false) Then
				Me._sequence_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_id", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl_id() As String
		Get
			Return Me._psl_id
		End Get
		Set
			If (String.Equals(Me._psl_id, value) = false) Then
				Me._psl_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertDispRunRecordResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPerfParameterListResult
	
	Private _param_id As Integer
	
	Private _param_text As String
	
	Private _response_type_id As String
	
	Private _sequence_number As Integer
	
	Private _response_meta_data As String
	
	Private _add_to_stage_report_flag As Boolean
	
	Private _service_ids As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_id", DbType:="Int NOT NULL")>  _
	Public Property param_id() As Integer
		Get
			Return Me._param_id
		End Get
		Set
			If ((Me._param_id = value)  _
						= false) Then
				Me._param_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_param_text", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property param_text() As String
		Get
			Return Me._param_text
		End Get
		Set
			If (String.Equals(Me._param_text, value) = false) Then
				Me._param_text = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_type_id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property response_type_id() As String
		Get
			Return Me._response_type_id
		End Get
		Set
			If (String.Equals(Me._response_type_id, value) = false) Then
				Me._response_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence_number", DbType:="Int NOT NULL")>  _
	Public Property sequence_number() As Integer
		Get
			Return Me._sequence_number
		End Get
		Set
			If ((Me._sequence_number = value)  _
						= false) Then
				Me._sequence_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_response_meta_data", DbType:="VarChar(100)")>  _
	Public Property response_meta_data() As String
		Get
			Return Me._response_meta_data
		End Get
		Set
			If (String.Equals(Me._response_meta_data, value) = false) Then
				Me._response_meta_data = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_add_to_stage_report_flag", DbType:="Bit NOT NULL")>  _
	Public Property add_to_stage_report_flag() As Boolean
		Get
			Return Me._add_to_stage_report_flag
		End Get
		Set
			If ((Me._add_to_stage_report_flag = value)  _
						= false) Then
				Me._add_to_stage_report_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_ids", DbType:="NVarChar(MAX)")>  _
	Public Property service_ids() As String
		Get
			Return Me._service_ids
		End Get
		Set
			If (String.Equals(Me._service_ids, value) = false) Then
				Me._service_ids = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertDispEquipmentResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoAdditionalChargeItemsByPressureResult
	
	Private _rec_id As Integer
	
	Private _gpi As String
	
	Private _additional_charge_item As String
	
	Private _description As String
	
	Private _customer_description As String
	
	Private _name As String
	
	Private _material As String
	
	Private _unit_price As System.Nullable(Of Decimal)
	
	Private _minimum_quantity As System.Nullable(Of Decimal)
	
	Private _unit As String
	
	Private _discount_allowed_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_charge_item", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property additional_charge_item() As String
		Get
			Return Me._additional_charge_item
		End Get
		Set
			If (String.Equals(Me._additional_charge_item, value) = false) Then
				Me._additional_charge_item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_description", DbType:="VarChar(250)")>  _
	Public Property customer_description() As String
		Get
			Return Me._customer_description
		End Get
		Set
			If (String.Equals(Me._customer_description, value) = false) Then
				Me._customer_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(15)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._unit_price
		End Get
		Set
			If (Me._unit_price.Equals(value) = false) Then
				Me._unit_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minimum_quantity", DbType:="Decimal(10,1)")>  _
	Public Property minimum_quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._minimum_quantity
		End Get
		Set
			If (Me._minimum_quantity.Equals(value) = false) Then
				Me._minimum_quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit", DbType:="VarChar(10)")>  _
	Public Property unit() As String
		Get
			Return Me._unit
		End Get
		Set
			If (String.Equals(Me._unit, value) = false) Then
				Me._unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount_allowed_flag", DbType:="Bit NOT NULL")>  _
	Public Property discount_allowed_flag() As Boolean
		Get
			Return Me._discount_allowed_flag
		End Get
		Set
			If ((Me._discount_allowed_flag = value)  _
						= false) Then
				Me._discount_allowed_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoAdditionalChargeItemsByTemperatureResult
	
	Private _rec_id As Integer
	
	Private _gpi As String
	
	Private _additional_charge_item As String
	
	Private _description As String
	
	Private _customer_description As String
	
	Private _name As String
	
	Private _material As String
	
	Private _unit_price As System.Nullable(Of Decimal)
	
	Private _minimum_quantity As System.Nullable(Of Decimal)
	
	Private _unit As String
	
	Private _discount_allowed_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_charge_item", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property additional_charge_item() As String
		Get
			Return Me._additional_charge_item
		End Get
		Set
			If (String.Equals(Me._additional_charge_item, value) = false) Then
				Me._additional_charge_item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_description", DbType:="VarChar(250)")>  _
	Public Property customer_description() As String
		Get
			Return Me._customer_description
		End Get
		Set
			If (String.Equals(Me._customer_description, value) = false) Then
				Me._customer_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(15)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._unit_price
		End Get
		Set
			If (Me._unit_price.Equals(value) = false) Then
				Me._unit_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minimum_quantity", DbType:="Decimal(10,1)")>  _
	Public Property minimum_quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._minimum_quantity
		End Get
		Set
			If (Me._minimum_quantity.Equals(value) = false) Then
				Me._minimum_quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit", DbType:="VarChar(10)")>  _
	Public Property unit() As String
		Get
			Return Me._unit
		End Get
		Set
			If (String.Equals(Me._unit, value) = false) Then
				Me._unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount_allowed_flag", DbType:="Bit NOT NULL")>  _
	Public Property discount_allowed_flag() As Boolean
		Get
			Return Me._discount_allowed_flag
		End Get
		Set
			If ((Me._discount_allowed_flag = value)  _
						= false) Then
				Me._discount_allowed_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoAdditionalChargesByLookupItemResult
	
	Private _lookup_item As String
	
	Private _rec_id As Integer
	
	Private _gpi As String
	
	Private _additional_charge_item As String
	
	Private _description As String
	
	Private _customer_description As String
	
	Private _name As String
	
	Private _material As String
	
	Private _unit_price As System.Nullable(Of Decimal)
	
	Private _minimum_quantity As System.Nullable(Of Decimal)
	
	Private _unit As String
	
	Private _discount_allowed_flag As Boolean
	
	Private _depth_threshold As System.Nullable(Of Integer)
	
	Private _additional_charge_type As String
	
	Private _additional_charge_type_order As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lookup_item", DbType:="VarChar(10)")>  _
	Public Property lookup_item() As String
		Get
			Return Me._lookup_item
		End Get
		Set
			If (String.Equals(Me._lookup_item, value) = false) Then
				Me._lookup_item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_charge_item", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property additional_charge_item() As String
		Get
			Return Me._additional_charge_item
		End Get
		Set
			If (String.Equals(Me._additional_charge_item, value) = false) Then
				Me._additional_charge_item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_description", DbType:="VarChar(250)")>  _
	Public Property customer_description() As String
		Get
			Return Me._customer_description
		End Get
		Set
			If (String.Equals(Me._customer_description, value) = false) Then
				Me._customer_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(15)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._unit_price
		End Get
		Set
			If (Me._unit_price.Equals(value) = false) Then
				Me._unit_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minimum_quantity", DbType:="Decimal(10,1)")>  _
	Public Property minimum_quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._minimum_quantity
		End Get
		Set
			If (Me._minimum_quantity.Equals(value) = false) Then
				Me._minimum_quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit", DbType:="VarChar(10)")>  _
	Public Property unit() As String
		Get
			Return Me._unit
		End Get
		Set
			If (String.Equals(Me._unit, value) = false) Then
				Me._unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount_allowed_flag", DbType:="Bit NOT NULL")>  _
	Public Property discount_allowed_flag() As Boolean
		Get
			Return Me._discount_allowed_flag
		End Get
		Set
			If ((Me._discount_allowed_flag = value)  _
						= false) Then
				Me._discount_allowed_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth_threshold", DbType:="Int")>  _
	Public Property depth_threshold() As System.Nullable(Of Integer)
		Get
			Return Me._depth_threshold
		End Get
		Set
			If (Me._depth_threshold.Equals(value) = false) Then
				Me._depth_threshold = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_charge_type", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property additional_charge_type() As String
		Get
			Return Me._additional_charge_type
		End Get
		Set
			If (String.Equals(Me._additional_charge_type, value) = false) Then
				Me._additional_charge_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_additional_charge_type_order", DbType:="Int NOT NULL")>  _
	Public Property additional_charge_type_order() As Integer
		Get
			Return Me._additional_charge_type_order
		End Get
		Set
			If ((Me._additional_charge_type_order = value)  _
						= false) Then
				Me._additional_charge_type_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFimpPoncRecordsResult
	
	Private _incident_rec_id As Integer
	
	Private _category_rec_id As Integer
	
	Private _ponc_amount As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_rec_id", DbType:="Int NOT NULL")>  _
	Public Property incident_rec_id() As Integer
		Get
			Return Me._incident_rec_id
		End Get
		Set
			If ((Me._incident_rec_id = value)  _
						= false) Then
				Me._incident_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_rec_id", DbType:="Int NOT NULL")>  _
	Public Property category_rec_id() As Integer
		Get
			Return Me._category_rec_id
		End Get
		Set
			If ((Me._category_rec_id = value)  _
						= false) Then
				Me._category_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ponc_amount", DbType:="Decimal(15,2) NOT NULL")>  _
	Public Property ponc_amount() As Decimal
		Get
			Return Me._ponc_amount
		End Get
		Set
			If ((Me._ponc_amount = value)  _
						= false) Then
				Me._ponc_amount = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRtRigGroupListResult
	
	Private _group_name As String
	
	Private _rig_id As String
	
	Private _rig_name As String
	
	Private _group_color As System.Nullable(Of Integer)
	
	Private _sort_order As Integer
	
	Private _row_number As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_name", DbType:="VarChar(50)")>  _
	Public Property group_name() As String
		Get
			Return Me._group_name
		End Get
		Set
			If (String.Equals(Me._group_name, value) = false) Then
				Me._group_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property rig_id() As String
		Get
			Return Me._rig_id
		End Get
		Set
			If (String.Equals(Me._rig_id, value) = false) Then
				Me._rig_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rig_name", DbType:="VarChar(100)")>  _
	Public Property rig_name() As String
		Get
			Return Me._rig_name
		End Get
		Set
			If (String.Equals(Me._rig_name, value) = false) Then
				Me._rig_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_color", DbType:="Int")>  _
	Public Property group_color() As System.Nullable(Of Integer)
		Get
			Return Me._group_color
		End Get
		Set
			If (Me._group_color.Equals(value) = false) Then
				Me._group_color = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sort_order", DbType:="Int NOT NULL")>  _
	Public Property sort_order() As Integer
		Get
			Return Me._sort_order
		End Get
		Set
			If ((Me._sort_order = value)  _
						= false) Then
				Me._sort_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int")>  _
	Public Property row_number() As System.Nullable(Of Integer)
		Get
			Return Me._row_number
		End Get
		Set
			If (Me._row_number.Equals(value) = false) Then
				Me._row_number = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFimpRecordResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetExchangeRatesResult
	
	Private _currency_code As String
	
	Private _exchange_rate As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency_code", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property currency_code() As String
		Get
			Return Me._currency_code
		End Get
		Set
			If (String.Equals(Me._currency_code, value) = false) Then
				Me._currency_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exchange_rate", DbType:="Decimal(15,5) NOT NULL")>  _
	Public Property exchange_rate() As Decimal
		Get
			Return Me._exchange_rate
		End Get
		Set
			If ((Me._exchange_rate = value)  _
						= false) Then
				Me._exchange_rate = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispJobStatusResult
	
	Private _status As Short
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAccountManagerUserRoleListResult
	
	Private _role_name As String
	
	Private _role_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_role_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property role_name() As String
		Get
			Return Me._role_name
		End Get
		Set
			If (String.Equals(Me._role_name, value) = false) Then
				Me._role_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_role_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property role_desc() As String
		Get
			Return Me._role_desc
		End Get
		Set
			If (String.Equals(Me._role_desc, value) = false) Then
				Me._role_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppUserAssignedIncidentsResult
	
	Private _rec_id As Integer
	
	Private _incident_id As String
	
	Private _incident_datetime As System.Nullable(Of Date)
	
	Private _subject As String
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _asset_id As String
	
	Private _severity_desc As String
	
	Private _district_name As String
	
	Private _formatted_disp_id As String
	
	Private _operating_time_hours As System.Nullable(Of Double)
	
	Private _corrected_lost_time_hours As System.Nullable(Of Double)
	
	Private _incident_status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_id", DbType:="Char(6)")>  _
	Public Property incident_id() As String
		Get
			Return Me._incident_id
		End Get
		Set
			If (String.Equals(Me._incident_id, value) = false) Then
				Me._incident_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_datetime", DbType:="SmallDateTime")>  _
	Public Property incident_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_datetime
		End Get
		Set
			If (Me._incident_datetime.Equals(value) = false) Then
				Me._incident_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="VarChar(50)")>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me._subject = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_desc", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property severity_desc() As String
		Get
			Return Me._severity_desc
		End Get
		Set
			If (String.Equals(Me._severity_desc, value) = false) Then
				Me._severity_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_district_name", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property district_name() As String
		Get
			Return Me._district_name
		End Get
		Set
			If (String.Equals(Me._district_name, value) = false) Then
				Me._district_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time_hours", DbType:="Float")>  _
	Public Property operating_time_hours() As System.Nullable(Of Double)
		Get
			Return Me._operating_time_hours
		End Get
		Set
			If (Me._operating_time_hours.Equals(value) = false) Then
				Me._operating_time_hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_corrected_lost_time_hours", DbType:="Float")>  _
	Public Property corrected_lost_time_hours() As System.Nullable(Of Double)
		Get
			Return Me._corrected_lost_time_hours
		End Get
		Set
			If (Me._corrected_lost_time_hours.Equals(value) = false) Then
				Me._corrected_lost_time_hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_status", DbType:="VarChar(10)")>  _
	Public Property incident_status() As String
		Get
			Return Me._incident_status
		End Get
		Set
			If (String.Equals(Me._incident_status, value) = false) Then
				Me._incident_status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppUserAssignedJobsResult
	
	Private _psl As String
	
	Private _disp_id As Integer
	
	Private _formatted_disp_id As String
	
	Private _approx_start As System.Nullable(Of Date)
	
	Private _crew_on_loc_datetime As System.Nullable(Of Date)
	
	Private _crew_finished_job_datetime As System.Nullable(Of Date)
	
	Private _status As Short
	
	Private _well_name As String
	
	Private _company_name As String
	
	Private _district_name As String
	
	Private _critical_job_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_approx_start", DbType:="SmallDateTime")>  _
	Public Property approx_start() As System.Nullable(Of Date)
		Get
			Return Me._approx_start
		End Get
		Set
			If (Me._approx_start.Equals(value) = false) Then
				Me._approx_start = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_on_loc_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_on_loc_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_on_loc_datetime
		End Get
		Set
			If (Me._crew_on_loc_datetime.Equals(value) = false) Then
				Me._crew_on_loc_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_finished_job_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_finished_job_datetime
		End Get
		Set
			If (Me._crew_finished_job_datetime.Equals(value) = false) Then
				Me._crew_finished_job_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_name", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property company_name() As String
		Get
			Return Me._company_name
		End Get
		Set
			If (String.Equals(Me._company_name, value) = false) Then
				Me._company_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_district_name", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property district_name() As String
		Get
			Return Me._district_name
		End Get
		Set
			If (String.Equals(Me._district_name, value) = false) Then
				Me._district_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_critical_job_flag", DbType:="Bit NOT NULL")>  _
	Public Property critical_job_flag() As Boolean
		Get
			Return Me._critical_job_flag
		End Get
		Set
			If ((Me._critical_job_flag = value)  _
						= false) Then
				Me._critical_job_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppUserDistrictKpisResult
	
	Private _kpi_id As String
	
	Private _kpi_desc As String
	
	Private _kpi_value As System.Nullable(Of Decimal)
	
	Private _kpi_status As System.Nullable(Of Byte)
	
	Private _kpi_format As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_id", DbType:="NVarChar(128)")>  _
	Public Property kpi_id() As String
		Get
			Return Me._kpi_id
		End Get
		Set
			If (String.Equals(Me._kpi_id, value) = false) Then
				Me._kpi_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_desc", DbType:="VarChar(40)")>  _
	Public Property kpi_desc() As String
		Get
			Return Me._kpi_desc
		End Get
		Set
			If (String.Equals(Me._kpi_desc, value) = false) Then
				Me._kpi_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_value", DbType:="Decimal(10,2)")>  _
	Public Property kpi_value() As System.Nullable(Of Decimal)
		Get
			Return Me._kpi_value
		End Get
		Set
			If (Me._kpi_value.Equals(value) = false) Then
				Me._kpi_value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_status", DbType:="TinyInt")>  _
	Public Property kpi_status() As System.Nullable(Of Byte)
		Get
			Return Me._kpi_status
		End Get
		Set
			If (Me._kpi_status.Equals(value) = false) Then
				Me._kpi_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_format", DbType:="VarChar(2)")>  _
	Public Property kpi_format() As String
		Get
			Return Me._kpi_format
		End Get
		Set
			If (String.Equals(Me._kpi_format, value) = false) Then
				Me._kpi_format = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppUserKpisResult
	
	Private _kpi_id As String
	
	Private _kpi_desc As String
	
	Private _kpi_value As System.Nullable(Of Decimal)
	
	Private _kpi_status As System.Nullable(Of Byte)
	
	Private _kpi_format As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_id", DbType:="NVarChar(128)")>  _
	Public Property kpi_id() As String
		Get
			Return Me._kpi_id
		End Get
		Set
			If (String.Equals(Me._kpi_id, value) = false) Then
				Me._kpi_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_desc", DbType:="VarChar(20)")>  _
	Public Property kpi_desc() As String
		Get
			Return Me._kpi_desc
		End Get
		Set
			If (String.Equals(Me._kpi_desc, value) = false) Then
				Me._kpi_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_value", DbType:="Decimal(15,2)")>  _
	Public Property kpi_value() As System.Nullable(Of Decimal)
		Get
			Return Me._kpi_value
		End Get
		Set
			If (Me._kpi_value.Equals(value) = false) Then
				Me._kpi_value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_status", DbType:="TinyInt")>  _
	Public Property kpi_status() As System.Nullable(Of Byte)
		Get
			Return Me._kpi_status
		End Get
		Set
			If (Me._kpi_status.Equals(value) = false) Then
				Me._kpi_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_format", DbType:="VarChar(2)")>  _
	Public Property kpi_format() As String
		Get
			Return Me._kpi_format
		End Get
		Set
			If (String.Equals(Me._kpi_format, value) = false) Then
				Me._kpi_format = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppUserRoleShortcutConfigResult
	
	Private _user_role As String
	
	Private _shortcut_config As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_role", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property user_role() As String
		Get
			Return Me._user_role
		End Get
		Set
			If (String.Equals(Me._user_role, value) = false) Then
				Me._user_role = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortcut_config", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property shortcut_config() As String
		Get
			Return Me._shortcut_config
		End Get
		Set
			If (String.Equals(Me._shortcut_config, value) = false) Then
				Me._shortcut_config = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppUserShortcutConfigResult
	
	Private _user_id As String
	
	Private _shortcut_config As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me._user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortcut_config", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property shortcut_config() As String
		Get
			Return Me._shortcut_config
		End Get
		Set
			If (String.Equals(Me._shortcut_config, value) = false) Then
				Me._shortcut_config = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetKpiStatusListResult
	
	Private _status_id As Byte
	
	Private _status_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_id", DbType:="TinyInt NOT NULL")>  _
	Public Property status_id() As Byte
		Get
			Return Me._status_id
		End Get
		Set
			If ((Me._status_id = value)  _
						= false) Then
				Me._status_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status_desc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property status_desc() As String
		Get
			Return Me._status_desc
		End Get
		Set
			If (String.Equals(Me._status_desc, value) = false) Then
				Me._status_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetKpiTypeListResult
	
	Private _kpi_type_id As Byte
	
	Private _kpi_level As String
	
	Private _kpi_type As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_type_id", DbType:="TinyInt NOT NULL")>  _
	Public Property kpi_type_id() As Byte
		Get
			Return Me._kpi_type_id
		End Get
		Set
			If ((Me._kpi_type_id = value)  _
						= false) Then
				Me._kpi_type_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_level", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property kpi_level() As String
		Get
			Return Me._kpi_level
		End Get
		Set
			If (String.Equals(Me._kpi_level, value) = false) Then
				Me._kpi_level = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kpi_type", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property kpi_type() As String
		Get
			Return Me._kpi_type
		End Get
		Set
			If (String.Equals(Me._kpi_type, value) = false) Then
				Me._kpi_type = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertQuoteRecordResult
	
	Private _rec_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class CopyQuoteRecordResult
	
	Private _new_rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_rec_id", DbType:="Int")>  _
	Public Property new_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._new_rec_id
		End Get
		Set
			If (Me._new_rec_id.Equals(value) = false) Then
				Me._new_rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFsoRecordResult
	
	Private _rec_id As System.Nullable(Of Decimal)
	
	Private _service_order_rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Decimal(38,0)")>  _
	Public Property rec_id() As System.Nullable(Of Decimal)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_service_order_rec_id", DbType:="Int")>  _
	Public Property service_order_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._service_order_rec_id
		End Get
		Set
			If (Me._service_order_rec_id.Equals(value) = false) Then
				Me._service_order_rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertPSDispPersonnelRecordResult
	
	Private _field_job_bonus_rec_id As System.Nullable(Of Decimal)
	
	Private _job_type As System.Nullable(Of Short)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_job_bonus_rec_id", DbType:="Decimal(38,0)")>  _
	Public Property field_job_bonus_rec_id() As System.Nullable(Of Decimal)
		Get
			Return Me._field_job_bonus_rec_id
		End Get
		Set
			If (Me._field_job_bonus_rec_id.Equals(value) = false) Then
				Me._field_job_bonus_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_type", DbType:="SmallInt")>  _
	Public Property job_type() As System.Nullable(Of Short)
		Get
			Return Me._job_type
		End Get
		Set
			If (Me._job_type.Equals(value) = false) Then
				Me._job_type = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispTightHoleUserAccessRecordsResult
	
	Private _disp_id As Integer
	
	Private _user_id As String
	
	Private _owner_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me._user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owner_flag", DbType:="Bit NOT NULL")>  _
	Public Property owner_flag() As Boolean
		Get
			Return Me._owner_flag
		End Get
		Set
			If ((Me._owner_flag = value)  _
						= false) Then
				Me._owner_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetContractUserAccessRecordsResult1
	
	Private _contract_rec_id As Integer
	
	Private _user_id As String
	
	Private _owner_flag As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_rec_id", DbType:="Int NOT NULL")>  _
	Public Property contract_rec_id() As Integer
		Get
			Return Me._contract_rec_id
		End Get
		Set
			If ((Me._contract_rec_id = value)  _
						= false) Then
				Me._contract_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me._user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_owner_flag", DbType:="Bit NOT NULL")>  _
	Public Property owner_flag() As Boolean
		Get
			Return Me._owner_flag
		End Get
		Set
			If ((Me._owner_flag = value)  _
						= false) Then
				Me._owner_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetPSLListResult
	
	Private _psl_id As String
	
	Private _psl_name As String
	
	Private _psl_color As System.Nullable(Of Integer)
	
	Private _dispatch_type As String
	
	Private _display_id As String
	
	Private _display_order As System.Nullable(Of Integer)
	
	Private _available_offline_flag As System.Nullable(Of Boolean)
	
	Private _available_in_rig_tracker_flag As System.Nullable(Of Boolean)
	
	Private _available_in_asset_forecaster_flag As System.Nullable(Of Boolean)
	
	Private _available_in_employee_forecaster_flag As System.Nullable(Of Boolean)
	
	Private _show_on_map As System.Nullable(Of Boolean)
	
	Private _show_on_calendar As System.Nullable(Of Boolean)
	
	Private _inactive_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_id", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl_id() As String
		Get
			Return Me._psl_id
		End Get
		Set
			If (String.Equals(Me._psl_id, value) = false) Then
				Me._psl_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_name", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property psl_name() As String
		Get
			Return Me._psl_name
		End Get
		Set
			If (String.Equals(Me._psl_name, value) = false) Then
				Me._psl_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_color", DbType:="Int")>  _
	Public Property psl_color() As System.Nullable(Of Integer)
		Get
			Return Me._psl_color
		End Get
		Set
			If (Me._psl_color.Equals(value) = false) Then
				Me._psl_color = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dispatch_type", DbType:="VarChar(5)")>  _
	Public Property dispatch_type() As String
		Get
			Return Me._dispatch_type
		End Get
		Set
			If (String.Equals(Me._dispatch_type, value) = false) Then
				Me._dispatch_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_id", DbType:="VarChar(5)")>  _
	Public Property display_id() As String
		Get
			Return Me._display_id
		End Get
		Set
			If (String.Equals(Me._display_id, value) = false) Then
				Me._display_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int")>  _
	Public Property display_order() As System.Nullable(Of Integer)
		Get
			Return Me._display_order
		End Get
		Set
			If (Me._display_order.Equals(value) = false) Then
				Me._display_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_available_offline_flag", DbType:="Bit")>  _
	Public Property available_offline_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._available_offline_flag
		End Get
		Set
			If (Me._available_offline_flag.Equals(value) = false) Then
				Me._available_offline_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_available_in_rig_tracker_flag", DbType:="Bit")>  _
	Public Property available_in_rig_tracker_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._available_in_rig_tracker_flag
		End Get
		Set
			If (Me._available_in_rig_tracker_flag.Equals(value) = false) Then
				Me._available_in_rig_tracker_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_available_in_asset_forecaster_flag", DbType:="Bit")>  _
	Public Property available_in_asset_forecaster_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._available_in_asset_forecaster_flag
		End Get
		Set
			If (Me._available_in_asset_forecaster_flag.Equals(value) = false) Then
				Me._available_in_asset_forecaster_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_available_in_employee_forecaster_flag", DbType:="Bit")>  _
	Public Property available_in_employee_forecaster_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._available_in_employee_forecaster_flag
		End Get
		Set
			If (Me._available_in_employee_forecaster_flag.Equals(value) = false) Then
				Me._available_in_employee_forecaster_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_show_on_map", DbType:="Bit")>  _
	Public Property show_on_map() As System.Nullable(Of Boolean)
		Get
			Return Me._show_on_map
		End Get
		Set
			If (Me._show_on_map.Equals(value) = false) Then
				Me._show_on_map = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_show_on_calendar", DbType:="Bit")>  _
	Public Property show_on_calendar() As System.Nullable(Of Boolean)
		Get
			Return Me._show_on_calendar
		End Get
		Set
			If (Me._show_on_calendar.Equals(value) = false) Then
				Me._show_on_calendar = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactive_flag", DbType:="Bit")>  _
	Public Property inactive_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._inactive_flag
		End Get
		Set
			If (Me._inactive_flag.Equals(value) = false) Then
				Me._inactive_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEmployeeForecastDisplayConfigResult
	
	Private _field_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property field_name() As String
		Get
			Return Me._field_name
		End Get
		Set
			If (String.Equals(Me._field_name, value) = false) Then
				Me._field_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEmployeeForecastSelectionListResult
	
	Private _employee_id As String
	
	Private _employee_name As String
	
	Private _member_title_id As String
	
	Private _member_title_desc As String
	
	Private _dist_id As Integer
	
	Private _dist_name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_name() As String
		Get
			Return Me._employee_name
		End Get
		Set
			If (String.Equals(Me._employee_name, value) = false) Then
				Me._employee_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", DbType:="VarChar(20)")>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me._member_title_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int NOT NULL")>  _
	Public Property dist_id() As Integer
		Get
			Return Me._dist_id
		End Get
		Set
			If ((Me._dist_id = value)  _
						= false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_name", DbType:="Char(40) NOT NULL", CanBeNull:=false)>  _
	Public Property dist_name() As String
		Get
			Return Me._dist_name
		End Get
		Set
			If (String.Equals(Me._dist_name, value) = false) Then
				Me._dist_name = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetContractDocRecordsResult
	
	Private _rec_id As Integer
	
	Private _contract_rec_id As Integer
	
	Private _original_file_path As String
	
	Private _icon_description As String
	
	Private _document_type As String
	
	Private _file_size As System.Nullable(Of Single)
	
	Private _update_user_id As String
	
	Private _update_time As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract_rec_id", DbType:="Int NOT NULL")>  _
	Public Property contract_rec_id() As Integer
		Get
			Return Me._contract_rec_id
		End Get
		Set
			If ((Me._contract_rec_id = value)  _
						= false) Then
				Me._contract_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_file_path", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property original_file_path() As String
		Get
			Return Me._original_file_path
		End Get
		Set
			If (String.Equals(Me._original_file_path, value) = false) Then
				Me._original_file_path = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon_description", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property icon_description() As String
		Get
			Return Me._icon_description
		End Get
		Set
			If (String.Equals(Me._icon_description, value) = false) Then
				Me._icon_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type", DbType:="VarChar(50)")>  _
	Public Property document_type() As String
		Get
			Return Me._document_type
		End Get
		Set
			If (String.Equals(Me._document_type, value) = false) Then
				Me._document_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_size", DbType:="Real")>  _
	Public Property file_size() As System.Nullable(Of Single)
		Get
			Return Me._file_size
		End Get
		Set
			If (Me._file_size.Equals(value) = false) Then
				Me._file_size = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_user_id", DbType:="VarChar(30)")>  _
	Public Property update_user_id() As String
		Get
			Return Me._update_user_id
		End Get
		Set
			If (String.Equals(Me._update_user_id, value) = false) Then
				Me._update_user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_time", DbType:="DateTime")>  _
	Public Property update_time() As System.Nullable(Of Date)
		Get
			Return Me._update_time
		End Get
		Set
			If (Me._update_time.Equals(value) = false) Then
				Me._update_time = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertContractDocRecordResult
	
	Private _rec_id As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Decimal(38,0)")>  _
	Public Property rec_id() As System.Nullable(Of Decimal)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetEmployeeForecastTitleListResult
	
	Private _member_title_id As String
	
	Private _member_title_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", DbType:="VarChar(20)")>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me._member_title_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPersonnelAssignedNotificationDataResult
	
	Private _formatted_disp_id As String
	
	Private _scheduled_date As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_scheduled_date", DbType:="VarChar(36)")>  _
	Public Property scheduled_date() As String
		Get
			Return Me._scheduled_date
		End Get
		Set
			If (String.Equals(Me._scheduled_date, value) = false) Then
				Me._scheduled_date = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPersonnelWithApplicableCompetenciesResult
	
	Private _employee_id As String
	
	Private _name As String
	
	Private _member_title_id As String
	
	Private _member_title_desc As String
	
	Private _applicable_competencies As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(25)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5)")>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", DbType:="VarChar(20)")>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me._member_title_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_applicable_competencies", DbType:="VarChar(5)")>  _
	Public Property applicable_competencies() As String
		Get
			Return Me._applicable_competencies
		End Get
		Set
			If (String.Equals(Me._applicable_competencies, value) = false) Then
				Me._applicable_competencies = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispEquipmentPmPointIssueDetailsResult
	
	Private _asset_id As String
	
	Private _series_id As String
	
	Private _pm_points As Integer
	
	Private _pm_point_threshold_level As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_series_id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property series_id() As String
		Get
			Return Me._series_id
		End Get
		Set
			If (String.Equals(Me._series_id, value) = false) Then
				Me._series_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_points", DbType:="Int NOT NULL")>  _
	Public Property pm_points() As Integer
		Get
			Return Me._pm_points
		End Get
		Set
			If ((Me._pm_points = value)  _
						= false) Then
				Me._pm_points = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pm_point_threshold_level", DbType:="VarChar(10)")>  _
	Public Property pm_point_threshold_level() As String
		Get
			Return Me._pm_point_threshold_level
		End Get
		Set
			If (String.Equals(Me._pm_point_threshold_level, value) = false) Then
				Me._pm_point_threshold_level = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAppUserDataGridConfigResult
	
	Private _column_config As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_column_config", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property column_config() As String
		Get
			Return Me._column_config
		End Get
		Set
			If (String.Equals(Me._column_config, value) = false) Then
				Me._column_config = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispStatLostTimeIncidentDataResult
	
	Private _status As Short
	
	Private _lost_time As Double
	
	Private _incident_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time", DbType:="Float NOT NULL")>  _
	Public Property lost_time() As Double
		Get
			Return Me._lost_time
		End Get
		Set
			If ((Me._lost_time = value)  _
						= false) Then
				Me._lost_time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_count", DbType:="Int")>  _
	Public Property incident_count() As System.Nullable(Of Integer)
		Get
			Return Me._incident_count
		End Get
		Set
			If (Me._incident_count.Equals(value) = false) Then
				Me._incident_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispStatFsoDataResult
	
	Private _status As Short
	
	Private _fso_count As System.Nullable(Of Integer)
	
	Private _exported_fso_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_count", DbType:="Int")>  _
	Public Property fso_count() As System.Nullable(Of Integer)
		Get
			Return Me._fso_count
		End Get
		Set
			If (Me._fso_count.Equals(value) = false) Then
				Me._fso_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_fso_count", DbType:="Int")>  _
	Public Property exported_fso_count() As System.Nullable(Of Integer)
		Get
			Return Me._exported_fso_count
		End Get
		Set
			If (Me._exported_fso_count.Equals(value) = false) Then
				Me._exported_fso_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispStatQuoteDataResult
	
	Private _status As Short
	
	Private _quote_count As System.Nullable(Of Integer)
	
	Private _exported_quote_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quote_count", DbType:="Int")>  _
	Public Property quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._quote_count
		End Get
		Set
			If (Me._quote_count.Equals(value) = false) Then
				Me._quote_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exported_quote_count", DbType:="Int")>  _
	Public Property exported_quote_count() As System.Nullable(Of Integer)
		Get
			Return Me._exported_quote_count
		End Get
		Set
			If (Me._exported_quote_count.Equals(value) = false) Then
				Me._exported_quote_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispStatAssetSelectionStatusResult
	
	Private _job_status As System.Nullable(Of Short)
	
	Private _asset_selection_status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_status", DbType:="SmallInt")>  _
	Public Property job_status() As System.Nullable(Of Short)
		Get
			Return Me._job_status
		End Get
		Set
			If (Me._job_status.Equals(value) = false) Then
				Me._job_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_selection_status", DbType:="VarChar(23)")>  _
	Public Property asset_selection_status() As String
		Get
			Return Me._asset_selection_status
		End Get
		Set
			If (String.Equals(Me._asset_selection_status, value) = false) Then
				Me._asset_selection_status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispStatLqaStatusResult
	
	Private _job_status As System.Nullable(Of Short)
	
	Private _lqa_status As System.Nullable(Of Short)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_status", DbType:="SmallInt")>  _
	Public Property job_status() As System.Nullable(Of Short)
		Get
			Return Me._job_status
		End Get
		Set
			If (Me._job_status.Equals(value) = false) Then
				Me._job_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lqa_status", DbType:="SmallInt")>  _
	Public Property lqa_status() As System.Nullable(Of Short)
		Get
			Return Me._lqa_status
		End Get
		Set
			If (Me._lqa_status.Equals(value) = false) Then
				Me._lqa_status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispStatEcrmStatusResult
	
	Private _status As Short
	
	Private _ecrm_status_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ecrm_status_flag", DbType:="Bit")>  _
	Public Property ecrm_status_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._ecrm_status_flag
		End Get
		Set
			If (Me._ecrm_status_flag.Equals(value) = false) Then
				Me._ecrm_status_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispGeoscienceServiceItemsResult
	
	Private _rec_id As Integer
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _gpi As String
	
	Private _instructions As String
	
	Private _rush_processing_flag As Boolean
	
	Private _job_type As String
	
	Private _data_qc As String
	
	Private _data_received_date As System.Nullable(Of Date)
	
	Private _processing_start_date As System.Nullable(Of Date)
	
	Private _estimated_delivery_date As System.Nullable(Of Date)
	
	Private _processing_complete_date As System.Nullable(Of Date)
	
	Private _preliminary_data_complete_date As System.Nullable(Of Date)
	
	Private _final_data_complete_date As System.Nullable(Of Date)
	
	Private _processed_quantity As System.Nullable(Of Single)
	
	Private _include_on_quote_flag As Boolean
	
	Private _manually_selected_flag As Boolean
	
	Private _assigned_to As String
	
	Private _description As String
	
	Private _discipline As String
	
	Private _primary_sort_order As System.Nullable(Of Integer)
	
	Private _archive_number As String
	
	Private _requirement As String
	
	Private _prerequisite_gpis As String
	
	Private _competency_issues_flag As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40)")>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_instructions", DbType:="VarChar(250)")>  _
	Public Property instructions() As String
		Get
			Return Me._instructions
		End Get
		Set
			If (String.Equals(Me._instructions, value) = false) Then
				Me._instructions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rush_processing_flag", DbType:="Bit NOT NULL")>  _
	Public Property rush_processing_flag() As Boolean
		Get
			Return Me._rush_processing_flag
		End Get
		Set
			If ((Me._rush_processing_flag = value)  _
						= false) Then
				Me._rush_processing_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_type", DbType:="VarChar(20)")>  _
	Public Property job_type() As String
		Get
			Return Me._job_type
		End Get
		Set
			If (String.Equals(Me._job_type, value) = false) Then
				Me._job_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_qc", DbType:="VarChar(20)")>  _
	Public Property data_qc() As String
		Get
			Return Me._data_qc
		End Get
		Set
			If (String.Equals(Me._data_qc, value) = false) Then
				Me._data_qc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_data_received_date", DbType:="Date")>  _
	Public Property data_received_date() As System.Nullable(Of Date)
		Get
			Return Me._data_received_date
		End Get
		Set
			If (Me._data_received_date.Equals(value) = false) Then
				Me._data_received_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processing_start_date", DbType:="Date")>  _
	Public Property processing_start_date() As System.Nullable(Of Date)
		Get
			Return Me._processing_start_date
		End Get
		Set
			If (Me._processing_start_date.Equals(value) = false) Then
				Me._processing_start_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estimated_delivery_date", DbType:="Date")>  _
	Public Property estimated_delivery_date() As System.Nullable(Of Date)
		Get
			Return Me._estimated_delivery_date
		End Get
		Set
			If (Me._estimated_delivery_date.Equals(value) = false) Then
				Me._estimated_delivery_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processing_complete_date", DbType:="Date")>  _
	Public Property processing_complete_date() As System.Nullable(Of Date)
		Get
			Return Me._processing_complete_date
		End Get
		Set
			If (Me._processing_complete_date.Equals(value) = false) Then
				Me._processing_complete_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_preliminary_data_complete_date", DbType:="Date")>  _
	Public Property preliminary_data_complete_date() As System.Nullable(Of Date)
		Get
			Return Me._preliminary_data_complete_date
		End Get
		Set
			If (Me._preliminary_data_complete_date.Equals(value) = false) Then
				Me._preliminary_data_complete_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_final_data_complete_date", DbType:="Date")>  _
	Public Property final_data_complete_date() As System.Nullable(Of Date)
		Get
			Return Me._final_data_complete_date
		End Get
		Set
			If (Me._final_data_complete_date.Equals(value) = false) Then
				Me._final_data_complete_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_processed_quantity", DbType:="Real")>  _
	Public Property processed_quantity() As System.Nullable(Of Single)
		Get
			Return Me._processed_quantity
		End Get
		Set
			If (Me._processed_quantity.Equals(value) = false) Then
				Me._processed_quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_include_on_quote_flag", DbType:="Bit NOT NULL")>  _
	Public Property include_on_quote_flag() As Boolean
		Get
			Return Me._include_on_quote_flag
		End Get
		Set
			If ((Me._include_on_quote_flag = value)  _
						= false) Then
				Me._include_on_quote_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manually_selected_flag", DbType:="Bit NOT NULL")>  _
	Public Property manually_selected_flag() As Boolean
		Get
			Return Me._manually_selected_flag
		End Get
		Set
			If ((Me._manually_selected_flag = value)  _
						= false) Then
				Me._manually_selected_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assigned_to", DbType:="NVarChar(MAX)")>  _
	Public Property assigned_to() As String
		Get
			Return Me._assigned_to
		End Get
		Set
			If (String.Equals(Me._assigned_to, value) = false) Then
				Me._assigned_to = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discipline", DbType:="VarChar(50)")>  _
	Public Property discipline() As String
		Get
			Return Me._discipline
		End Get
		Set
			If (String.Equals(Me._discipline, value) = false) Then
				Me._discipline = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_primary_sort_order", DbType:="Int")>  _
	Public Property primary_sort_order() As System.Nullable(Of Integer)
		Get
			Return Me._primary_sort_order
		End Get
		Set
			If (Me._primary_sort_order.Equals(value) = false) Then
				Me._primary_sort_order = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_archive_number", DbType:="VarChar(60)")>  _
	Public Property archive_number() As String
		Get
			Return Me._archive_number
		End Get
		Set
			If (String.Equals(Me._archive_number, value) = false) Then
				Me._archive_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requirement", DbType:="VarChar(50)")>  _
	Public Property requirement() As String
		Get
			Return Me._requirement
		End Get
		Set
			If (String.Equals(Me._requirement, value) = false) Then
				Me._requirement = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prerequisite_gpis", DbType:="NVarChar(MAX)")>  _
	Public Property prerequisite_gpis() As String
		Get
			Return Me._prerequisite_gpis
		End Get
		Set
			If (String.Equals(Me._prerequisite_gpis, value) = false) Then
				Me._prerequisite_gpis = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_issues_flag", DbType:="Bit")>  _
	Public Property competency_issues_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._competency_issues_flag
		End Get
		Set
			If (Me._competency_issues_flag.Equals(value) = false) Then
				Me._competency_issues_flag = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchOperationsDashboardPersonnelWithApplicableCompetenciesResult
	
	Private _disp_id As Integer
	
	Private _employee_id As String
	
	Private _member_title_id As String
	
	Private _applicable_competencies As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5)")>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_applicable_competencies", DbType:="VarChar(5)")>  _
	Public Property applicable_competencies() As String
		Get
			Return Me._applicable_competencies
		End Get
		Set
			If (String.Equals(Me._applicable_competencies, value) = false) Then
				Me._applicable_competencies = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchOperationsDashboardDispIdsByEquipmentPmPointIssuesResult
	
	Private _disp_id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRootCauseAnalysisSeverityListResult
	
	Private _severity_id As Integer
	
	Private _severity_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_id", DbType:="Int NOT NULL")>  _
	Public Property severity_id() As Integer
		Get
			Return Me._severity_id
		End Get
		Set
			If ((Me._severity_id = value)  _
						= false) Then
				Me._severity_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_severity_desc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property severity_desc() As String
		Get
			Return Me._severity_desc
		End Get
		Set
			If (String.Equals(Me._severity_desc, value) = false) Then
				Me._severity_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFimpRootCauseAnalysisRecordResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFimpRecordsResult
	
	Private _rec_id As Integer
	
	Private _fracas_id As String
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Private _formatted_disp_id As String
	
	Private _event_severity_id As System.Nullable(Of Integer)
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _case_worker As String
	
	Private _asset_id As String
	
	Private _incident_datetime As System.Nullable(Of Date)
	
	Private _incident_reported_datetime As System.Nullable(Of Date)
	
	Private _incident_reported_by As String
	
	Private _incident_completed_datetime As System.Nullable(Of Date)
	
	Private _incident_completed_by As String
	
	Private _irb_scheduled_date As System.Nullable(Of Date)
	
	Private _incident_closed_datetime As System.Nullable(Of Date)
	
	Private _incident_closed_by As String
	
	Private _subject As String
	
	Private _problem_description As String
	
	Private _operating_time_hours As System.Nullable(Of Double)
	
	Private _lost_time_hours As System.Nullable(Of Double)
	
	Private _incident_status As String
	
	Private _user_can_delete_incident_flag As System.Nullable(Of Boolean)
	
	Private _root_cause_count As Integer
	
	Private _contributing_factor_count As Integer
	
	Private _corrective_action_count As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fracas_id", DbType:="VarChar(50)")>  _
	Public Property fracas_id() As String
		Get
			Return Me._fracas_id
		End Get
		Set
			If (String.Equals(Me._fracas_id, value) = false) Then
				Me._fracas_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formatted_disp_id", DbType:="VarChar(8)")>  _
	Public Property formatted_disp_id() As String
		Get
			Return Me._formatted_disp_id
		End Get
		Set
			If (String.Equals(Me._formatted_disp_id, value) = false) Then
				Me._formatted_disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_event_severity_id", DbType:="Int")>  _
	Public Property event_severity_id() As System.Nullable(Of Integer)
		Get
			Return Me._event_severity_id
		End Get
		Set
			If (Me._event_severity_id.Equals(value) = false) Then
				Me._event_severity_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_case_worker", DbType:="VarChar(25)")>  _
	Public Property case_worker() As String
		Get
			Return Me._case_worker
		End Get
		Set
			If (String.Equals(Me._case_worker, value) = false) Then
				Me._case_worker = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40)")>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_datetime", DbType:="SmallDateTime")>  _
	Public Property incident_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_datetime
		End Get
		Set
			If (Me._incident_datetime.Equals(value) = false) Then
				Me._incident_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_reported_datetime", DbType:="SmallDateTime")>  _
	Public Property incident_reported_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_reported_datetime
		End Get
		Set
			If (Me._incident_reported_datetime.Equals(value) = false) Then
				Me._incident_reported_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_reported_by", DbType:="VarChar(20)")>  _
	Public Property incident_reported_by() As String
		Get
			Return Me._incident_reported_by
		End Get
		Set
			If (String.Equals(Me._incident_reported_by, value) = false) Then
				Me._incident_reported_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_completed_datetime", DbType:="SmallDateTime")>  _
	Public Property incident_completed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_completed_datetime
		End Get
		Set
			If (Me._incident_completed_datetime.Equals(value) = false) Then
				Me._incident_completed_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_completed_by", DbType:="VarChar(20)")>  _
	Public Property incident_completed_by() As String
		Get
			Return Me._incident_completed_by
		End Get
		Set
			If (String.Equals(Me._incident_completed_by, value) = false) Then
				Me._incident_completed_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_irb_scheduled_date", DbType:="Date")>  _
	Public Property irb_scheduled_date() As System.Nullable(Of Date)
		Get
			Return Me._irb_scheduled_date
		End Get
		Set
			If (Me._irb_scheduled_date.Equals(value) = false) Then
				Me._irb_scheduled_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_closed_datetime", DbType:="SmallDateTime")>  _
	Public Property incident_closed_datetime() As System.Nullable(Of Date)
		Get
			Return Me._incident_closed_datetime
		End Get
		Set
			If (Me._incident_closed_datetime.Equals(value) = false) Then
				Me._incident_closed_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_closed_by", DbType:="VarChar(20)")>  _
	Public Property incident_closed_by() As String
		Get
			Return Me._incident_closed_by
		End Get
		Set
			If (String.Equals(Me._incident_closed_by, value) = false) Then
				Me._incident_closed_by = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="VarChar(50)")>  _
	Public Property subject() As String
		Get
			Return Me._subject
		End Get
		Set
			If (String.Equals(Me._subject, value) = false) Then
				Me._subject = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_problem_description", DbType:="VarChar(1500)")>  _
	Public Property problem_description() As String
		Get
			Return Me._problem_description
		End Get
		Set
			If (String.Equals(Me._problem_description, value) = false) Then
				Me._problem_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_operating_time_hours", DbType:="Float")>  _
	Public Property operating_time_hours() As System.Nullable(Of Double)
		Get
			Return Me._operating_time_hours
		End Get
		Set
			If (Me._operating_time_hours.Equals(value) = false) Then
				Me._operating_time_hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lost_time_hours", DbType:="Float")>  _
	Public Property lost_time_hours() As System.Nullable(Of Double)
		Get
			Return Me._lost_time_hours
		End Get
		Set
			If (Me._lost_time_hours.Equals(value) = false) Then
				Me._lost_time_hours = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incident_status", DbType:="VarChar(10)")>  _
	Public Property incident_status() As String
		Get
			Return Me._incident_status
		End Get
		Set
			If (String.Equals(Me._incident_status, value) = false) Then
				Me._incident_status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_can_delete_incident_flag", DbType:="Bit")>  _
	Public Property user_can_delete_incident_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._user_can_delete_incident_flag
		End Get
		Set
			If (Me._user_can_delete_incident_flag.Equals(value) = false) Then
				Me._user_can_delete_incident_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root_cause_count", DbType:="Int NOT NULL")>  _
	Public Property root_cause_count() As Integer
		Get
			Return Me._root_cause_count
		End Get
		Set
			If ((Me._root_cause_count = value)  _
						= false) Then
				Me._root_cause_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contributing_factor_count", DbType:="Int NOT NULL")>  _
	Public Property contributing_factor_count() As Integer
		Get
			Return Me._contributing_factor_count
		End Get
		Set
			If ((Me._contributing_factor_count = value)  _
						= false) Then
				Me._contributing_factor_count = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_corrective_action_count", DbType:="Int NOT NULL")>  _
	Public Property corrective_action_count() As Integer
		Get
			Return Me._corrective_action_count
		End Get
		Set
			If ((Me._corrective_action_count = value)  _
						= false) Then
				Me._corrective_action_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class CopyDispatchRecordResult
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertFsoItemResult
	
	Private _rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int")>  _
	Public Property rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoExportLineItemDataResult
	
	Private _rec_id As Integer
	
	Private _gpi As String
	
	Private _item As String
	
	Private _name As String
	
	Private _quantity As System.Nullable(Of Decimal)
	
	Private _unit_price As System.Nullable(Of Decimal)
	
	Private _gross_amount As System.Nullable(Of Decimal)
	
	Private _uplift As System.Nullable(Of Decimal)
	
	Private _uplift_amount As System.Nullable(Of Decimal)
	
	Private _discount As System.Nullable(Of Decimal)
	
	Private _net_amount As System.Nullable(Of Decimal)
	
	Private _sap_export_row_number As System.Nullable(Of Integer)
	
	Private _ship_datetime As System.Nullable(Of Date)
	
	Private _return_datetime As System.Nullable(Of Date)
	
	Private _material As String
	
	Private _custom_description As String
	
	Private _line_item_comment As String
	
	Private _unit As String
	
	Private _category_code As String
	
	Private _category_desc As String
	
	Private _bundle_summary_item_flag As System.Nullable(Of Boolean)
	
	Private _bundle_item_rec_id As System.Nullable(Of Integer)
	
	Private _update_status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40)")>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item", DbType:="VarChar(10)")>  _
	Public Property item() As String
		Get
			Return Me._item
		End Get
		Set
			If (String.Equals(Me._item, value) = false) Then
				Me._item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Decimal(10,2)")>  _
	Public Property quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._unit_price
		End Get
		Set
			If (Me._unit_price.Equals(value) = false) Then
				Me._unit_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gross_amount", DbType:="Decimal(15,2)")>  _
	Public Property gross_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._gross_amount
		End Get
		Set
			If (Me._gross_amount.Equals(value) = false) Then
				Me._gross_amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uplift", DbType:="Decimal(5,2)")>  _
	Public Property uplift() As System.Nullable(Of Decimal)
		Get
			Return Me._uplift
		End Get
		Set
			If (Me._uplift.Equals(value) = false) Then
				Me._uplift = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uplift_amount", DbType:="Decimal(15,2)")>  _
	Public Property uplift_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._uplift_amount
		End Get
		Set
			If (Me._uplift_amount.Equals(value) = false) Then
				Me._uplift_amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(5,2)")>  _
	Public Property discount() As System.Nullable(Of Decimal)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me._discount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_net_amount", DbType:="Decimal(15,2)")>  _
	Public Property net_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._net_amount
		End Get
		Set
			If (Me._net_amount.Equals(value) = false) Then
				Me._net_amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_row_number", DbType:="Int")>  _
	Public Property sap_export_row_number() As System.Nullable(Of Integer)
		Get
			Return Me._sap_export_row_number
		End Get
		Set
			If (Me._sap_export_row_number.Equals(value) = false) Then
				Me._sap_export_row_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ship_datetime", DbType:="SmallDateTime")>  _
	Public Property ship_datetime() As System.Nullable(Of Date)
		Get
			Return Me._ship_datetime
		End Get
		Set
			If (Me._ship_datetime.Equals(value) = false) Then
				Me._ship_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_return_datetime", DbType:="SmallDateTime")>  _
	Public Property return_datetime() As System.Nullable(Of Date)
		Get
			Return Me._return_datetime
		End Get
		Set
			If (Me._return_datetime.Equals(value) = false) Then
				Me._return_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(15)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custom_description", DbType:="VarChar(150)")>  _
	Public Property custom_description() As String
		Get
			Return Me._custom_description
		End Get
		Set
			If (String.Equals(Me._custom_description, value) = false) Then
				Me._custom_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_line_item_comment", DbType:="VarChar(250)")>  _
	Public Property line_item_comment() As String
		Get
			Return Me._line_item_comment
		End Get
		Set
			If (String.Equals(Me._line_item_comment, value) = false) Then
				Me._line_item_comment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit", DbType:="VarChar(10)")>  _
	Public Property unit() As String
		Get
			Return Me._unit
		End Get
		Set
			If (String.Equals(Me._unit, value) = false) Then
				Me._unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_code", DbType:="VarChar(10)")>  _
	Public Property category_code() As String
		Get
			Return Me._category_code
		End Get
		Set
			If (String.Equals(Me._category_code, value) = false) Then
				Me._category_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_desc", DbType:="VarChar(20)")>  _
	Public Property category_desc() As String
		Get
			Return Me._category_desc
		End Get
		Set
			If (String.Equals(Me._category_desc, value) = false) Then
				Me._category_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle_summary_item_flag", DbType:="Bit")>  _
	Public Property bundle_summary_item_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._bundle_summary_item_flag
		End Get
		Set
			If (Me._bundle_summary_item_flag.Equals(value) = false) Then
				Me._bundle_summary_item_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle_item_rec_id", DbType:="Int")>  _
	Public Property bundle_item_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._bundle_item_rec_id
		End Get
		Set
			If (Me._bundle_item_rec_id.Equals(value) = false) Then
				Me._bundle_item_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_status", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property update_status() As String
		Get
			Return Me._update_status
		End Get
		Set
			If (String.Equals(Me._update_status, value) = false) Then
				Me._update_status = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoServiceSelectionListByFsoRecIdResult
	
	Private _rec_id As Integer
	
	Private _fso_rec_id As System.Nullable(Of Integer)
	
	Private _price_book_rec_id As System.Nullable(Of Integer)
	
	Private _gpi As String
	
	Private _item As String
	
	Private _price_schedule_id As String
	
	Private _material As String
	
	Private _description As String
	
	Private _custom_description As String
	
	Private _customer_description As String
	
	Private _line_item_comment As String
	
	Private _name As String
	
	Private _minimum_quantity As System.Nullable(Of Decimal)
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _base_unit_price As System.Nullable(Of Decimal)
	
	Private _unit As String
	
	Private _discount_allowed_flag As Boolean
	
	Private _bundle_item_rec_id As System.Nullable(Of Integer)
	
	Private _quantity As System.Nullable(Of Decimal)
	
	Private _unit_price As System.Nullable(Of Decimal)
	
	Private _override_unit_price As System.Nullable(Of Decimal)
	
	Private _uplift As System.Nullable(Of Decimal)
	
	Private _gross_amount As System.Nullable(Of Decimal)
	
	Private _net_amount As System.Nullable(Of Decimal)
	
	Private _discount As System.Nullable(Of Decimal)
	
	Private _row_number As System.Nullable(Of Integer)
	
	Private _sap_export_row_number As System.Nullable(Of Integer)
	
	Private _inserted_as_additional_charge_flag As System.Nullable(Of Boolean)
	
	Private _add_to_group_calculation_flag As System.Nullable(Of Boolean)
	
	Private _group_name As String
	
	Private _ship_datetime As System.Nullable(Of Date)
	
	Private _return_datetime As System.Nullable(Of Date)
	
	Private _upsell_item_flag As Boolean
	
	Private _copied_from_contract_flag As Boolean
	
	Private _bundle_summary_item_flag As System.Nullable(Of Boolean)
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fso_rec_id", DbType:="Int")>  _
	Public Property fso_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._fso_rec_id
		End Get
		Set
			If (Me._fso_rec_id.Equals(value) = false) Then
				Me._fso_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_book_rec_id", DbType:="Int")>  _
	Public Property price_book_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._price_book_rec_id
		End Get
		Set
			If (Me._price_book_rec_id.Equals(value) = false) Then
				Me._price_book_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpi", DbType:="VarChar(40)")>  _
	Public Property gpi() As String
		Get
			Return Me._gpi
		End Get
		Set
			If (String.Equals(Me._gpi, value) = false) Then
				Me._gpi = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item", DbType:="VarChar(10)")>  _
	Public Property item() As String
		Get
			Return Me._item
		End Get
		Set
			If (String.Equals(Me._item, value) = false) Then
				Me._item = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_schedule_id", DbType:="VarChar(10)")>  _
	Public Property price_schedule_id() As String
		Get
			Return Me._price_schedule_id
		End Get
		Set
			If (String.Equals(Me._price_schedule_id, value) = false) Then
				Me._price_schedule_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(15)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custom_description", DbType:="VarChar(150)")>  _
	Public Property custom_description() As String
		Get
			Return Me._custom_description
		End Get
		Set
			If (String.Equals(Me._custom_description, value) = false) Then
				Me._custom_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customer_description", DbType:="VarChar(250)")>  _
	Public Property customer_description() As String
		Get
			Return Me._customer_description
		End Get
		Set
			If (String.Equals(Me._customer_description, value) = false) Then
				Me._customer_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_line_item_comment", DbType:="VarChar(250)")>  _
	Public Property line_item_comment() As String
		Get
			Return Me._line_item_comment
		End Get
		Set
			If (String.Equals(Me._line_item_comment, value) = false) Then
				Me._line_item_comment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me._name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minimum_quantity", DbType:="Decimal(10,1)")>  _
	Public Property minimum_quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._minimum_quantity
		End Get
		Set
			If (Me._minimum_quantity.Equals(value) = false) Then
				Me._minimum_quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(15,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me._amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_base_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property base_unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._base_unit_price
		End Get
		Set
			If (Me._base_unit_price.Equals(value) = false) Then
				Me._base_unit_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit", DbType:="VarChar(10)")>  _
	Public Property unit() As String
		Get
			Return Me._unit
		End Get
		Set
			If (String.Equals(Me._unit, value) = false) Then
				Me._unit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount_allowed_flag", DbType:="Bit NOT NULL")>  _
	Public Property discount_allowed_flag() As Boolean
		Get
			Return Me._discount_allowed_flag
		End Get
		Set
			If ((Me._discount_allowed_flag = value)  _
						= false) Then
				Me._discount_allowed_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle_item_rec_id", DbType:="Int")>  _
	Public Property bundle_item_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._bundle_item_rec_id
		End Get
		Set
			If (Me._bundle_item_rec_id.Equals(value) = false) Then
				Me._bundle_item_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Decimal(10,2)")>  _
	Public Property quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me._quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._unit_price
		End Get
		Set
			If (Me._unit_price.Equals(value) = false) Then
				Me._unit_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_override_unit_price", DbType:="Decimal(15,2)")>  _
	Public Property override_unit_price() As System.Nullable(Of Decimal)
		Get
			Return Me._override_unit_price
		End Get
		Set
			If (Me._override_unit_price.Equals(value) = false) Then
				Me._override_unit_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uplift", DbType:="Decimal(5,2)")>  _
	Public Property uplift() As System.Nullable(Of Decimal)
		Get
			Return Me._uplift
		End Get
		Set
			If (Me._uplift.Equals(value) = false) Then
				Me._uplift = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gross_amount", DbType:="Decimal(15,2)")>  _
	Public Property gross_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._gross_amount
		End Get
		Set
			If (Me._gross_amount.Equals(value) = false) Then
				Me._gross_amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_net_amount", DbType:="Decimal(15,2)")>  _
	Public Property net_amount() As System.Nullable(Of Decimal)
		Get
			Return Me._net_amount
		End Get
		Set
			If (Me._net_amount.Equals(value) = false) Then
				Me._net_amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(5,2)")>  _
	Public Property discount() As System.Nullable(Of Decimal)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me._discount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_row_number", DbType:="Int")>  _
	Public Property row_number() As System.Nullable(Of Integer)
		Get
			Return Me._row_number
		End Get
		Set
			If (Me._row_number.Equals(value) = false) Then
				Me._row_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_row_number", DbType:="Int")>  _
	Public Property sap_export_row_number() As System.Nullable(Of Integer)
		Get
			Return Me._sap_export_row_number
		End Get
		Set
			If (Me._sap_export_row_number.Equals(value) = false) Then
				Me._sap_export_row_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inserted_as_additional_charge_flag", DbType:="Bit")>  _
	Public Property inserted_as_additional_charge_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._inserted_as_additional_charge_flag
		End Get
		Set
			If (Me._inserted_as_additional_charge_flag.Equals(value) = false) Then
				Me._inserted_as_additional_charge_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_add_to_group_calculation_flag", DbType:="Bit")>  _
	Public Property add_to_group_calculation_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._add_to_group_calculation_flag
		End Get
		Set
			If (Me._add_to_group_calculation_flag.Equals(value) = false) Then
				Me._add_to_group_calculation_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_group_name", DbType:="VarChar(30)")>  _
	Public Property group_name() As String
		Get
			Return Me._group_name
		End Get
		Set
			If (String.Equals(Me._group_name, value) = false) Then
				Me._group_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ship_datetime", DbType:="SmallDateTime")>  _
	Public Property ship_datetime() As System.Nullable(Of Date)
		Get
			Return Me._ship_datetime
		End Get
		Set
			If (Me._ship_datetime.Equals(value) = false) Then
				Me._ship_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_return_datetime", DbType:="SmallDateTime")>  _
	Public Property return_datetime() As System.Nullable(Of Date)
		Get
			Return Me._return_datetime
		End Get
		Set
			If (Me._return_datetime.Equals(value) = false) Then
				Me._return_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_upsell_item_flag", DbType:="Bit NOT NULL")>  _
	Public Property upsell_item_flag() As Boolean
		Get
			Return Me._upsell_item_flag
		End Get
		Set
			If ((Me._upsell_item_flag = value)  _
						= false) Then
				Me._upsell_item_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_copied_from_contract_flag", DbType:="Bit NOT NULL")>  _
	Public Property copied_from_contract_flag() As Boolean
		Get
			Return Me._copied_from_contract_flag
		End Get
		Set
			If ((Me._copied_from_contract_flag = value)  _
						= false) Then
				Me._copied_from_contract_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bundle_summary_item_flag", DbType:="Bit")>  _
	Public Property bundle_summary_item_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._bundle_summary_item_flag
		End Get
		Set
			If (Me._bundle_summary_item_flag.Equals(value) = false) Then
				Me._bundle_summary_item_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class ImportContractRecordResult
	
	Private _rec_id As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Decimal(38,0)")>  _
	Public Property rec_id() As System.Nullable(Of Decimal)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertDispMainRecordResult
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDashboardLegendColumnDataResult
	
	Private _rec_id As Integer
	
	Private _column_name As String
	
	Private _color_hex As String
	
	Private _traffic_light_flag As Boolean
	
	Private _description As String
	
	Private _display_order As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_column_name", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property column_name() As String
		Get
			Return Me._column_name
		End Get
		Set
			If (String.Equals(Me._column_name, value) = false) Then
				Me._column_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_color_hex", DbType:="Char(8) NOT NULL", CanBeNull:=false)>  _
	Public Property color_hex() As String
		Get
			Return Me._color_hex
		End Get
		Set
			If (String.Equals(Me._color_hex, value) = false) Then
				Me._color_hex = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_traffic_light_flag", DbType:="Bit NOT NULL")>  _
	Public Property traffic_light_flag() As Boolean
		Get
			Return Me._traffic_light_flag
		End Get
		Set
			If ((Me._traffic_light_flag = value)  _
						= false) Then
				Me._traffic_light_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int NOT NULL")>  _
	Public Property display_order() As Integer
		Get
			Return Me._display_order
		End Get
		Set
			If ((Me._display_order = value)  _
						= false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDashboardLegendRowDataResult
	
	Private _rec_id As Integer
	
	Private _attribute As String
	
	Private _description As String
	
	Private _display_order As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_attribute", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property attribute() As String
		Get
			Return Me._attribute
		End Get
		Set
			If (String.Equals(Me._attribute, value) = false) Then
				Me._attribute = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int NOT NULL")>  _
	Public Property display_order() As Integer
		Get
			Return Me._display_order
		End Get
		Set
			If ((Me._display_order = value)  _
						= false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDashboardLegendFunctionalityDataResult
	
	Private _rec_id As Integer
	
	Private _category As String
	
	Private _description As String
	
	Private _display_order As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property category() As String
		Get
			Return Me._category
		End Get
		Set
			If (String.Equals(Me._category, value) = false) Then
				Me._category = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int NOT NULL")>  _
	Public Property display_order() As Integer
		Get
			Return Me._display_order
		End Get
		Set
			If ((Me._display_order = value)  _
						= false) Then
				Me._display_order = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertDispatchRecordFromSummaryResult
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertPSDispatchRecordResult
	
	Private _disp_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int")>  _
	Public Property disp_id() As System.Nullable(Of Integer)
		Get
			Return Me._disp_id
		End Get
		Set
			If (Me._disp_id.Equals(value) = false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRevenueForecastQmiTotalResult
	
	Private _qmi_total As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qmi_total", DbType:="Decimal(38,2)")>  _
	Public Property qmi_total() As System.Nullable(Of Decimal)
		Get
			Return Me._qmi_total
		End Get
		Set
			If (Me._qmi_total.Equals(value) = false) Then
				Me._qmi_total = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispSecurityMarketCodeResult
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _security_market_code As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_security_market_code", DbType:="VarChar(50)")>  _
	Public Property security_market_code() As String
		Get
			Return Me._security_market_code
		End Get
		Set
			If (String.Equals(Me._security_market_code, value) = false) Then
				Me._security_market_code = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchOperationsDashboardEngineerListResult
	
	Private _employee_id As String
	
	Private _employee_name As String
	
	Private _member_title_id As String
	
	Private _member_title_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_name", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property employee_name() As String
		Get
			Return Me._employee_name
		End Get
		Set
			If (String.Equals(Me._employee_name, value) = false) Then
				Me._employee_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="Char(5) NOT NULL", CanBeNull:=false)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_desc", DbType:="VarChar(20)")>  _
	Public Property member_title_desc() As String
		Get
			Return Me._member_title_desc
		End Get
		Set
			If (String.Equals(Me._member_title_desc, value) = false) Then
				Me._member_title_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFsoExportDataResult
	
	Private _field_ticket_number As String
	
	Private _crew_finished_job_datetime As System.Nullable(Of Date)
	
	Private _currency As String
	
	Private _comment As String
	
	Private _well_name As String
	
	Private _psl As String
	
	Private _material As String
	
	Private _category_code As String
	
	Private _category_desc As String
	
	Private _sold_to_id As System.Nullable(Of Integer)
	
	Private _sold_to_name As String
	
	Private _profit_center_id As System.Nullable(Of Integer)
	
	Private _dist_address As String
	
	Private _dist_city As String
	
	Private _dist_state As String
	
	Private _dist_postal_code As String
	
	Private _dist_manager As String
	
	Private _dist_phone As String
	
	Private _dist_fax As String
	
	Private _plant_id As String
	
	Private _billing_email As String
	
	Private _psl_indicator As String
	
	Private _multi_psl_starting_row As System.Nullable(Of Integer)
	
	Private _tcp_service_flag As System.Nullable(Of Boolean)
	
	Private _export_line_item_multiplier As System.Nullable(Of Integer)
	
	Private _user_id As String
	
	Private _number_of_times_exported As System.Nullable(Of Integer)
	
	Private _sap_export_id As String
	
	Private _multi_psl_export_flag As Boolean
	
	Private _geoscience_fso_flag As Boolean
	
	Private _sap_export_last_used_row_number As Integer
	
	Private _other_fsos_exported_count As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_field_ticket_number", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property field_ticket_number() As String
		Get
			Return Me._field_ticket_number
		End Get
		Set
			If (String.Equals(Me._field_ticket_number, value) = false) Then
				Me._field_ticket_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_crew_finished_job_datetime", DbType:="SmallDateTime")>  _
	Public Property crew_finished_job_datetime() As System.Nullable(Of Date)
		Get
			Return Me._crew_finished_job_datetime
		End Get
		Set
			If (Me._crew_finished_job_datetime.Equals(value) = false) Then
				Me._crew_finished_job_datetime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currency", DbType:="VarChar(10)")>  _
	Public Property currency() As String
		Get
			Return Me._currency
		End Get
		Set
			If (String.Equals(Me._currency, value) = false) Then
				Me._currency = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(2500)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me._comment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_well_name", DbType:="VarChar(80)")>  _
	Public Property well_name() As String
		Get
			Return Me._well_name
		End Get
		Set
			If (String.Equals(Me._well_name, value) = false) Then
				Me._well_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property psl() As String
		Get
			Return Me._psl
		End Get
		Set
			If (String.Equals(Me._psl, value) = false) Then
				Me._psl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(30)")>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me._material = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_code", DbType:="VarChar(10)")>  _
	Public Property category_code() As String
		Get
			Return Me._category_code
		End Get
		Set
			If (String.Equals(Me._category_code, value) = false) Then
				Me._category_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category_desc", DbType:="VarChar(20)")>  _
	Public Property category_desc() As String
		Get
			Return Me._category_desc
		End Get
		Set
			If (String.Equals(Me._category_desc, value) = false) Then
				Me._category_desc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_id", DbType:="Int")>  _
	Public Property sold_to_id() As System.Nullable(Of Integer)
		Get
			Return Me._sold_to_id
		End Get
		Set
			If (Me._sold_to_id.Equals(value) = false) Then
				Me._sold_to_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sold_to_name", DbType:="VarChar(80)")>  _
	Public Property sold_to_name() As String
		Get
			Return Me._sold_to_name
		End Get
		Set
			If (String.Equals(Me._sold_to_name, value) = false) Then
				Me._sold_to_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_profit_center_id", DbType:="Int")>  _
	Public Property profit_center_id() As System.Nullable(Of Integer)
		Get
			Return Me._profit_center_id
		End Get
		Set
			If (Me._profit_center_id.Equals(value) = false) Then
				Me._profit_center_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_address", DbType:="VarChar(80)")>  _
	Public Property dist_address() As String
		Get
			Return Me._dist_address
		End Get
		Set
			If (String.Equals(Me._dist_address, value) = false) Then
				Me._dist_address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_city", DbType:="VarChar(50)")>  _
	Public Property dist_city() As String
		Get
			Return Me._dist_city
		End Get
		Set
			If (String.Equals(Me._dist_city, value) = false) Then
				Me._dist_city = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_state", DbType:="VarChar(10)")>  _
	Public Property dist_state() As String
		Get
			Return Me._dist_state
		End Get
		Set
			If (String.Equals(Me._dist_state, value) = false) Then
				Me._dist_state = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_postal_code", DbType:="VarChar(10)")>  _
	Public Property dist_postal_code() As String
		Get
			Return Me._dist_postal_code
		End Get
		Set
			If (String.Equals(Me._dist_postal_code, value) = false) Then
				Me._dist_postal_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_manager", DbType:="VarChar(50)")>  _
	Public Property dist_manager() As String
		Get
			Return Me._dist_manager
		End Get
		Set
			If (String.Equals(Me._dist_manager, value) = false) Then
				Me._dist_manager = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_phone", DbType:="VarChar(30)")>  _
	Public Property dist_phone() As String
		Get
			Return Me._dist_phone
		End Get
		Set
			If (String.Equals(Me._dist_phone, value) = false) Then
				Me._dist_phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_fax", DbType:="VarChar(30)")>  _
	Public Property dist_fax() As String
		Get
			Return Me._dist_fax
		End Get
		Set
			If (String.Equals(Me._dist_fax, value) = false) Then
				Me._dist_fax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plant_id", DbType:="VarChar(10)")>  _
	Public Property plant_id() As String
		Get
			Return Me._plant_id
		End Get
		Set
			If (String.Equals(Me._plant_id, value) = false) Then
				Me._plant_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_billing_email", DbType:="VarChar(128)")>  _
	Public Property billing_email() As String
		Get
			Return Me._billing_email
		End Get
		Set
			If (String.Equals(Me._billing_email, value) = false) Then
				Me._billing_email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_psl_indicator", DbType:="VarChar(5)")>  _
	Public Property psl_indicator() As String
		Get
			Return Me._psl_indicator
		End Get
		Set
			If (String.Equals(Me._psl_indicator, value) = false) Then
				Me._psl_indicator = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_multi_psl_starting_row", DbType:="Int")>  _
	Public Property multi_psl_starting_row() As System.Nullable(Of Integer)
		Get
			Return Me._multi_psl_starting_row
		End Get
		Set
			If (Me._multi_psl_starting_row.Equals(value) = false) Then
				Me._multi_psl_starting_row = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tcp_service_flag", DbType:="Bit")>  _
	Public Property tcp_service_flag() As System.Nullable(Of Boolean)
		Get
			Return Me._tcp_service_flag
		End Get
		Set
			If (Me._tcp_service_flag.Equals(value) = false) Then
				Me._tcp_service_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_export_line_item_multiplier", DbType:="Int")>  _
	Public Property export_line_item_multiplier() As System.Nullable(Of Integer)
		Get
			Return Me._export_line_item_multiplier
		End Get
		Set
			If (Me._export_line_item_multiplier.Equals(value) = false) Then
				Me._export_line_item_multiplier = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(20)")>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me._user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_number_of_times_exported", DbType:="Int")>  _
	Public Property number_of_times_exported() As System.Nullable(Of Integer)
		Get
			Return Me._number_of_times_exported
		End Get
		Set
			If (Me._number_of_times_exported.Equals(value) = false) Then
				Me._number_of_times_exported = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_id", DbType:="VarChar(30)")>  _
	Public Property sap_export_id() As String
		Get
			Return Me._sap_export_id
		End Get
		Set
			If (String.Equals(Me._sap_export_id, value) = false) Then
				Me._sap_export_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_multi_psl_export_flag", DbType:="Bit NOT NULL")>  _
	Public Property multi_psl_export_flag() As Boolean
		Get
			Return Me._multi_psl_export_flag
		End Get
		Set
			If ((Me._multi_psl_export_flag = value)  _
						= false) Then
				Me._multi_psl_export_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_geoscience_fso_flag", DbType:="Bit NOT NULL")>  _
	Public Property geoscience_fso_flag() As Boolean
		Get
			Return Me._geoscience_fso_flag
		End Get
		Set
			If ((Me._geoscience_fso_flag = value)  _
						= false) Then
				Me._geoscience_fso_flag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sap_export_last_used_row_number", DbType:="Int NOT NULL")>  _
	Public Property sap_export_last_used_row_number() As Integer
		Get
			Return Me._sap_export_last_used_row_number
		End Get
		Set
			If ((Me._sap_export_last_used_row_number = value)  _
						= false) Then
				Me._sap_export_last_used_row_number = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_other_fsos_exported_count", DbType:="Int")>  _
	Public Property other_fsos_exported_count() As System.Nullable(Of Integer)
		Get
			Return Me._other_fsos_exported_count
		End Get
		Set
			If (Me._other_fsos_exported_count.Equals(value) = false) Then
				Me._other_fsos_exported_count = value
			End If
		End Set
	End Property
End Class

Partial Public Class CopyFsoRecordResult
	
	Private _new_so_rec_id As System.Nullable(Of Integer)
	
	Private _new_fso_rec_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_so_rec_id", DbType:="Int")>  _
	Public Property new_so_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._new_so_rec_id
		End Get
		Set
			If (Me._new_so_rec_id.Equals(value) = false) Then
				Me._new_so_rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_fso_rec_id", DbType:="Int")>  _
	Public Property new_fso_rec_id() As System.Nullable(Of Integer)
		Get
			Return Me._new_fso_rec_id
		End Get
		Set
			If (Me._new_fso_rec_id.Equals(value) = false) Then
				Me._new_fso_rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetAssetDocRecordsResult
	
	Private _rec_id As Integer
	
	Private _asset_id As String
	
	Private _update_user_id As String
	
	Private _update_time As System.Nullable(Of Date)
	
	Private _original_file_path As String
	
	Private _icon_description As String
	
	Private _document_type As String
	
	Private _file_size As System.Nullable(Of Single)
	
	Private _expiry_date As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_id", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property asset_id() As String
		Get
			Return Me._asset_id
		End Get
		Set
			If (String.Equals(Me._asset_id, value) = false) Then
				Me._asset_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_user_id", DbType:="VarChar(30)")>  _
	Public Property update_user_id() As String
		Get
			Return Me._update_user_id
		End Get
		Set
			If (String.Equals(Me._update_user_id, value) = false) Then
				Me._update_user_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_update_time", DbType:="DateTime")>  _
	Public Property update_time() As System.Nullable(Of Date)
		Get
			Return Me._update_time
		End Get
		Set
			If (Me._update_time.Equals(value) = false) Then
				Me._update_time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_original_file_path", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property original_file_path() As String
		Get
			Return Me._original_file_path
		End Get
		Set
			If (String.Equals(Me._original_file_path, value) = false) Then
				Me._original_file_path = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_icon_description", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property icon_description() As String
		Get
			Return Me._icon_description
		End Get
		Set
			If (String.Equals(Me._icon_description, value) = false) Then
				Me._icon_description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_document_type", DbType:="VarChar(50)")>  _
	Public Property document_type() As String
		Get
			Return Me._document_type
		End Get
		Set
			If (String.Equals(Me._document_type, value) = false) Then
				Me._document_type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_file_size", DbType:="Real")>  _
	Public Property file_size() As System.Nullable(Of Single)
		Get
			Return Me._file_size
		End Get
		Set
			If (Me._file_size.Equals(value) = false) Then
				Me._file_size = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expiry_date", DbType:="Date")>  _
	Public Property expiry_date() As System.Nullable(Of Date)
		Get
			Return Me._expiry_date
		End Get
		Set
			If (Me._expiry_date.Equals(value) = false) Then
				Me._expiry_date = value
			End If
		End Set
	End Property
End Class

Partial Public Class InsertAssetDocRecordResult
	
	Private _rec_id As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Decimal(38,0)")>  _
	Public Property rec_id() As System.Nullable(Of Decimal)
		Get
			Return Me._rec_id
		End Get
		Set
			If (Me._rec_id.Equals(value) = false) Then
				Me._rec_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetRevenueForecastQuarterlyTotalsResult
	
	Private _disp_id As Integer
	
	Private _revenue_year As System.Nullable(Of Integer)
	
	Private _revenue_month As System.Nullable(Of Integer)
	
	Private _status As Short
	
	Private _dist_id As System.Nullable(Of Integer)
	
	Private _oilcomp_id As String
	
	Private _revenue As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue_year", DbType:="Int")>  _
	Public Property revenue_year() As System.Nullable(Of Integer)
		Get
			Return Me._revenue_year
		End Get
		Set
			If (Me._revenue_year.Equals(value) = false) Then
				Me._revenue_year = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue_month", DbType:="Int")>  _
	Public Property revenue_month() As System.Nullable(Of Integer)
		Get
			Return Me._revenue_month
		End Get
		Set
			If (Me._revenue_month.Equals(value) = false) Then
				Me._revenue_month = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="SmallInt NOT NULL")>  _
	Public Property status() As Short
		Get
			Return Me._status
		End Get
		Set
			If ((Me._status = value)  _
						= false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dist_id", DbType:="Int")>  _
	Public Property dist_id() As System.Nullable(Of Integer)
		Get
			Return Me._dist_id
		End Get
		Set
			If (Me._dist_id.Equals(value) = false) Then
				Me._dist_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oilcomp_id", DbType:="Char(40)")>  _
	Public Property oilcomp_id() As String
		Get
			Return Me._oilcomp_id
		End Get
		Set
			If (String.Equals(Me._oilcomp_id, value) = false) Then
				Me._oilcomp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_revenue", DbType:="Decimal(15,2)")>  _
	Public Property revenue() As System.Nullable(Of Decimal)
		Get
			Return Me._revenue
		End Get
		Set
			If (Me._revenue.Equals(value) = false) Then
				Me._revenue = value
			End If
		End Set
	End Property
End Class

Partial Public Class CheckAssetIdExistsResult
	
	Private _asset_exists As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asset_exists", DbType:="Bit")>  _
	Public Property asset_exists() As System.Nullable(Of Boolean)
		Get
			Return Me._asset_exists
		End Get
		Set
			If (Me._asset_exists.Equals(value) = false) Then
				Me._asset_exists = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispMarketCodeCompetenciesResult
	
	Private _market_code As String
	
	Private _competency_id As String
	
	Private _member_title_id As String
	
	Private _competency_desc As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_market_code", DbType:="VarChar(73) NOT NULL", CanBeNull:=false)>  _
	Public Property market_code() As String
		Get
			Return Me._market_code
		End Get
		Set
			If (String.Equals(Me._market_code, value) = false) Then
				Me._market_code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_id() As String
		Get
			Return Me._competency_id
		End Get
		Set
			If (String.Equals(Me._competency_id, value) = false) Then
				Me._competency_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_desc", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_desc() As String
		Get
			Return Me._competency_desc
		End Get
		Set
			If (String.Equals(Me._competency_desc, value) = false) Then
				Me._competency_desc = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchOperationsDashboardPersonnelCompetenciesResult
	
	Private _disp_id As Integer
	
	Private _employee_id As String
	
	Private _competency_id As String
	
	Private _competency_acquired_date As System.Nullable(Of Date)
	
	Private _competency_expiry_date As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_id() As String
		Get
			Return Me._competency_id
		End Get
		Set
			If (String.Equals(Me._competency_id, value) = false) Then
				Me._competency_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_acquired_date", DbType:="Date")>  _
	Public Property competency_acquired_date() As System.Nullable(Of Date)
		Get
			Return Me._competency_acquired_date
		End Get
		Set
			If (Me._competency_acquired_date.Equals(value) = false) Then
				Me._competency_acquired_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_expiry_date", DbType:="Date")>  _
	Public Property competency_expiry_date() As System.Nullable(Of Date)
		Get
			Return Me._competency_expiry_date
		End Get
		Set
			If (Me._competency_expiry_date.Equals(value) = false) Then
				Me._competency_expiry_date = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispatchOperationsDashboardRequiredCompetenciesResult
	
	Private _disp_id As Integer
	
	Private _competency_id As String
	
	Private _member_title_id As String
	
	Private _employee_id As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_disp_id", DbType:="Int NOT NULL")>  _
	Public Property disp_id() As Integer
		Get
			Return Me._disp_id
		End Get
		Set
			If ((Me._disp_id = value)  _
						= false) Then
				Me._disp_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_id() As String
		Get
			Return Me._competency_id
		End Get
		Set
			If (String.Equals(Me._competency_id, value) = false) Then
				Me._competency_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_title_id", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property member_title_id() As String
		Get
			Return Me._member_title_id
		End Get
		Set
			If (String.Equals(Me._member_title_id, value) = false) Then
				Me._member_title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetDispPersonnelCompetenciesResult
	
	Private _employee_id As String
	
	Private _competency_id As String
	
	Private _competency_acquired_date As System.Nullable(Of Date)
	
	Private _competency_expiry_date As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employee_id", DbType:="VarChar(20)")>  _
	Public Property employee_id() As String
		Get
			Return Me._employee_id
		End Get
		Set
			If (String.Equals(Me._employee_id, value) = false) Then
				Me._employee_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property competency_id() As String
		Get
			Return Me._competency_id
		End Get
		Set
			If (String.Equals(Me._competency_id, value) = false) Then
				Me._competency_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_acquired_date", DbType:="Date")>  _
	Public Property competency_acquired_date() As System.Nullable(Of Date)
		Get
			Return Me._competency_acquired_date
		End Get
		Set
			If (Me._competency_acquired_date.Equals(value) = false) Then
				Me._competency_acquired_date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_competency_expiry_date", DbType:="Date")>  _
	Public Property competency_expiry_date() As System.Nullable(Of Date)
		Get
			Return Me._competency_expiry_date
		End Get
		Set
			If (Me._competency_expiry_date.Equals(value) = false) Then
				Me._competency_expiry_date = value
			End If
		End Set
	End Property
End Class
